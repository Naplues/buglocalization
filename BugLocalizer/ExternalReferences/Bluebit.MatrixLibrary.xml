<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<doc>
  <assembly>
    <name>Bluebit.MatrixLibrary</name>
  </assembly>
  <members>
    <member name="N:Bluebit.MatrixLibrary">
      <summary>The Bluebit.MatrixLibrary namespace contains classes for representing and manipulating real and complex matrices and vectors.</summary>
      <remarks> The Bluebit.MatrixLibrary namespace contains the Matrix and Vector classes for representing real matrices and vectors and their complex equivalents CMatrix and CVector for complex matrices and vectors. Additionally, it contains the Cholesky, LQ, LU, QR, SVD classes for factoring real matrices and the CCholesky, CLQ, CLU, CQR, CSVD classes for factoring complex matrices respectively. The Eigen and CEigen classes are used for the eigenvalues and eigenvectors calculations of general matrices, at the same time as SymEigen for symmetric and CSymEigen for hermitian matrices.</remarks>
    </member>
    <member name="T:Bluebit.MatrixLibrary.BalanceType">
      <summary>Indicates how the input matrix should be diagonally scaled and/or permuted to improve the conditioning of its eigenvalues.</summary>
      <remarks> BalanceType enumeration is used in Eigen and CEigen constructor in order to indicate the type of balancing that will be used.</remarks>
    </member>
    <member name="F:Bluebit.MatrixLibrary.BalanceType.None">
      <summary>Do not diagonally scale or permute.</summary>
    </member>
    <member name="F:Bluebit.MatrixLibrary.BalanceType.Scale">
      <summary>Diagonally scale the matrix to make its rows and columns more equal in norm. Do not permute.</summary>
    </member>
    <member name="F:Bluebit.MatrixLibrary.BalanceType.Permute">
      <summary>Perform permutations to make the matrix more nearly upper triangular. Do not diagonally scale.</summary>
    </member>
    <member name="F:Bluebit.MatrixLibrary.BalanceType.Both">
      <summary>Both diagonally scale and permute.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.ConcatenateMode">
      <summary>Indicates horizontal or vertical matrix concatenation.</summary>
    </member>
    <member name="F:Bluebit.MatrixLibrary.ConcatenateMode.Vertically">
      <summary>Vertical matrix concatenation.</summary>
    </member>
    <member name="F:Bluebit.MatrixLibrary.ConcatenateMode.Horizontally">
      <summary>Horizontal matrix concatenation.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.FactorizationStrategy">
      <summary>Specifies the factorization strategy while solving systems of linear equations.</summary>
    </member>
    <member name="F:Bluebit.MatrixLibrary.FactorizationStrategy.ComputeWhenNeeded">
      <summary>Recompute the factorization only when needed.</summary>
    </member>
    <member name="F:Bluebit.MatrixLibrary.FactorizationStrategy.ComputeAlways">
      <summary>Recompute the factorization always.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.FillInReducingMethod">
      <summary>Specifies the fill in reducing ordering method to use while computing a matrix factorization.</summary>
    </member>
    <member name="F:Bluebit.MatrixLibrary.FillInReducingMethod.ParallelNestedDissection">
      <summary>The parallel nested dissection algorithm is used.</summary>
    </member>
    <member name="F:Bluebit.MatrixLibrary.FillInReducingMethod.NestedDissection">
      <summary>The sequential nested dissection algorithm is used.</summary>
    </member>
    <member name="F:Bluebit.MatrixLibrary.FillInReducingMethod.MinimumDegree">
      <summary>The minimum degree algorithm is used.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.MatrixType">
      <summary>Specifies the type of the matrix.</summary>
    </member>
    <member name="F:Bluebit.MatrixLibrary.MatrixType.Indefinite">
      <summary>The matrix is symmetric positive indefinite.</summary>
    </member>
    <member name="F:Bluebit.MatrixLibrary.MatrixType.PositiveDefinite">
      <summary>The matrix is symmetric positive definite.</summary>
    </member>
    <member name="F:Bluebit.MatrixLibrary.MatrixType.StructurallySymmetric">
      <summary>The matrix is structurally symmetric.</summary>
    </member>
    <member name="F:Bluebit.MatrixLibrary.MatrixType.Unsymmetric">
      <summary>The matrix is unsymmetric.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.NormalizeMode">
      <summary>Indicates the normalization type during matrix columns or rows normalization.</summary>
      <remarks>NormalizeMode enumeration is used in NormalizeCols, NormalizeRows member functions to specify the normalization style.</remarks>
    </member>
    <member name="F:Bluebit.MatrixLibrary.NormalizeMode.ZScores">
      <summary>Normalizes columns or rows to zscores (values having zero mean and unit standard deviation).</summary>
    </member>
    <member name="F:Bluebit.MatrixLibrary.NormalizeMode.UnitLength">
      <summary>Normalizes columns or rows so that they become unit length vectors (their sum of squares is 1).</summary>
    </member>
    <member name="F:Bluebit.MatrixLibrary.NormalizeMode.MaximumOne">
      <summary>Normalizes columns or rows so that their biggest element is 1.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.NormType">
      <summary>Specifies the norm value to be returned by the Norm member function.</summary>
      <remarks>NormType enumeration is used to specify the norm to be returned by the Norm member function of the Matrix and CMatrix classes.</remarks>
    </member>
    <member name="F:Bluebit.MatrixLibrary.NormType.FrobeniusNorm">
      <summary>Frobenius norm of the matrix or vector (square root of sum of squares).</summary>
    </member>
    <member name="F:Bluebit.MatrixLibrary.NormType.InfinityNorm">
      <summary>Infinity norm of the matrix (maximum row sum).</summary>
    </member>
    <member name="F:Bluebit.MatrixLibrary.NormType.OneNorm">
      <summary>1-norm of the matrix (maximum column sum).</summary>
    </member>
    <member name="F:Bluebit.MatrixLibrary.NormType.MaxAbsValue">
      <summary>The element of largest absolute value of the matrix.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.SolverStatus">
      <summary>Describes the solver status.</summary>
    </member>
    <member name="F:Bluebit.MatrixLibrary.SolverStatus.OtherError">
      <summary>General undefined error.</summary>
    </member>
    <member name="F:Bluebit.MatrixLibrary.SolverStatus.ZeroPivot">
      <summary>A zero pivot was encountered while solving.</summary>
    </member>
    <member name="F:Bluebit.MatrixLibrary.SolverStatus.ReorderingProblem">
      <summary>A reordering problem was encountered.</summary>
    </member>
    <member name="F:Bluebit.MatrixLibrary.SolverStatus.OutOfMemory">
      <summary>An out of memory problem has occurred.</summary>
    </member>
    <member name="F:Bluebit.MatrixLibrary.SolverStatus.InputInconsistent">
      <summary>The inputs of of the problem are inconsistent</summary>
    </member>
    <member name="F:Bluebit.MatrixLibrary.SolverStatus.Success">
      <summary>There was no error, the operation completed successfully.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.SortOrder">
      <summary>SortOrder enumeration specifies the order in SortRows, SortCols methods.</summary>
    </member>
    <member name="F:Bluebit.MatrixLibrary.SortOrder.Ascending">
      <summary>Sort in ascending order.</summary>
    </member>
    <member name="F:Bluebit.MatrixLibrary.SortOrder.Descending">
      <summary>Sort in descending order.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.StorageOrder">
      <summary>Specifies how a one-dimensional array will be used to fill the elements of the constructed matrix.</summary>
    </member>
    <member name="F:Bluebit.MatrixLibrary.StorageOrder.RowMajor">
      <summary>Fill matrix in row major order (row by row).</summary>
    </member>
    <member name="F:Bluebit.MatrixLibrary.StorageOrder.ColumnMajor">
      <summary>Fill matrix in column major order (column by column).</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.TransposeMode">
      <summary>Indicates whether the original matrix, the transposed matrix, or the conjugate transpose of the original matrix is used in the computation.</summary>
    </member>
    <member name="F:Bluebit.MatrixLibrary.TransposeMode.NotTransposed">
      <summary>The original matrix is used.</summary>
    </member>
    <member name="F:Bluebit.MatrixLibrary.TransposeMode.Transposed">
      <summary>The transpose of the matrix is used.</summary>
    </member>
    <member name="F:Bluebit.MatrixLibrary.TransposeMode.ConjugateTransposed">
      <summary>The conjugate transpose of the matrix is used.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.Complex">
      <summary>The Complex structure represents a complex number.</summary>
      <remarks>Double-precision floating point numbers are used to store the real and the imaginary part.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.#ctor">
      <summary>Initializes a new instance of the complex structure.Initializes a new instance of the complex structure setting both its real and imaginary part to zero.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.#ctor(System.Double)">
      <summary>Initializes a new instance of the Complex structure setting its real part to the specified value and its imaginary part to zero.</summary>
      <param name="real">The real part of the complex number.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.#ctor(System.Double,System.Double)">
      <summary>Initializes a new instance of the Complex structure setting both its real and imaginary parts to the specified values.</summary>
      <param name="real">The real part of the complex number.</param>
      <param name="imag">The imaginary part of the complex number.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.#ctor(System.Single)">
      <summary> Initializes a new instance of the Complex structure setting its real part to the specified value and its imaginary part to zero. Initializes a new instance of the Complex structure setting its real part to the specified value and its imaginary part to zero.</summary>
      <param name="real"> The real part of the complex number. The real part of the complex number.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.#ctor(System.Single,System.Single)">
      <summary> Initializes a new instance of the Complex structure setting both its real and imaginary parts to the specified values. Initializes a new instance of the Complex structure setting both its real and imaginary parts to the specified values.</summary>
      <param name="real"> The real part of the complex number. The real part of the complex number.</param>
      <param name="imag"> The imaginary part of the complex number. The imaginary part of the complex number.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.Abs">
      <summary>Returns the absolute value of the complex number.</summary>
      <returns>The absolute value value of the complex number.</returns>
      <remarks>The absolute value of a complex number equals to the square root of the sum of the squares of its real and imaginary part.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.Abs">
      <summary>Returns the absolute value of the current complex number.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.Abs(Bluebit.MatrixLibrary.Complex)">
      <summary>Returns the absolute value of the specified complex number.</summary>
      <param name="c">A complex number whose absolute values is to be computed.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.Add">
      <summary>Adds complex numbers.</summary>
      <returns>The complex number resulted from the addition.</returns>
      <remarks>Add method is an alias for the addition operator.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.Add(Bluebit.MatrixLibrary.Complex,System.Double)">
      <summary>Returns the sum of complex number with a real number.</summary>
      <returns>The sum a+b.</returns>
      <param name="a">A complex number.</param>
      <param name="b">A real number.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.Add(Bluebit.MatrixLibrary.Complex,Bluebit.MatrixLibrary.Complex)">
      <summary>Returns the sum of two complex numbers.</summary>
      <returns>The sum a+b.</returns>
      <param name="a">A complex number.</param>
      <param name="b">A complex number.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.Conjugate">
      <summary>Returns the conjugate of this complex number.Returns the conjugate of a complex number</summary>
      <returns>The conjugate of the complex number.</returns>
      <remarks>The complex conjugate of a+bi is a-bi.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.Conjugate">
      <summary>Returns the conjugate of this complex number.</summary>
      <returns>A complex representing the conjugate of the current complex number.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.Conjugate(Bluebit.MatrixLibrary.Complex)">
      <summary>Returns the conjugate of the specified complex number.</summary>
      <returns>A complex representing the conjugate of the specified complex number.</returns>
      <param name="c">A complex number.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.Cos(Bluebit.MatrixLibrary.Complex)">
      <summary>Returns the cosine of a complex number.</summary>
      <returns>A complex representing the cosine of c.</returns>
      <param name="c">A complex number.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.Cosh(Bluebit.MatrixLibrary.Complex)">
      <summary>Returns the hyperbolic cosine of a complex number</summary>
      <returns>A complex representing the hyperbolic cosine of c.</returns>
      <param name="c">A complex number.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.Divide">
      <summary>Performs division with complex numbers.</summary>
      <remarks> The computation of a/b will not overflow on an intermediary step unless the results overflows. This method is an alias for the division operator.</remarks>
      <returns>A complex number resulted from the division.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.Divide(System.Double,Bluebit.MatrixLibrary.Complex)">
      <summary>Divides a real number by a complex number.</summary>
      <returns>The quotient a/b.</returns>
      <param name="a">A real number.</param>
      <param name="b">A complex number.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.Divide(Bluebit.MatrixLibrary.Complex,System.Double)">
      <summary>Divides a complex number by a real number.</summary>
      <returns>The quotient a/b.</returns>
      <param name="a">A complex number.</param>
      <param name="b">A real number.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.Divide(Bluebit.MatrixLibrary.Complex,Bluebit.MatrixLibrary.Complex)">
      <summary>Divides a complex number by another.</summary>
      <returns>The quotient a/b.</returns>
      <param name="a">A complex number.</param>
      <param name="b">A complex number.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.Equals(System.Object)">
      <summary>Indicates whether this instance of the complex structure and the specified complex are equal.</summary>
      <returns>true if obj parameter is a complex structure and contains the same value as this instance.</returns>
      <param name="obj">Another complex to compare to.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.FromDouble(System.Double)">
      <summary>Converts a double real number to a complex structure.</summary>
      <returns>A complex structure equal to the real number.</returns>
      <param name="a">The real number to convert.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.GetHashCode">
      <summary>Returns the hash code of the current ShortParentItemName. Returns the hash code for this instance</summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.A 32-bit signed integer that represents the hash code.</returns>
      <remarks>This method overrides Object.GetHashCode and generates the same hash code for two objects that are equal according to the Equals method.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.IsInfinity(Bluebit.MatrixLibrary.Complex)">
      <summary>Returns a value indicating whether the specified complex number evaluates to an infinity value.</summary>
      <returns>true if either the real or imaginary part evaluates to positive or negative infinity; otherwise false.</returns>
      <param name="c">A complex number.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.IsNaN(Bluebit.MatrixLibrary.Complex)">
      <summary>Returns a value indicating whether the specified complex number evaluates to a value that is not a number.</summary>
      <returns>true if either the real or complex part evaluates to System.Double.NaN; otherwise false.</returns>
      <remarks>Floating-point operations return System.Double.NaN to signal that that result of the operation is undefined. For example, dividing 0.0 by 0.0 results in NaN.</remarks>
      <param name="c">A complex number.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.Multiply">
      <summary>Multiplies complex numbers</summary>
      <remarks>This method is an alias for the multiply operator.</remarks>
      <returns>The complex number resulted from the multiplication.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.Multiply(Bluebit.MatrixLibrary.Complex,System.Double)">
      <summary>Multiplies a complex number by a real number.</summary>
      <returns>The product a*b.</returns>
      <param name="a">A complex number.</param>
      <param name="b">A real number.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.Multiply(Bluebit.MatrixLibrary.Complex,Bluebit.MatrixLibrary.Complex)">
      <summary>Multiplies two complex numbers.</summary>
      <returns>The product a*b.</returns>
      <param name="a">A complex number.</param>
      <param name="b">A complex number.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.Negate(Bluebit.MatrixLibrary.Complex)">
      <summary>Negates a complex number.</summary>
      <returns>The negation of a.</returns>
      <remarks>This method is an alias for the unary negation operator.</remarks>
      <param name="a">A complex number.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.Plus(Bluebit.MatrixLibrary.Complex)">
      <summary>Returns the value of the complex number.</summary>
      <param name="a">A complex number.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.Reciprocal">
      <summary>Returns the reciprocal of the complex number.Returns the reciprocal of a complex number.</summary>
      <returns>The reciprocal of the complex number.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.Reciprocal">
      <summary>Returns the reciprocal of this complex number.</summary>
      <returns>A complex representing the reciprocal of the current complex number.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.Reciprocal(Bluebit.MatrixLibrary.Complex)">
      <summary>Returns the reciprocal of the specified complex number.</summary>
      <returns>A complex representing the reciprocal of c.</returns>
      <param name="c">A complex number.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.Sin(Bluebit.MatrixLibrary.Complex)">
      <summary>Returns the sine of a complex number.</summary>
      <returns>A complex representing the sine of c.</returns>
      <param name="c">A complex number.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.Sinh(Bluebit.MatrixLibrary.Complex)">
      <summary>Returns the hyperbolic sine of a complex number.</summary>
      <returns>A complex representing the hyperbolic sine of c.</returns>
      <param name="c">A complex number.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.Sqrt">
      <summary>Returns the square root of a complex number.</summary>
      <returns>The square root of the complex number.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.Sqrt">
      <summary>Returns the square root of the current complex number.</summary>
      <returns>A complex representing the square root of the current complex number.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.Sqrt(Bluebit.MatrixLibrary.Complex)">
      <summary>Returns the square root of the specified complex number.</summary>
      <returns>A complex representing the square root of c.</returns>
      <param name="c">A complex number.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.Subtract">
      <summary>Subtracts complex numbers.</summary>
      <remarks>This method is an alias for the subtraction operator.</remarks>
      <returns>A complex number</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.Subtract(System.Double,Bluebit.MatrixLibrary.Complex)">
      <summary>Subtracts a complex number from a real number.</summary>
      <returns>The result of subtracting a-b.</returns>
      <param name="a">A real number.</param>
      <param name="b">A complex number.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.Subtract(Bluebit.MatrixLibrary.Complex,System.Double)">
      <summary>Subtracts a real number from a complex number.</summary>
      <returns>The result of subtracting a-b.</returns>
      <param name="a">A complex number.</param>
      <param name="b">A real number.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.Subtract(Bluebit.MatrixLibrary.Complex,Bluebit.MatrixLibrary.Complex)">
      <summary>Subtracts a complex number from another.</summary>
      <returns>The result of subtracting a-b.</returns>
      <param name="a">A complex number.</param>
      <param name="b">A complex number.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.ToString">
      <summary>Returns a string representing the complex number.</summary>
      <returns>A string representation of the complex number in the form (a,bi) where a and b are the real and imaginary parts respectively.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.ToString">
      <summary>Returns a string representing the complex number.</summary>
      <returns>A string representation of the complex number in the form (a,bi) where a and b are the real and imaginary parts respectively.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.ToString(System.String)">
      <summary>Returns a string representing the complex number using the specified format.</summary>
      <returns>A string representation of the complex number in the form (a,bi) where a and b are the real and imaginary parts respectively.</returns>
      <param name="format">A string containing a format specification.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.ToString(System.String,System.IFormatProvider)">
      <summary>Returns a string representing the complex number using the specified format and the culture-specific formatting information.</summary>
      <returns>A string representation of the complex number in the form (a,bi) where a and b are the real and imaginary parts respectively.</returns>
      <param name="format">A string containing a format specification.</param>
      <param name="provider"> An IFormatProvider that supplies culture-specific formatting information.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Complex.ToString(System.IFormatProvider)">
      <summary>Returns a string representing the complex number using the specified culture-specific formatting information.</summary>
      <returns>A string representation of the complex number in the form (a,bi) where a and b are the real and imaginary parts respectively.</returns>
      <param name="provider"> An IFormatProvider that supplies culture-specific formatting information.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Complex.op_Addition">
      <summary>Returns the sum of two complex numbers or the sum of complex numbers with real numbers.</summary>
      <returns>A complex number as the result of the addition.</returns>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Complex.op_Addition">
      <summary>Returns the sum of two complex numbers.</summary>
      <returns>The sum a+b.</returns>
      <param name="a">A complex number.</param>
      <param name="b">A complex number.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Complex.op_Addition">
      <summary>Returns the sum of a complex number and a real number.</summary>
      <returns>The sum a+b.</returns>
      <param name="a">A complex number.</param>
      <param name="b">A real number.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Complex.op_Addition">
      <summary>Returns the sum of a real number and a complex.</summary>
      <returns>The sum a+b.</returns>
      <param name="a">A real number.</param>
      <param name="b">A complex number.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Complex.op_Division">
      <summary>Performs division with complex numbers.</summary>
      <returns>A complex number resulted from the division.</returns>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Complex.op_Division">
      <summary>Divides a complex number by another.</summary>
      <returns>The quotient a/b.</returns>
      <param name="a">A complex number.</param>
      <param name="b">A complex number.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Complex.op_Division">
      <summary>Divides a complex number by a real number.</summary>
      <returns>The quotient a/b.</returns>
      <param name="a">A complex number.</param>
      <param name="b">A complex number.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Complex.op_Division">
      <summary>Divides a complex number by a real number.</summary>
      <returns>The quotient a/b.</returns>
      <param name="a">A real number.</param>
      <param name="b">A complex number.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Complex.op_Equality">
      <summary>Tests whether two complex numbers are equal.</summary>
      <returns>true if complex numbers are equal; otherwise false.</returns>
      <param name="a">The complex number on the left side of the equality operator.</param>
      <param name="b">The complex number on the right side of the equality operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Complex.op_Implicit">
      <summary>A double value to convert.Converts a double to a Complex StructureConverts a double to its equivalent complex.</summary>
      <returns>A complex number.A complex whose real part equals a.</returns>
      <param name="a">The double value to convert.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Complex.op_Inequality">
      <summary>Tests whether two complex structures are not equal.</summary>
      <returns>true if complex numbers are not equal; otherwise false.</returns>
      <param name="a">The complex number on the left side of the equality operator.</param>
      <param name="b">The complex number on the right side of the equality operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Complex.op_Multiply">
      <summary>Multiplies complex numbers.</summary>
      <returns>A complex number.</returns>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Complex.op_Multiply">
      <summary>Multiplies two complex numbers.</summary>
      <returns>The product a*b.</returns>
      <param name="a">A complex number.</param>
      <param name="b">A complex number</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Complex.op_Multiply">
      <summary>Multiplies a complex number by a real number.</summary>
      <returns>The product a*b.</returns>
      <param name="a">A complex number.</param>
      <param name="b">A real number.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Complex.op_Multiply">
      <summary>Multiplies a real number by a complex.</summary>
      <returns>The product a*b</returns>
      <param name="a">A real number.</param>
      <param name="b">A complex number.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Complex.op_Subtraction">
      <summary>Subtracts complex numbers.</summary>
      <returns>A complex number.</returns>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Complex.op_Subtraction">
      <summary>Subtracts a complex number from another.</summary>
      <returns>The result of subtracting a-b.</returns>
      <param name="a">A complex number.</param>
      <param name="b">A complex number.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Complex.op_Subtraction">
      <summary>Subtracts a real number from a complex number.</summary>
      <returns>The result of subtracting a-b.</returns>
      <param name="a">A complex number.</param>
      <param name="b">A real number.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Complex.op_Subtraction">
      <summary>Subtracts a complex number from a real number.</summary>
      <returns>The result of subtracting a-b.</returns>
      <param name="a">A real number.</param>
      <param name="b">A complex number.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Complex.op_UnaryNegation">
      <summary>Negates a complex number.</summary>
      <returns>The negation of a.</returns>
      <param name="a">A complex number.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Complex.op_UnaryPlus">
      <summary>Returns the value of the complex number.</summary>
      <param name="a">A complex number.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Complex.Imag">
      <summary>The imaginary part of the complex number.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Complex.Real">
      <summary>The real part of the complex number.</summary>
    </member>
    <member name="F:Bluebit.MatrixLibrary.Complex.One">
      <summary>A constant representing a complex number equal to 1.</summary>
    </member>
    <member name="F:Bluebit.MatrixLibrary.Complex.Zero">
      <summary>A constant representing a complex number equal to zero.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.CCholesky">
      <summary>Represents a Cholesky factorization of a complex Hermitian positive-definite matrix.</summary>
      <remarks>Cholesky factorization is possible for Hermitian positive-definite matrices (using the CCholesky Class) and symmetric positive-definite matrices (using the Cholesky Class).</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CCholesky.#ctor(Bluebit.MatrixLibrary.CMatrix)">
      <summary>Initializes a new instance of the CCholesky class computing the Cholesky factorization of a complex Hermitian positive-definite matrix.</summary>
      <param name="matrix">A CMatrix object containing the complex Hermitian positive-definite matrix to factor.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CCholesky.Dispose">
      <summary>Releases all the resources used by the ShortParentItemName object. Releases all the resources used by the ShortParentItemName object.Releases all the resources used by the ShortParentItemName object.</summary>
      <remarks>Calling Dispose allows the resources used by this object to be reallocated for other purposes.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CCholesky.Inverse">
      <summary>Returns the inverse of a complex Hermitian positive-definite matrix using its Cholesky factorization.</summary>
      <returns>A CMatrix object containing the inverse of the factored matrix.</returns>
      <remarks>This method will return a null reference (Nothing in Visual Basic) if the Cholesky factorization could not be completed (if Succeeded property returns false).</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CCholesky.Solve(Bluebit.MatrixLibrary.CMatrix)">
      <summary>Solves a system of linear equations using the Cholesky factorization of a complex Hermitian positive-definite matrix.</summary>
      <returns>A CMatrix object that contains the solution of the system of linear equations.</returns>
      <remarks> The Solve method finds the solution to the system of linear equations A*X = B where: A denotes the complex Hermitian positive-definite matrix that has been previously factored (represented now by its Cholesky factorization). B denotes the matrix whose columns contain the right hand terms. X denotes the solution matrix that is to be computed. The system can be solved with multiple right-hand sides stored in the columns of the matrix B.</remarks>
      <param name="rightHands">A CMatrix object containing the right-hand sides for the system of linear equations.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CCholesky.L">
      <summary>Gets the factor L, the lower triangular part of the Cholesky factorization.</summary>
      <remarks> Lproperty returns the lower triangular part of the Cholesky factorizations that satisfies the relation A = L*LH, where LH denotes the conjugate transpose (adjoint) of the L matrix.</remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CCholesky.Size">
      <summary>Gets the size of the matrix that is represented by the factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CCholesky.Succeeded">
      <summary>Indicates whether the Cholesky factorization succeeded and has reached completion.</summary>
      <remarks>Check the Succeeded property before using the factorization for further computations.</remarks>
    </member>
    <member name="T:Bluebit.MatrixLibrary.CEigen">
      <summary> The CEigen class is used to compute the eigenvalues and the left and/or right eigenvectors of a general square complex matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CEigen.#ctor">
      <summary>Creates a new instance of the CEigen class.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CEigen.#ctor(Bluebit.MatrixLibrary.CMatrix)">
      <summary>Creates a new instance of the CEigen class, computing the eigenvalues and the right eigenvectors of a general square complex matrix, with preliminary matrix balancing.</summary>
      <remarks>Only the right eigenvectors are computed if this constructor is used; the LeftEigenvector, LeftEigenvectors properties will return a null reference (Nothing in Visual Basic).</remarks>
      <param name="matrix">A CMatrix object representing the complex square matrix whose eigenvalues and right eigenvectors are to be computed.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CEigen.#ctor(Bluebit.MatrixLibrary.CMatrix,System.Boolean)">
      <summary>Creates a new instance of the CEigen class computing the eigenvalues and optionally the right eigenvectors of a general square complex matrix, with preliminary matrix balancing.</summary>
      <remarks>Using a false value for the rightEigenvectors parameter allows you to calculate only the eigenvalues in cases where the eigenvectors are not needed.</remarks>
      <param name="matrix">A CMatrix object representing the complex square matrix whose eigenvalues and optionally its right eigenvectors are to be computed.</param>
      <param name="rightEigenvectors">A boolean value specifying whether the right eigenvectors will be computed.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CEigen.#ctor(Bluebit.MatrixLibrary.CMatrix,System.Boolean,System.Boolean)">
      <summary>Creates a new instance of the CEigen class computing the eigenvalues and optionally the right and/or the left eigenvectors of a general square complex matrix, with preliminary matrix balancing.</summary>
      <remarks>This constructor allows you to specify which of the right and/or left eigenvectors will be computed.</remarks>
      <param name="matrix">A CMatrix object representing the complex square matrix whose eigenvalues and optionally its right and/or left eigenvectors are to be computed.</param>
      <param name="rightEigenvectors">A boolean value specifying whether the right eigenvectors will be computed.</param>
      <param name="leftEigenvectors">A boolean value specifying whether the left eigenvectors will be computed.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CEigen.#ctor(Bluebit.MatrixLibrary.CMatrix,System.Boolean,System.Boolean,Bluebit.MatrixLibrary.BalanceType)">
      <summary>Creates a new instance of the CEigen class computing the eigenvalues and optionally the right and/or the left eigenvectors of a general square complex matrix, using the specified type of preliminary matrix balancing.</summary>
      <remarks> Balancing a matrix means permuting its rows and columns to make it more nearly upper triangular, and applying similarity transformations to make its rows and columns closer in norm. Generally balancing improves the accuracy of the computations. However, there are cases that a matrix contains near to zero elements that are due to roundoff errors. If balancing is used, those elements may become the same significant as others leading to incorrect eigenvectors. To avoid such a situation set the balance parameter to false.</remarks>
      <param name="matrix">A CMatrix object representing the complex square matrix whose eigenvalues and optionally its right and/or left eigenvectors are to be computed.</param>
      <param name="rightEigenvectors">A boolean value specifying whether the right eigenvectors will be computed.</param>
      <param name="leftEigenvectors">A boolean value specifying whether the left eigenvectors will be computed.</param>
      <param name="balance">A BalanceType enumeration specifying whether preliminary balancing will be used and the type of balancing.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CEigen.Dispose">
      <summary>Releases all the resources used by the ShortParentItemName object. Releases all the resources used by the ShortParentItemName object.Releases all the resources used by the ShortParentItemName object.</summary>
      <remarks>Calling Dispose allows the resources used by this object to be reallocated for other purposes.</remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CEigen.D">
      <summary>Gets a complex diagonal matrix, containing all the computed eigenvalues in its main diagonal.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CEigen.Eigenvalue(System.Int32)">
      <summary>Gets the specified eigenvalue.</summary>
      <param name="index">A zero-based index specifying the eigenvalue to return.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CEigen.Eigenvalues">
      <summary>Returns a vector containing all the computed eigenvalues.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CEigen.Eigenvector(System.Int32)">
      <summary>Gets the specified right eigenvector.</summary>
      <remarks>If the rightEigenvectors parameter of the CEigen class constructor is set to false, the right eigenvectors are not calculated and Eigenvector property returns a null reference (Nothing in Visual Basic).</remarks>
      <param name="index">An index specifying the eigenvector to return.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CEigen.Eigenvectors">
      <summary>Gets the right eigenvectors matrix.</summary>
      <remarks>If the rightEigenvectors parameter of the CEigen class constructor is set to false, the right eigenvectors are not calculated and the Eigenvectors property returns a null reference (Nothing in Visual Basic).</remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CEigen.LeftEigenvector(System.Int32)">
      <summary>Gets the specified left eigenvector.</summary>
      <remarks>If the leftEigenvectors parameter of the CEigen class constructor is set to false, the left eigenvectors are not calculated and the Eigenvector property returns a null reference (Nothing in Visual Basic).</remarks>
      <param name="index">An index specifying the eigenvector to return.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CEigen.LeftEigenvectors">
      <summary>Gets the left eigenvectors matrix.</summary>
      <remarks>If the leftEigenvectors parameter of the CEigen class constructor is set to false, the left eigenvectors are not calculated and the LeftEigenvectors property returns a null reference (Nothing in Visual Basic).</remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CEigen.Size">
      <summary>Gets the size of matrix that is represented by this eigen decomposition.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CEigen.Succeded">
      <summary>Indicates whether the eigenvalues-eigenvectors calculation succeeded to completion.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.Cholesky">
      <summary>Represents a Cholesky factorization of a real symmetric positive-definite matrix.</summary>
      <remarks>Cholesky factorization is possible for Hermitian positive-definite matrices (using the CCholesky Class) and symmetric positive-definite matrices (using the Cholesky Class).</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Cholesky.#ctor(Bluebit.MatrixLibrary.Matrix)">
      <summary>Initializes a new instance of the Cholesky class computing the Cholesky factorization of a real symmetric positive-definite matrix.</summary>
      <remarks> The Succeeded property indicates whether the factorization has completed successfully. It will return false if the matrix parameter does not represent a positive-definite matrix. Only the lower triangular part of the matrix is referenced during factorization and no check is made that the matrix is actually a symmetric matrix.</remarks>
      <param name="matrix">A Matrix object containing the real symmetric positive-definite matrix to factor.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Cholesky.Dispose">
      <summary>Releases all the resources used by the ShortParentItemName object. Releases all the resources used by the ShortParentItemName object.Releases all the resources used by the ShortParentItemName object.</summary>
      <remarks>Calling Dispose allows the resources used by this object to be reallocated for other purposes.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Cholesky.Inverse">
      <summary>Returns the inverse of a real symmetric positive-definite matrix using its Cholesky factorization.</summary>
      <returns>A Matrix object containing the inverse of the factored matrix.</returns>
      <remarks>This method will return a null reference (Nothing in Visual Basic) if the Cholesky factorization could not be completed (if Succeeded property returns false)</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Cholesky.Solve(Bluebit.MatrixLibrary.Matrix)">
      <summary>Solves a system of linear equations using the Cholesky factorization of a real symmetric positive-definite matrix.</summary>
      <returns>A Matrix object that contains the solution of the system of linear equations.</returns>
      <remarks> The Solve method finds a solution to the system of linear equations A*X = B where: A denotes the real symmetric positive-definite matrix that has been previously factored (represented now by its Cholesky factorization). B denotes the matrix whose columns contain the right hand terms. X denotes the solution matrix that is to be computed. The system can be solved with multiple right-hand sides stored in the columns of the matrix B. </remarks>
      <param name="rightHands">A Matrix object containing the right-hand sides for the system of linear equations.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Cholesky.L">
      <summary>Gets the factor L, the lower triangular part of the Cholesky factorization.</summary>
      <remarks> L property returns the lower triangular part of the Cholesky factorizations that satisfies the relation A = L * LT , where LT denotes the transpose of the L matrix.</remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Cholesky.Size">
      <summary>Gets the size of the matrix that is represented by the factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Cholesky.Succeeded">
      <summary>Indicates whether the Cholesky factorization succeeded and has reached completion.</summary>
      <remarks>Check the Succeeded property before using the factorization for further computations.</remarks>
    </member>
    <member name="T:Bluebit.MatrixLibrary.CLQ">
      <summary>Represents an LQ factorization of a general complex matrix.</summary>
      <remarks>The CLQ class can be used to find the minimum-norm solution of an underdetermined least-squares problem.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CLQ.#ctor(Bluebit.MatrixLibrary.CMatrix)">
      <summary>Initializes a new instance of the CLQ class computing the LQ factorization of a general complex matrix.</summary>
      <param name="matrix">A CMatrix object containing the matrix to factor.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CLQ.Dispose">
      <summary>Releases all the resources used by the ShortParentItemName object. Releases all the resources used by the ShortParentItemName object.Releases all the resources used by the ShortParentItemName object.</summary>
      <remarks>Calling Dispose allows the resources used by this object to be reallocated for other purposes.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CLQ.Solve(Bluebit.MatrixLibrary.CMatrix)">
      <summary>Solves an underdetermined system of linear equations using the LQ factorization of a complex matrix.</summary>
      <returns>A CMatrix object that contains the solution of the system of linear equations.</returns>
      <remarks> The Solve method finds a solution to the system of linear equations A*X = B where: A denotes the complex matrix that has been previously factored (represented now by its LQ factorization). B is the matrix whose columns contain the right hand terms. X is the solution matrix that is to be computed. The system can be solved with multiple right-hand sides stored in the columns of the matrix B. The columns of X are the minimum norm solution vectors. </remarks>
      <param name="rightHands">A CMatrix object containing the right-hand sides for the system of linear equations.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CLQ.Cols">
      <summary>Gets the number of columns of the matrix that is represented by the factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CLQ.L">
      <summary>Gets the factor L, the lower triangular matrix of the LQ factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CLQ.Q">
      <summary>Gets the factor Q, the orthogonal matrix of the LQ factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CLQ.Rows">
      <summary>Gets the number of rows of the matrix that is represented by the factorization.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.CLU">
      <summary>Represents an LU factorization of a general complex matrix.</summary>
      <remarks> The LU factorization of a general m by n matrix is formed as A = P*L*U where P is a permutation matrix, L is lower triangular with unit diagonal elements (lower trapezoidal if m&gt;n) and U is upper triangular (upper trapezoidal if m&lt;n). The CLU class can be used to solve systems of linear equations and to calculate the inverse of a matrix.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CLU.#ctor(Bluebit.MatrixLibrary.CMatrix)">
      <summary>Initializes a new instance of the CLU class computing the LU factorization of a general complex matrix.</summary>
      <remarks>CLU constructor never fails. The IsSingular property indicates whether the matrix has been found to be singular.</remarks>
      <param name="matrix">A CMatrix object containing the matrix to factor.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CLU.Determinant">
      <summary>Returns the determinant of a square complex matrix using its LU factorization.</summary>
      <returns>A complex that equals to the determinant of the matrix.</returns>
      <remarks>Determinant can be calculated only for a square matrix.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CLU.Dispose">
      <summary>Releases all the resources used by the ShortParentItemName object. Releases all the resources used by the ShortParentItemName object.Releases all the resources used by the ShortParentItemName object.</summary>
      <remarks>Calling Dispose allows the resources used by this object to be reallocated for other purposes.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CLU.GetPivots">
      <summary>Gets an array of integers containing the pivot indices.</summary>
      <remarks> If Pivots() is the array returned from GetPivots method, then Pivots(i) = k denotes that during factorization row k has moved to row i. The array that is returned from GetPivots property can be used as a parameter in ReorderRows method in order to reconstruct the original matrix. This has the same effect as multiplying by the P matrix but it executes faster.</remarks>
      <returns>An array of type integer.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CLU.Inverse">
      <summary>Returns the inverse of a square complex matrix using its LU factorization.</summary>
      <returns>A CMatrix object containing the inverse of the factored matrix.</returns>
      <remarks>Matrix inverse can be calculated only for a square non-singular matrix. The IsSinular property can be used to check if the factored matrix is singular before attempting to execute the Inverse method.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CLU.Solve(Bluebit.MatrixLibrary.CMatrix)">
      <summary>Solves a system of linear equations with multiple right hands using the LU factorization of a general complex matrix.</summary>
      <returns>A CMatrix object that contains the solution of the system of linear equations.</returns>
      <remarks> The Solve method finds the solution to the system of linear equations A*X = B where: A denotes the complex square matrix that has been previously factored (represented now by its LU factorization). B denotes the matrix whose columns contain the right hand terms. X denotes the solution matrix that is to be computed. The system can be solved with multiple right-hand sides stored in the columns of the matrix B. </remarks>
      <param name="rightHands">A CMatrix object containing the right-hand sides for the system of linear equations.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CLU.Cols">
      <summary>Gets the number of columns of the matrix that is represented by the factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CLU.IsSingular">
      <summary>Gets a Boolean value indicating whether the LU factorization represents a singular matrix.</summary>
      <remarks>Use IsSingular property to check for matrix singularity, just before attempting to use the Inverse or Solve methods.</remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CLU.L">
      <summary>Gets the L factor, the lower triangular part of the LU factorization.</summary>
      <remarks> The LU factorization of a general m by n matrix is formed as A = P*L*U where P is a permutation matrix, L is lower triangular with unit diagonal elements (lower trapezoidal if m&gt;n) and U is upper triangular (upper trapezoidal if m&lt;n). </remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CLU.P">
      <summary>Gets the P factor, the permutation matrix of the LU factorization.</summary>
      <remarks>The LU factorization of a general m by n matrix is formed as A = P*L*U where P is a permutation matrix, L is lower triangular with unit diagonal elements (lower trapezoidal if m&gt;n) and U is upper triangular (upper trapezoidal if m&lt;n).</remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CLU.Rows">
      <summary>Gets the number of rows of the matrix that is represented by the factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CLU.U">
      <summary>Gets the U factor, the upper triangular part of the LU factorization.</summary>
      <remarks>The LU factorization of a general m by n matrix is formed as A = P*L*U where P is a permutation matrix, L is lower triangular with unit diagonal elements (lower trapezoidal if m&gt;n) and U is upper triangular (upper trapezoidal if m&lt;n).</remarks>
    </member>
    <member name="T:Bluebit.MatrixLibrary.CMatrix">
      <summary>Represents a matrix having complex floating point numbers as elements.</summary>
      <remarks> CMatrix class is used as to represent a general complex matrix. Its methods can be used to perform matrix operations and data manipulation.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.#ctor">
      <summary>Initializes a new instance of the CMatrix class.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.#ctor">
      <summary>Initializes a new instance of the CMatrix class creating a complex 3x3 matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.#ctor(Bluebit.MatrixLibrary.CMatrix)">
      <summary>Initializes a new instance of the CMatrix class copying the content of an existing matrix.</summary>
      <remarks>This is the copy constructor of the CMatrix class.</remarks>
      <param name="matrix">The CMatrix object whose elements will by copied into the newly created matrix.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.#ctor(Bluebit.MatrixLibrary.Complex[],System.Int32,System.Int32,Bluebit.MatrixLibrary.StorageOrder)">
      <summary>Initializes a new instance of the CMatrix class using the content of a one-dimensional array.</summary>
      <param name="array">The array of complex structures whose content will be used to initialize the elements of the newly created CMatrix object.</param>
      <param name="rows">The number of rows of the new CMatrix object.</param>
      <param name="cols">The number of rows of the new CMatrix object.</param>
      <param name="order">A StorageOrder enumeration specifying the order in which the array values will be used to initialize the matrix elements</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.#ctor(Bluebit.MatrixLibrary.Complex[,])">
      <summary>Initializes a new instance of the CMatrix class using the content of a two-dimensional array.</summary>
      <param name="array">The array of complex structures whose content will be used to initialize the elements of the newly created CMatrix object.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.#ctor(Bluebit.MatrixLibrary.Complex[,],System.Int32,System.Int32)">
      <summary>Initializes a new instance of the CMatrix class using the content of a two-dimensional array, specifying the size of the created matrix.</summary>
      <remarks>If array is bigger than the specified matrix, the extra values are ignored; if it is smaller the rest of the matrix elements are filled with zero values.</remarks>
      <param name="array">The array of complex structures whose content will be used to initialize the elements of the newly created CMatrix object.</param>
      <param name="rows">The number of rows of the new CMatrix object.The number of rows of the new CMatrix object.</param>
      <param name="cols">The number of columns of the new CMatrix object.The number of columns of the new CMatrix object.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of the CMatrix class specifying the number of rows and columns of the newly created matrix.</summary>
      <param name="rows">The number of rows of the new CMatrix object.</param>
      <param name="cols">The number of columns of the new CMatrix object.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.#ctor(System.Int32,System.Int32,Bluebit.MatrixLibrary.Complex)">
      <summary>Initializes a new instance of the CMatrix class specifying the number of rows and columns of the newly created matrix, initializing its diagonal elements to the specified complex value.</summary>
      <param name="rows">The number of rows of the new CMatrix object.</param>
      <param name="cols">The number of columns of the new CMatrix object.</param>
      <param name="diagonal">The complex value that will be used to initialize the diagonal elements of the matrix.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.#ctor(Bluebit.MatrixLibrary.Matrix,Bluebit.MatrixLibrary.Matrix)">
      <summary>Initializes a new instance of the CMatrix class and initializes the real and imaginary parts of its complex elements using the values from two Matrix objects .</summary>
      <param name="real">The Matrix object whose values will initialize the real part of the CMatrix object's complex elements.</param>
      <param name="imaginary">The Matrix object whose values will initialize the imaginary part of the CMatrix object's complex elements.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Add(Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.CMatrix)">
      <summary>Adds two matrices.</summary>
      <returns>A CMatrix object that represents the result of the addition.</returns>
      <remarks>The Add method is an alias for the Addition operator.</remarks>
      <param name="A">A CMatrix instance on the left side of the addition operator.</param>
      <param name="B">A CMatrix instance on the right side of the addition operator.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Adjoint">
      <summary>Returns the conjugate transpose (adjoint) of the current matrix.</summary>
      <returns>A CMatrix instance that represents the conjugate transpose of the current matrix.</returns>
      <remarks>Using Adjoint method is equivalent to sequentially using Conjugate and Transpose methods.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.ApplyFunction">
      <summary>Returns a new CMatrix object, whose elements are the result of applying the specified complex function to the elements of this matrix.</summary>
      <returns>A new CMatrix object, whose elements are the result of applying the specified complex function to the elements of this matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.ApplyFunction(Bluebit.MatrixLibrary.ComplexFunction1Cmp)">
      <summary>Returns a new CMatrix object, whose elements are the result of applying the specified complex function to the elements of this matrix.</summary>
      <remarks> The elements of this matrix are passed one by one as parameters to the function that is represented by the delegate. The returned values from this function are used to initialize the elements of the newly created CMatrix object.</remarks>
      <returns>A new CMatrix object with the same size as this matrix, whose elements are the results of applying the specified function to the elements of this matrix.</returns>
      <param name="function">A delegate to a function that takes one complex parameter and returns a complex.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.ApplyFunction(Bluebit.MatrixLibrary.ComplexFunction2Cmp,Bluebit.MatrixLibrary.Complex)">
      <summary>Returns a new CMatrix object, whose elements are the result of applying the specified complex function to the elements of this matrix.</summary>
      <returns>A new CMatrix object with the same size as this matrix, whose elements are the results of applying the specified function to the elements of this matrix.</returns>
      <remarks> The elements of this matrix are passed one by one as the first parameter to the function that is represented by the delegate; the value2 is passed to the second parameter. The returned values from this function are used to initialize the elements of the newly created CMatrix object.</remarks>
      <param name="function">A delegate to a function that takes as its first parameter a complex, as a second parameter an integer and returns a complex.</param>
      <param name="value2">The complex value that will be passed to the second parameter of the function represented by the delegate.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.ApplyFunction(Bluebit.MatrixLibrary.ComplexFunction1Cmp1Int,System.Int32)">
      <summary>Returns a new CMatrix object, whose elements are the result of applying the specified complex function to the elements of this matrix.</summary>
      <remarks> The elements of this matrix are passed one by one as the first parameter to the function that is represented by the delegate; the value is passed to the second parameter. The returned values from this function are used to initialize the elements of the newly created CMatrix object.</remarks>
      <returns>A new CMatrix object with the same size as this matrix, whose elements are the results of applying the specified function to the elements of this matrix.</returns>
      <param name="function">A delegate to a function that takes as its first parameter a complex, as a second parameter an integer and returns a complex.</param>
      <param name="value">The integer value that will be passed to the second parameter of the function represented by the delegate.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.ApplyFunction(Bluebit.MatrixLibrary.ComplexFunction1Cmp2Int)">
      <summary>Returns a new CMatrix object, whose elements are the result of applying the specified complex function to the elements of this matrix.</summary>
      <returns>A new CMatrix object with the same size as this matrix, whose elements are the results of applying the specified function to the elements of this matrix.</returns>
      <remarks> The elements of this matrix are passed one by one as the first parameter to the function that is represented by the delegate. The row and column number of each element are passed to the second and third parameter of the function respectively. The returned values from this function are used to initialize the elements of the newly created CMatrix object.</remarks>
      <param name="function">A delegate to a function that takes as first parameter a complex, as a second and third parameter an integer and returns a complex.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.ApplyFunction(Bluebit.MatrixLibrary.ComplexFunction2Cmp2Int,Bluebit.MatrixLibrary.Complex)">
      <summary>Returns a new CMatrix object, whose elements are the result of applying the specified complex function to the elements of this matrix.</summary>
      <returns>A new CMatrix object with the same size as this matrix, whose elements are the results of applying the specified function to the elements of this matrix.</returns>
      <remarks> The elements of this matrix are passed one by one as the first parameter to the function that is represented by the delegate; the value2 is passed to the second parameter. The row and column number of each element are passed to the third and fourth parameter of the function respectively. The returned values from this function are used to initialize the elements of the newly created CMatrix object. </remarks>
      <param name="function">A delegate to a function that takes as its first and second parameter a complex, as its third and fourth parameter an integer and returns a complex.</param>
      <param name="value2">The complex value that will be passed to the second parameter of the function represented by the delegate.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Clear">
      <summary>Sets the value of all the CMatrix elements to zero.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Clone">
      <summary>Creates a duplicate of this CMatrix object.</summary>
      <returns>A new CMatrix object that contains the same data as this.</returns>
      <remarks>A deep copy is created. Each CMatrix object references different data.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.ColsDotProduct(System.Int32,System.Int32)">
      <summary>Returns the dot product between two columns of the CMatrix object.</summary>
      <returns>A Complex that equals to the dot product between two columns of the matrix.</returns>
      <remarks>If the same value is used for the col1, col2 parameters then the value returned is the sum of squares of the specified column's elements.</remarks>
      <param name="col1">An integer specifying the first column.</param>
      <param name="col2">An integer specifying the first column.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.ColSum(System.Int32)">
      <summary>Returns the sum of the elements of the specified column.</summary>
      <returns>A Complex equal to the sum of the specified column.</returns>
      <param name="colIndex">An integer specifying the column to be summed.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.ColVector(System.Int32)">
      <summary>Returns a new CVector object using the specified matrix column.</summary>
      <returns>A new CVector object containing the elements of the specified column.</returns>
      <remarks>A deep copy of the data is created. The CVector object references its own data.</remarks>
      <param name="col">An integer specifying the column to return as a CVector object.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Concatenate">
      <summary>Concatenates matrices.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Concatenate(Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.ConcatenateMode)">
      <summary>Concatenates two matrices horizontally or vertically.</summary>
      <returns>A CMatrix object representing the concatenation of the two matrices.</returns>
      <param name="A">A CMatrix instance representing the first matrix.</param>
      <param name="B">A CMatrix instance representing the second matrix.</param>
      <param name="mode">A ConcatenateMode parameter indicating horizontal or vertical concatenation.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Concatenate(Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.CMatrix)">
      <summary>Concatenates two matrices horizontally.</summary>
      <returns>A CMatrix object representing the horizontal concatenation of the two matrices.</returns>
      <param name="A">A CMatrix instance representing the first matrix.</param>
      <param name="B">A CMatrix instance representing the second matrix.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Conjugate">
      <summary>Returns the conjugate of the current matrix.</summary>
      <returns>A CMatrix object that represents the conjugate of the current matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.DeleteColumn(System.Int32)">
      <summary>Deletes a column of the current matrix.</summary>
      <param name="column">Specifies the column for deletion.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.DeleteRow(System.Int32)">
      <summary>Deletes a row of the current matrix.</summary>
      <param name="row">Specifies the row for deletion.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Determinant">
      <summary>Returns the value of the computed matrix determinant.</summary>
      <returns>A Complex value that equals to the matrix determinant.</returns>
      <remarks>Determinant can be calculated only for a square matrix.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Diagonal">
      <summary>Returns a CVector object containing the main diagonal of the current matrix.</summary>
      <returns>A CVector object containing the elements of the main diagonal.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Dispose">
      <summary>Releases all the resources used by the ShortParentItemName object. Releases all the resources used by the ShortParentItemName object.Releases all the resources used by the ShortParentItemName object.</summary>
      <remarks>Calling Dispose allows the resources used by this object to be reallocated for other purposes.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Divide">
      <summary>Performs matrix right division.Performs matrix right division.</summary>
      <returns>A CMatrix object that represents the result of the matrix right division.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Divide(Bluebit.MatrixLibrary.Complex,Bluebit.MatrixLibrary.CMatrix)">
      <summary>Performs scalar-matrix division.</summary>
      <returns>A CMatrix object that represents the result of the scalar-matrix division.</returns>
      <param name="alpha">A Complex on the left side of the division operator.</param>
      <param name="A">A CMatrix instance on the right side of the division operator.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Divide(Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.Complex)">
      <summary>Performs matrix-scalar division.</summary>
      <returns>A CMatrix object that represents the result of the matrix-scalar division.</returns>
      <param name="A">A CMatrix instance on the left side of the division operator.</param>
      <param name="alpha">A Complex on the right side of the division operator.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Divide(Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.CMatrix)">
      <summary>Performs matrix right division</summary>
      <remarks> The Divide method is an alias for the Division operator. X = B / A then X is the solution of the equation X*A = B.</remarks>
      <returns>A CMatrix object that represents the result of the matrix division.</returns>
      <param name="A">A CMatrix instance on the left side of the division operator.</param>
      <param name="B">A CMatrix instance on the right side of the division operator.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Equals(System.Object)">
      <summary>Returns a value indicating whether this CMatrix object is equal to another matrix.</summary>
      <returns>true if obj is an instance of the CMatrix class and represents a matrix that has the same size as this instance and also all the elements of obj are equal to the elements of this instance; false otherwise.</returns>
      <remarks> The elements of this matrix and obj are compared with the == operator end they must be exactly equal in order for this method to return true. If you need to test if elements of two matrices are equal within a specified tolerance use the IsEqual method.</remarks>
      <param name="obj">An object to compare with this instance of the CMatrix class.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.FillRandom">
      <summary>Fills CMatrix object with random values.</summary>
      <remarks>Use FillRandom method in order to quickly fill matrix with random values, while coding, testing and debugging your application.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.FillRandom">
      <summary>Fills CMatrix object with random values ranging from 0 to 10, rounded to zero decimal places.</summary>
      <remarks>Use FillRandom method in order to quickly fill the matrix with random values, while coding, testing and debugging your application.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.FillRandom(System.Double,System.Double)">
      <summary>Fills CMatrix object with random values ranging from lower to upper bound, rounded to 0 decimal places.</summary>
      <remarks>Use FillRandom method in order to quickly fill the matrix with random values, while coding, testing and debugging your application.</remarks>
      <param name="lowerBound">A double specifying the lower limit of the random values that will be used.</param>
      <param name="upperBound">A double specifying the upper limit of the random values that will be used.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.FillRandom(System.Double,System.Double,System.Int32)">
      <summary>Fills CMatrix object with random values ranging from lower bound to upper bound, rounded to the specified number of decimal places.</summary>
      <remarks>Use FillRandom method in order to quickly fill the matrix with random values, while coding, testing and debugging your application.</remarks>
      <param name="lowerBound">A double specifying the lower limit of the random values that will be used.</param>
      <param name="upperBound">A double specifying the upper limit of the random values that will be used.</param>
      <param name="decimals">An integer specifying the number of decimal places to which random values will be rounded to.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.GetHashCode">
      <summary>Returns the hash code of the current ShortParentItemName.</summary>
      <returns>A 32-bit signed integer that represents the hash code.</returns>
      <remarks>This method overrides Object.GetHashCode and generates the same hash code for two objects that are equal according to the Equals method.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implements the ISerializable interface and returns the data needed to serialize the CMatrix class.</summary>
      <remarks>This method implements the ISerializable interface.</remarks>
      <param name="info">A SerializationInfo object.</param>
      <param name="context">A StreamingContext structure.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.HadamardProduct(Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.CMatrix)">
      <summary>Returns the Hadamard product of two complex matrices</summary>
      <returns>A CMatrix object that represents the Hadamard product of the two matrices.</returns>
      <param name="A">A CMatrix object representing the first matrix.</param>
      <param name="B">A CMatrix object representing the second matrix.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.HasINFs">
      <summary>Returns a value indicating whether the current matrix contains any elements that evaluate to negative or positive infinity.</summary>
      <returns>true if any of the matrix elements evaluates to negative or positive infinity; otherwise false.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.HasNaNs">
      <summary>Returns a value indicating whether the current matrix contains any elements that evaluate to NaN values.</summary>
      <returns>true if any of the matrix elements evaluates to a NaN value; otherwise false.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Imag">
      <summary>Returns a Matrix object containing the imaginary parts of the CMatrix elements.</summary>
      <returns>A Matrix object that contains just the imaginary parts of the CMatrix object's elements.</returns>
      <remarks>Use this method together with the Real method in order to split a complex matrix to its real and imaginary parts.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.InsertColumn(System.Int32)">
      <summary>Inserts a column in the current matrix at the specified position.</summary>
      <param name="index">Specifies the position of the inserted column.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.InsertRow(System.Int32)">
      <summary>Inserts a row in the current matrix at the specified position.</summary>
      <param name="index">Specifies the position of the inserted row.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Inverse">
      <summary>Computes the inverse of the complex matrix and returns a reference to it.</summary>
      <returns>A CMatrix object representing the inverse of the current matrix.</returns>
      <remarks> Use Inverse method with error handling to trap errors arising from the matrix being a singular matrix. An alternative method for computing the matrix inverse is to use the CLU object. The CLU object can then be reused for further computations as solving systems of linear equations.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.IsEqual">
      <summary>Returns a value indicating whether this CMatrix is equal to another matrix within a tolerance.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.IsEqual(Bluebit.MatrixLibrary.CMatrix)">
      <summary>Returns a value indicating whether this CMatrix is equal to another matrix within a default tolerance.</summary>
      <returns>true if matrix has the same size as this instance and its elements are equal with the elements of this instance within the default tolerance; otherwise false.</returns>
      <remarks>The default tolerance equals to the maximum absolute value of matrix elements, multiplied by the double epsilon value (2.2204460492503131e-016).</remarks>
      <param name="A">A CMatrix whose elements to compare with the elements of this CMatrix.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.IsEqual(Bluebit.MatrixLibrary.CMatrix,System.Double)">
      <summary>Returns a value indicating whether this CMatrix is equal to another matrix within the specified tolerance.</summary>
      <returns>true if matrix has the same size as this instance and its elements are equal with the elements of this instance within the specified tolerance; otherwise false.</returns>
      <param name="A">A CMatrix whose elements to compare with the elements of this CMatrix.</param>
      <param name="tolerance">Specifies the tolerance.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.IsFinite">
      <summary>Returns a value indicating whether the current matrix contains any elements that evaluate either to NaN value or to a negative or positive infinity.</summary>
      <returns>true if all elements of the current matrix have a value other NaN, negative infinity, positive infinity; otherwise false.</returns>
      <remarks> Most of the internal routines expect that input matrices or vectors do not contain any negative infinity, positive infinity, or NaN values in order to perform flawlessly. If you suspect that the current matrix or vector may contain any NaN or infinity values, use IsFinite method before any further processing.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.IsHermitian">
      <summary>Returns a value indicating whether this matrix is Hermitian.</summary>
      <returns>true if matrix is found to be Hermitian; false otherwise.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.IsHermitian(System.Double)">
      <summary>Returns a value indicating whether this matrix is Hermitian.</summary>
      <returns>true if matrix is found to be Hermitian; false otherwise.</returns>
      <param name="tolerance">To tolerance to be used when comparing matrix elements.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.IsHermitian">
      <summary>Returns a value indicating whether this matrix is Hermitian.</summary>
      <returns>true if matrix is found to be Hermitian; false otherwise.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.IsSymmetric">
      <summary>Returns a value indicating whether this matrix is symmetric.</summary>
      <returns>true if matrix is found to be a symmetric matrix; false otherwise.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.IsSymmetric(System.Double)">
      <summary>Returns a value indicating whether this matrix is symmetric.</summary>
      <returns>true if matrix is found to be a symmetric matrix; false otherwise.</returns>
      <param name="tolerance">To tolerance to be used when comparing matrix elements.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.IsSymmetric">
      <summary>Returns a value indicating whether this matrix is symmetric.</summary>
      <returns>true if matrix is found to be a symmetric matrix; false otherwise.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.LDivide(Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.CMatrix)">
      <summary>Performs matrix left division.</summary>
      <returns>A CMatrix object that represents the result of the matrix left division.</returns>
      <remarks>Matrix.LDivide(A, B) is equivalent to A.Solve(B)</remarks>
      <param name="A">A CMatrix instance on the left side of division operator.</param>
      <param name="B">A CMatrix instance on the right side of division operator.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Multiply">
      <summary>Multiplies matrices.Multiplies two complex matrices.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Multiply(Bluebit.MatrixLibrary.Complex,Bluebit.MatrixLibrary.TransposeMode,Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.TransposeMode,Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.Complex,Bluebit.MatrixLibrary.CMatrix)">
      <summary> Computes a scalar-matrix-matrix product and adds the result to a scalar-matrix product. The operation is defined as: C= alpha * op(A) * op(B) + beta *C</summary>
      <param name="alpha">A complex scalar value.</param>
      <param name="transA">A TransposeMode enumeration specifying whether matrix A is transposed.</param>
      <param name="A">A CMatrix object representing the first matrix.</param>
      <param name="transB">A TransposeMode enumeration specifying whether matrix B is transposed.</param>
      <param name="B">A CMatrix object representing the second matrix.</param>
      <param name="beta">A complex scalar value to multiply matrix C with.</param>
      <param name="C">A CMatrix object which will contain the result.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Multiply(Bluebit.MatrixLibrary.Complex,Bluebit.MatrixLibrary.TransposeMode,Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.CVector,Bluebit.MatrixLibrary.Complex,Bluebit.MatrixLibrary.CVector)">
      <summary> Computes a scalar-matrix-vector product and adds the result to a scalar-vector product. The operation is defined as: y= alpha * op(A) *x + beta *y</summary>
      <param name="alpha">A complex scalar value.</param>
      <param name="transA">A TransposeMode enumeration specifying whether matrix A is transposed.</param>
      <param name="A">A CMatrix object specifying the matrix to multiply.</param>
      <param name="x">A CVector object.</param>
      <param name="beta">A complex scalar value.</param>
      <param name="y">A CVector object which will contain the result on exit.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Multiply(Bluebit.MatrixLibrary.Complex,Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.Complex,Bluebit.MatrixLibrary.CMatrix)">
      <summary>Computes a scalar-matrix-matrix product and adds the result to a scalar-matrix product.</summary>
      <remarks> The operation performed by this method is defined as: D = alpha*A*B + beta*C</remarks>
      <param name="alpha">A Complex representing the scalar value of the scalar-matrix-matrix product.</param>
      <param name="A">A CMatrix object representing the first matrix of the complex-matrix-matrix product.</param>
      <param name="B">A CMatrix object representing the second matrix of the complex-matrix-matrix product.</param>
      <param name="beta">A Complex representing the scalar value of the scalar-matrix product.</param>
      <param name="C">A CMatrix object representing the matrix of the complex-matrix product.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Multiply(Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.Matrix)">
      <summary>Multiplies a complex matrix by a real matrix.</summary>
      <returns>A CMatrix object that represents the result of the matrix multiplication.</returns>
      <remarks>The inner dimensions of the matrices being multiplied must agree; A must have as many columns as B has rows.</remarks>
      <param name="A">A CMatrix instance on the left side of the multiplication operator.</param>
      <param name="B">A Matrix instance on the right side of the multiplication operator.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Multiply(Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.CMatrix)">
      <summary>Multiplies two complex matrices.</summary>
      <returns>A CMatrix object that represents the result of the matrix multiplication.</returns>
      <remarks>The inner dimensions of the matrices being multiplied must agree; A must have as many columns as B has rows.</remarks>
      <param name="A">A CMatrix instance on the left side of the multiplication operator.</param>
      <param name="B">A CMatrix instance on the right side of the multiplication operator.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Multiply(Bluebit.MatrixLibrary.CVector,Bluebit.MatrixLibrary.CMatrix)">
      <summary>Left multiplies a matrix with a vector.</summary>
      <returns>A CVector that represents the result of the vector-matrix multiplication.</returns>
      <param name="x">A CVector that represents the vector to multiply with.</param>
      <param name="A">A CMatrix Class that represents the matrix to be multiplied.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Multiply(Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.CVector)">
      <summary>Multiplies a matrix with a complex vector.</summary>
      <returns>A CMatrix that represents the result of the matrix-vector multiplication.</returns>
      <remarks>The vector parameter is taken as a column vector.</remarks>
      <param name="A">A CMatrix object that represents the matrix to be multiplied.</param>
      <param name="x">A CVector object that represents the vector to multiply with.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Multiply(Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.Complex)">
      <summary>Returns the product of a scalar and a complex matrix.</summary>
      <returns>A CMatrix object that represents the matrix - scalar product.</returns>
      <param name="A">A CMatrix object that represents the matrix to be multiplied.</param>
      <param name="alpha">A Complex structure that represents the scalar..</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Negate(Bluebit.MatrixLibrary.CMatrix)">
      <summary>Returns the negation of the matrix.</summary>
      <returns>A CMatrix object that represents the negate of the matrix.</returns>
      <remarks>This method is an alias for the unary negation operator.</remarks>
      <param name="A">The matrix to negate.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Norm(Bluebit.MatrixLibrary.NormType)">
      <summary>Returns the matrix norm.</summary>
      <returns>A complex value representing the specified norm.</returns>
      <remarks> The following table lists all possible values for the type parameter and the types of norm that can be calculated. Member Description FrobeniusNorm Frobenius norm of the matrix or vector (square root of sum of squares). InfinityNorm Infinity norm of the matrix (maximum row sum). OneNorm 1-norm of the matrix (maximum column sum). MaxAbsValue The element of largest absolute value of the matrix. </remarks>
      <param name="type"> A NormType enumeration value that specifies the type of norm to be returned.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.NormalizeCols(Bluebit.MatrixLibrary.NormalizeMode)">
      <summary> Normalizes the columns of the current matrix according to the specified mode.</summary>
      <remarks> The following table lists the values of NormalizeMode enumeration and their effect on column normalization. Member Description MaximumOne Normalizes columns or rows so that their biggest element is 1. UnitLength Normalizes columns or rows so that they become unit length vectors (their sum of squares is 1). ZScores Normalizes columns or rows to zscores (values having zero mean and unit standard deviation). </remarks>
      <param name="mode">A NormalizeMode enumeration value indicating how the matrix columns will be normalized.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.NormalizeRows(Bluebit.MatrixLibrary.NormalizeMode)">
      <summary> Normalizes the rows of the current matrix according to the specified mode.</summary>
      <remarks> The following table lists the values of NormalizeMode enumeration and their effect on row normalization. Member Description MaximumOne Normalizes columns or rows so that their biggest element is 1. UnitLength Normalizes columns or rows so that they become unit length vectors (their sum of squares is 1). ZScores Normalizes columns or rows to zscores (values having zero mean and unit standard deviation). </remarks>
      <param name="mode">A NormalizeMode enumeration value indicating how the matrix columns will be normalized.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Plus(Bluebit.MatrixLibrary.CMatrix)">
      <summary>Returns a copy of the matrix.</summary>
      <returns>A CMatrix object which is a copy of matrix.</returns>
      <param name="A">A CMatrix object.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.PseudoInverse">
      <summary>Returns the Moore-Penrose inverse (pseudoinverse) of the matrix.</summary>
      <returns>A CMatrix object representing the Moore-Penrose inverse (pseudoinverse) of this matrix.</returns>
      <remarks> If A+ is the Moore-Penrose inverse (pseudoinverse) of matrix A then it satisfies the following four conditions: A*A+*A = A A+*A*A+ =A+ (A*A+)T = A*A+ (A+*A)T =A+*A </remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.PseudoInverse">
      <summary>Returns the Moore-Penrose inverse (pseudoinverse) of the matrix.</summary>
      <returns>A CMatrix object representing the Moore-Penrose inverse (pseudoinverse) of this matrix.</returns>
      <remarks> If A+ is the Moore-Penrose inverse (pseudoinverse) of matrix A then it satisfies the following four conditions: A*A+*A = A A+*A*A+ = A+ (A*A+)T = A*A+ (A+*A)T = A+*A </remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.PseudoInverse(System.Double)">
      <summary>Returns the Moore-Penrose inverse (pseudoinverse) of the matrix.</summary>
      <remarks> Singular value decomposition is used for the calculation of the pseudoinverse. Roundoff errors can lead to a singular value not being exactly zero even if it should be. tolerance parameter places a threshold when comparing singular values with zero and improves the numerical stability of the method with singular or near-singular matrices. If A+ is the Moore-Penrose inverse (pseudoinverse) of matrix A then it satisfies the following four conditions: A*A+*A = A A+*A*A+ =A+ (A*A+)T = A*A+ (A+*A)T =A+*A </remarks>
      <returns>A CMatrix object representing the Moore-Penrose inverse (pseudoinverse) of this matrix.</returns>
      <param name="tolerance">A double specifying the value under which the singular values of the matrix are considered to be zero.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Rank">
      <summary>Returns the matrix rank.</summary>
      <remarks>The matrix rank is defined as the number of its nonzero singular values.</remarks>
      <returns>An integer value representing the matrix rank.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Real">
      <summary>Returns a Matrix object containing the real parts of the CMatrix elements.</summary>
      <returns>A Matrix object that contains just the real parts of the CMatrix object's elements.</returns>
      <remarks>Use this method together with the Imag method in order to split a complex matrix to its real and imaginary parts.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.ReorderCols(System.Int32[])">
      <summary>Reorders matrix columns according to the specified order.</summary>
      <remarks> pivots[i] = k denotes that column i should be moved to position k.</remarks>
      <param name="pivots">An array of integers containing the column dispositions.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.ReorderRows(System.Int32[])">
      <summary>Reorders matrix rows according to the specified order.</summary>
      <remarks> pivots[i] = k denotes that row i should be moved to position k.</remarks>
      <param name="pivots">An array of integers containing the row dispositions.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Resize(System.Int32,System.Int32)">
      <summary>Resizes matrix preserving its content.</summary>
      <remarks>If new dimensions are smaller the matrix is truncated; if bigger then zeros are added.</remarks>
      <param name="rows">An integer specifying the new number of rows.</param>
      <param name="cols">An integer specifying the new number of columns.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.RowsDotProduct(System.Int32,System.Int32)">
      <summary>Returns the dot product between two rows of the CMatrix object.</summary>
      <returns>A complex that equals to the dot product between two rows of the matrix.</returns>
      <remarks>If the same value is used for the row1, row2 parameters then the value returned is the sum of squares of the specified rows's elements.</remarks>
      <param name="row1">An integer specifying the first row.</param>
      <param name="row2">An integer specifying the second row.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.RowSum(System.Int32)">
      <summary>Returns the sum of the elements of the specified row.</summary>
      <returns>A complex equal to the sum of the specified row.</returns>
      <param name="rowIndex">An integer specifying the row to be summed.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.RowVector(System.Int32)">
      <summary>Returns a new CVector object using the specified matrix row.</summary>
      <returns>A new CVector object containing the elements of the specified row.</returns>
      <remarks>A deep copy of the data is created. The CVector object references its own data.</remarks>
      <param name="row">Specifies the row to return as a CVector object.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.SetColumn">
      <summary>Sets the elements of a matrix column to specified value(s).</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.SetColumn(System.Int32,Bluebit.MatrixLibrary.Complex[])">
      <summary>Sets all elements of a matrix column using the content on an array.</summary>
      <param name="col">An integer specifying the column.</param>
      <param name="values">An array of complex structures whose content will be used to set the elements of the specified column.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.SetColumn(System.Int32,Bluebit.MatrixLibrary.Complex,Bluebit.MatrixLibrary.Complex)">
      <summary>Sets all elements of a matrix column to incremental values.</summary>
      <param name="col">An integer specifying the column.</param>
      <param name="start">A complex specifying a value for the first element of the column.</param>
      <param name="step">A complex to be added to each successive element of the column.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.SetColumn(System.Int32,Bluebit.MatrixLibrary.Complex)">
      <summary>Sets all elements of a matrix column to the specified value.</summary>
      <param name="col">An integer specifying the column.</param>
      <param name="value">A complex that will be used to set all elements of the specified column.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.SetColumn(System.Int32,Bluebit.MatrixLibrary.CVector)">
      <summary>Sets all elements of a matrix column using the contents on a vector.</summary>
      <param name="col">An integer specifying the column.</param>
      <param name="vector">A CVector whose content will be used to set the elements of the specified column.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.SetRow">
      <summary>Sets the elements of a matrix row to specified value(s).</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.SetRow(System.Int32,Bluebit.MatrixLibrary.CVector)">
      <summary>Sets all elements of a matrix row using the contents on a vector.</summary>
      <param name="row">An integer specifying the row.</param>
      <param name="vector">A CVector whose content will be used to set the elements of the specified row.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.SetRow(System.Int32,Bluebit.MatrixLibrary.Complex[])">
      <summary>Sets all elements of a matrix row using the content on an array.</summary>
      <param name="row">An integer specifying the row.</param>
      <param name="values">An array of complex structures whose content will be used to set the elements of the specified row.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.SetRow(System.Int32,Bluebit.MatrixLibrary.Complex,Bluebit.MatrixLibrary.Complex)">
      <summary>Sets all elements of a matrix row to incremental values.</summary>
      <param name="row">An integer specifying the row.</param>
      <param name="start">A complex specifying a value for the first element of the row.</param>
      <param name="step">A complex to be added to each successive element of the row.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.SetRow(System.Int32,Bluebit.MatrixLibrary.Complex)">
      <summary>Sets all elements of a matrix row to the specified value.</summary>
      <param name="row">An integer specifying the row.</param>
      <param name="value">A complex that will be used to set all elements of the specified row.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Solve(Bluebit.MatrixLibrary.CMatrix)">
      <summary>Solves a system of linear equations.</summary>
      <returns>A CMatrix object that contains the solution of the system of linear equations.</returns>
      <remarks> The Solve method finds the solution to the system of linear equations A*X = B where: A denotes the current matrix. B denotes the matrix whose columns contain the right hand terms (rightHands parameter). X denotes the solution matrix that is to be computed and will be returned by the method. The system can be solved with multiple right-hand sides stored in the columns of the matrix B. rightHands matrix must have the same number of rows as current matrix. If current matrix is a mxn matrix then the following operations are used: If m=n then LU factorization is used to solve the system. If matrix is found to be singular then LQ factorization is used to solve it as an underdetermined system. If m&lt;n then LQ factorization is used to compute the minimum norm solution for the underdetermined system. If m&gt;n then QR factorization is used to compute a least squares solution for the overdetermined system. </remarks>
      <param name="rightHands">A CMatrix object containing the right-hand sides for the system of linear equations.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.SubMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Returns a subset of the current matrix.</summary>
      <returns>A CMatrix instance that contains the subset of current matrix.</returns>
      <remarks>If endRow is greater than startRow then the returned matrix is flipped horizontally. The same way if endCol is greater than startCol, then it is flipped vertically.</remarks>
      <param name="startRow">An integer specifying the first row to include.</param>
      <param name="endRow">An integer specifying the last row to include.</param>
      <param name="startCol">An integer specifying the first column to include.</param>
      <param name="endCol">An integer specifying the last column to include.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Subtract(Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.CMatrix)">
      <summary>Subtracts a matrix from another matrix.</summary>
      <returns>A CMatrix object that represents the result of the subtraction.</returns>
      <remarks>The Subtract method is an alias for the subtraction operator.</remarks>
      <param name="A">A CMatrix instance on the left side of the subtraction operator.</param>
      <param name="B">A CMatrix instance on the right side of the subtraction operator.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.SwapCols(System.Int32,System.Int32)">
      <summary>Swaps two matrix columns.</summary>
      <param name="col1">An integer specifying the first column to swap.</param>
      <param name="col2">An integer specifying the second column to swap.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.SwapRows(System.Int32,System.Int32)">
      <summary>Swaps two matrix rows.</summary>
      <param name="row1">An integer specifying the first row to swap.</param>
      <param name="row2">An integer specifying the second row to swap.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Times">
      <summary>Multiplies the current matrix and returns the result.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Times(Bluebit.MatrixLibrary.CMatrix)">
      <summary> Multiplies the current matrix by another matrix and returns the result.</summary>
      <returns>A CMatrix object that represents the result of the multiplication.</returns>
      <remarks>The inner dimensions of the matrices being multiplied must agree; matrix must have as rows as current matrix has columns.</remarks>
      <param name="A">A CMatrix object by which to multiply the current matrix.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Times(Bluebit.MatrixLibrary.CVector)">
      <summary>Multiplies the current matrix by a vector and returns the result.</summary>
      <returns>A CMatrix that represents the result of the matrix-vector multiplication.</returns>
      <remarks>The vector parameter is taken as a column vector.</remarks>
      <param name="x">A CVector object that represents the vector to multiply the current matrix with.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Times(Bluebit.MatrixLibrary.Complex)">
      <summary>Multiplies the current matrix by a scalar value and returns the result.</summary>
      <returns>A CMatrix object that represents the result of the matrix-scalar multiplication.</returns>
      <param name="alpha">A complex by which to multiply the current matrix.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.ToArray">
      <summary>Converts current matrix to an array.</summary>
      <returns>An two-dimensional array of type complex containing the elements of the current matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.ToString">
      <summary>Converts this instance of CMatrix to a formatted string using the default values for format string, separator, left and right borders, and end of line characters.Converts this instance of CMatrix to a formatted string.</summary>
      <returns>A formatted string containing all matrix elements.</returns>
      <remarks>The "F3" format string is used to format each matrix element. A space character is used as a separator of matrix elements. The right and left borders are set to "| " and " |" strings respectively. The new line character "\n" is added after each matrix row.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.ToString">
      <summary>Converts this instance of CMatrix to a formatted string using the default values for format string, separator, left and right borders, and end of line characters.</summary>
      <returns>A formatted string containing all matrix elements.</returns>
      <remarks>The "F3" format string is used to format each matrix element. A space character is used as a separator of matrix elements. The right and left borders are set to "| " and " |" strings respectively. The new line character "\n" is added after each matrix row.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.ToString(System.String)">
      <summary>Converts this instance of CMatrix to a formatted string specifying a format string, and using the the default values for separator, left and right borders, and end of line characters.</summary>
      <remarks>A space character is used as a separator of matrix elements. The left and right borders are set to "| " and " |" strings respectively. The new line character "\n" is added after each matrix row.</remarks>
      <returns>A formatted string containing all matrix elements.</returns>
      <param name="format">A format string that will be used to convert all matrix elements.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.ToString(System.String,System.String)">
      <summary>Converts this instance of CMatrix to a formatted string specifying a format string, and a separator and using the default values for left and right borders and end of line characters.</summary>
      <returns>A formatted string containing all matrix elements.</returns>
      <remarks>The left and right borders are set to "| " and " |" strings respectively. The new line character "\n" is added after each matrix row.</remarks>
      <param name="format">A format string that will be used to convert all matrix elements.</param>
      <param name="separator">A string that will be used to separate matrix elements.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.ToString(System.String,System.String,System.String,System.String,System.String)">
      <summary>Converts this instance of CMatrix to a formatted string specifying a format string, a separator, left and right borders and end of line characters.</summary>
      <returns>A formatted string containing all matrix elements.</returns>
      <param name="format">A format string that will be used to convert all matrix elements.</param>
      <param name="separator">A string that will be used to separate matrix elements.</param>
      <param name="leftBorder">A string that will be added at the beginning of each matrix row.</param>
      <param name="rightBorder">A string that will be added at the end of each matrix row.</param>
      <param name="endMatrix">A string that will be added at the end of the matrix.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.ToString(System.IFormatProvider,System.String)">
      <summary>Converts this instance of the ShortParentItemName object to a formatted string specifying culture-specific format information and a format string.</summary>
      <remarks>A space character is used as a separator of matrix elements. The left and right borders are set to "| " and " |" strings respectively. The new line character "\n" is added after each matrix row.</remarks>
      <returns>A formatted string containing all matrix elements.</returns>
      <param name="provider"> An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="format">A format string that will be used to convert all matrix elements.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.ToString(System.IFormatProvider,System.String,System.String,System.String,System.String,System.String)">
      <summary>Converts this instance of CMatrix to a formatted string specifying culture-specific format information, a format string, a separator, left and right borders and end of line characters.</summary>
      <returns>A formatted string containing all matrix elements.</returns>
      <param name="provider"> An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="format">A format string that will be used to convert all matrix elements.</param>
      <param name="separator">A string that will be used to separate matrix elements.</param>
      <param name="leftBorder">A string that will be added at the beginning of each matrix row.</param>
      <param name="rightBorder">A string that will be added at the end of each matrix row.</param>
      <param name="endMatrix">A string that will be added at the end of the matrix.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Trace">
      <summary>Returns the sum of the elements of the main diagonal.</summary>
      <returns>A complex value equal to matrix trace.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Transpose">
      <summary>Returns the transpose of the matrix.</summary>
      <returns>A CMatrix instance that represents the transpose of the current matrix.</returns>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CMatrix.op_Addition">
      <summary>Adds two matrices.</summary>
      <returns>A CMatrix object that represents the result of the addition.</returns>
      <remarks>The Add method performs the same function as the addition operator and can be used in languages that do not support overloaded operators as Visual Basic.</remarks>
      <param name="A">A CMatrix instance on the left side of the addition operator.</param>
      <param name="B">A CMatrix instance on the right side of the addition operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CMatrix.op_Division">
      <summary>Performs matrix right division.</summary>
      <returns>A CMatrix object that represents the result of the matrix right division.</returns>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CMatrix.op_Division">
      <summary>Performs matrix right division</summary>
      <remarks> X = B / A then X is the solution of the equation X*A = B.</remarks>
      <returns>A CMatrix object that represents the result of the matrix division.</returns>
      <param name="A">A CMatrix instance on the left side of the division operator.</param>
      <param name="B">A CMatrix instance on the right side of the division operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CMatrix.op_Division">
      <summary>Performs matrix-scalar division.</summary>
      <returns>A CMatrix object that represents the result of the matrix-scalar division.</returns>
      <param name="A">A CMatrix instance on the left side of the division operator.</param>
      <param name="alpha">A complex on the right side of the division operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CMatrix.op_Division">
      <summary>Performs scalar-matrix division.</summary>
      <returns>A CMatrix object that represents the result of the scalar-matrix division.</returns>
      <param name="alpha">A complex on the left side of the division operator.</param>
      <param name="A">A CMatrix instance on the right side of the division operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CMatrix.op_Equality">
      <summary>Tests whether two CMatrix objects represent equal matrices.</summary>
      <returns>true if matrices are equal; otherwise false.</returns>
      <remarks> The equality operator returns false if matrices are not of the same size. The elements of the compared matrices must be exactly equal in order to the equality operator return true. If you need to test if elements of two matrices are equal within a specified tolerance use the IsEqual method.</remarks>
      <param name="A">A CMatrix instance on the left side of the equality operator.</param>
      <param name="B">A CMatrix instance on the right side of the equality operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CMatrix.op_Implicit">
      <summary>Defines conversions between CMatrix objects and arrays of complex structures.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CMatrix.op_Inequality">
      <summary>Tests whether two CMatrix objects represent non equal matrices.</summary>
      <returns>true if matrices are not equal; otherwise false.</returns>
      <param name="A">A CMatrix instance on the left side of the equality operator.</param>
      <param name="B">A CMatrix instance on the right side of the equality operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CMatrix.op_Multiply">
      <summary>Multiplies matrices.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CMatrix.op_Multiply">
      <summary>Multiplies two matrices.</summary>
      <returns>A CMatrix object that represents the product.</returns>
      <remarks> The inner dimensions of the matrices being multiplied must agree. That is, the number of columns in the first matrix must be equal to the number of rows in the second matrix. Matrix multiplication is not commutative, A" B is not the same as B" A.</remarks>
      <param name="A">A CMatrix instance on the left side of the multiplication operator.</param>
      <param name="B">A CMatrix instance on the right side of the multiplication operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CMatrix.op_Multiply">
      <summary>Multiplies a matrix by a scalar.</summary>
      <returns>A CMatrix object that represents the product.</returns>
      <remarks>The matrix-scalar multiplication is a commutative operation.</remarks>
      <param name="A">A CMatrix instance on the left side of the multiplication operator.</param>
      <param name="alpha">A Complex on the right side of the multiplication operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CMatrix.op_Multiply">
      <summary>Multiplies a matrix by a vector.</summary>
      <returns>A CMatrix object that represents the product.</returns>
      <remarks> The CVector is considered to be a column vector; a one-column matrix. The vector size must be equal to the number of columns of the matrix.</remarks>
      <param name="A">A CMatrix instance on the left side of the multiplication operator.</param>
      <param name="x">A CVector instance on the right side of the multiplication operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CMatrix.op_Multiply">
      <summary>Multiplies two matrices.</summary>
      <returns>A CMatrix object that represents the result of the matrix multiplication.</returns>
      <remarks>The inner dimensions of the matrices being multiplied must agree; A must have as many columns as B has rows.</remarks>
      <param name="A">A CMatrix instance on the left side of the multiplication operator.</param>
      <param name="B">A Matrix instance on the right side of the multiplication operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CMatrix.op_Multiply">
      <summary>Multiplies a scalar by a matrix.</summary>
      <returns>A CMatrix object that represents the product.</returns>
      <remarks>The matrix-scalar multiplication is a commutative operation.</remarks>
      <param name="alpha">A complex on the left side of the multiplication operator.</param>
      <param name="A">A CMatrix instance on the right side of the multiplication operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CMatrix.op_Multiply">
      <summary>Left multiplies a matrix with a vector.</summary>
      <param name="x">A CVector instance on the left side of the multiplication operator.</param>
      <param name="A">A CMatrix instance on the right side of the multiplication operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CMatrix.op_Subtraction">
      <summary>Subtracts two matrices.</summary>
      <returns>A CMatrix object that represents the result of the subtraction.</returns>
      <remarks>The Subtract method performs the same function as the addition operator and can be used in languages that do not support overloaded operators as Visual Basic.</remarks>
      <param name="A">A CMatrix instance on the left side of the addition operator.</param>
      <param name="B">A CMatrix instance on the right side of the addition operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CMatrix.op_UnaryNegation">
      <summary>Negates the matrix.</summary>
      <returns>A CMatrix object representing the negation of the matrix.</returns>
      <remarks>The Negate method performs the same function as the unary negation operator and can be used in languages that do not support overloaded operators as Visual Basic.</remarks>
      <param name="A">A CMatrix object representing the matrix to negate.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CMatrix.op_UnaryPlus">
      <summary>Returns a copy of the matrix.</summary>
      <returns>A copy of the CMatrix on right of the unary plus operator.</returns>
      <param name="B">A CMatrix instance on the right side of the unary plus operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CMatrix.Cols">
      <summary>Gets or sets the number of columns of the current matrix.</summary>
      <remarks>Setting the Cols property to a new value causes the CMatrix to resize. This has the same effect as calling the Resize method.</remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CMatrix.Data">
      <summary>This property is used while serializing and deserializing the CMatrix object and is not intended to be used directly from your code.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CMatrix.DataPtr">
      <summary>Gets the address of the unmanaged (native) memory block containing the matrix's elements.</summary>
      <remarks>Matrix elements are stored in column major order. For a 3x2 matrix its items will be stored in the following order: [0,0], [1,0], [2,0], [0,1], [1,1], [2,1] .</remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CMatrix.IsSquare">
      <summary>Indicates whether this instance represents a square matrix.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CMatrix.Item(System.Int32,System.Int32)">
      <summary>Gets or sets a single matrix element.</summary>
      <remarks>This is the default property of the CMatrix object when using it in Visual Basic. It is the indexer of the CMatrix object when used in C#.</remarks>
      <param name="row">An integer specifying the row of the matrix element to get or to set.</param>
      <param name="col">An integer specifying the column of the matrix element to get or to set.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CMatrix.Rows">
      <summary>Gets or sets the number of rows of the current matrix.</summary>
      <remarks>Setting the Rows property to a new value causes the CMatrix to resize. This has the same effect as calling the Resize method.</remarks>
    </member>
    <member name="T:Bluebit.MatrixLibrary.CQR">
      <summary>Represents a QR factorization of a general complex matrix.</summary>
      <remarks> The QR factorization of a general m by n matrix A is formed as A*P = Q*R where P is a permutation matrix, Q is a mxn (mxm if m&lt;n) orthogonal matrix and R is a nxn (mxn if m&lt;n) upper triangular (upper trapezoidal if m&lt;n) matrix. The CQR class can be used for solving least-square problems.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CQR.#ctor">
      <summary>Initializes a new instance of the CQR class computing the QR factorization of a general complex matrix.</summary>
      <remarks>The CQR class constructor never fails.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CQR.#ctor(Bluebit.MatrixLibrary.CMatrix)">
      <summary>Initializes a new instance of the CQR class computing the QR factorization of a general complex matrix using column pivoting.</summary>
      <remarks>The CQR class constructor never fails.</remarks>
      <param name="matrix">A CMatrix object containing the matrix to factor.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CQR.#ctor(Bluebit.MatrixLibrary.CMatrix,System.Boolean)">
      <summary>Initializes a new instance of the CQR class computing the QR factorization of a general complex matrix, specifying whether column pivoting will be used.</summary>
      <remarks>The CQR class constructor never fails.</remarks>
      <param name="matrix">A CMatrix object containing the matrix to factor.</param>
      <param name="pivoting">A boolean value specifying whether column pivoting will be used.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CQR.Dispose">
      <summary>Releases all the resources used by the ShortParentItemName object. Releases all the resources used by the ShortParentItemName object.Releases all the resources used by the ShortParentItemName object.</summary>
      <remarks>Calling Dispose allows the resources used by this object to be reallocated for other purposes.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CQR.GetPivots">
      <summary>Gets an array of integers containing the pivot indices.</summary>
      <remarks> Pivots(i) = k denotes that during factorization column k has moved to column i. The array that is returned from the Pivots property can be used as a parameter in ReorderCols method in order to reconstruct the original matrix. This has the same effect as multiplying by the P matrix but executes faster.</remarks>
      <returns>An array of type integer.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CQR.Solve(Bluebit.MatrixLibrary.CMatrix)">
      <summary>Solves a set of least-squares problems (with multiple right hands) using the QR factorization of a general complex matrix.</summary>
      <returns>A CMatrix object that contains the solution of the least-squares problems.</returns>
      <remarks> The Solve method finds a least-squares solution to the system of linear equations A*X = B where: A denotes the complex matrix that has been previously factored (represented now by its QR factorization). B is the matrix whose columns contain the right hand terms. X is the solution matrix that is to be computed and minimizes ||A*X -B||2 The system can be solved with multiple right-hand sides stored in the columns of the matrix B. The columns of X are the minimum norm solution vectors.</remarks>
      <param name="rightHands">A CMatrix object containing the right-hand sides for the set of least-squares problems.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CQR.Cols">
      <summary>Gets the number of columns of the matrix that is represented by the factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CQR.P">
      <summary>Gets the P factor, the permutation matrix of the QR factorization.</summary>
      <remarks>The QR factorization of a general m by n matrix A is formed as A*P = Q*R where P is a permutation matrix, Q is a mxn (mxm if m&lt;n) orthogonal matrix and R is a nxn (mxn if m&lt;n) upper triangular (upper trapezoidal if m&lt;n) matrix.</remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CQR.Q">
      <summary>Gets the Q factor, the orthogonal part of the QR factorization.</summary>
      <remarks>The QR factorization of a general m by n matrix A is formed as A*P = Q*R where P is a permutation matrix, Q is a mxn (mxm if m&lt;n) orthogonal matrix and R is a nxn (mxn if m&lt;n) upper triangular (upper trapezoidal if m&lt;n) matrix.</remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CQR.R">
      <summary>Gets the R factor, the upper triangular part of the QR factorization.</summary>
      <remarks>The QR factorization of a general m by n matrix A is formed as A*P = Q*R where P is a permutation matrix, Q is a mxn (mxm if m&lt;n) orthogonal matrix and R is a nxn (mxn if m&lt;n) upper triangular (upper trapezoidal if m&lt;n) matrix.</remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CQR.Rows">
      <summary>Gets the number of rows of the matrix that is represented by the factorization.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.CSparseMatrix">
      <summary>Represents a general sparse matrix with complex elements.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.#ctor">
      <summary>Creates a new instance of the CSparseMatrix class.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.#ctor">
      <summary>Creates a new instance of an empty CSparseMatrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.#ctor(Bluebit.MatrixLibrary.CMatrix)">
      <summary>Creates a new instance of a CSparseMatrix using the contents of a dense CMatrix object.</summary>
      <param name="matrix">The CMatrix object that contains the dense matrix data.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.#ctor(Bluebit.MatrixLibrary.Complex[],System.Int32[],System.Int32[])">
      <summary>Creates a new instance of a CSparseMatrixf rom data in compressed sparse row (CSR) format.</summary>
      <param name="A">Array of type complex containing the values of the explicitly defined non-zero elements of the matrix.</param>
      <param name="IA">Array of type integer containing the indices of the first non zero element in each row of the matrix.</param>
      <param name="JA">Array of type integer containing the column indices of each matrix element stored in array A.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.#ctor(Bluebit.MatrixLibrary.CSparseMatrix)">
      <summary>Creates a new instance of a CSparseMatrix copying the contents of another CSparseMatrix.</summary>
      <param name="matrix">The CSparseMatrix whose content is to be copied into the newly created matrix.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.#ctor(System.Int32,System.Boolean)">
      <summary>Creates a new instance of CSparseMatrix representing a square matrix of the specified size, and specifies whether the matrix is hermitian.</summary>
      <param name="size">The number of rows and columns of the matrix.</param>
      <param name="hermitian">true if the matrix is hermitian; false otherwise.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.#ctor(System.Int32,System.Boolean,System.Int32,System.Single)">
      <summary>Creates a new instance of CSparseMatrix representing a square matrix of the specified size, specifies whether the matrix is hermitian and sets initial values for the capacity and the grow factor.</summary>
      <param name="size">The number of rows and columns of the matrix.</param>
      <param name="hermitian">true if the matrix is hermitian; false otherwise.</param>
      <param name="capacity">Specifies the maximum number of elements that the internal storage can hold without resizing.</param>
      <param name="growFactor">The factor by which the capacity is multiplied when required.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.#ctor(System.Int32,System.Int32)">
      <summary>Creates a new instance of a CSparseMatrix with the specified number of rows and columns.</summary>
      <param name="rows">The number of rows of the sparse matrix.</param>
      <param name="cols">The number of columns of the sparse matrix.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>Creates a new instance of a CSparseMatrix with the specified number of rows and columns and initial capacity.</summary>
      <param name="rows">The number of rows of the sparse matrix.</param>
      <param name="cols">The number of columns of the sparse matrix.</param>
      <param name="capacity">Specifies the maximum number of elements that the internal storage can hold without resizing.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.#ctor(System.Int32,System.Int32,System.Int32,System.Single)">
      <summary>Creates a new instance of a CSparseMatrix with the specified number or rows and columns, initial capacity and grow factor.</summary>
      <param name="rows">The number of rows of the sparse matrix.</param>
      <param name="cols">The number of columns of the sparse matrix.</param>
      <param name="capacity">Specifies the total number of elements that the internal storage can hold without resizing.</param>
      <param name="growFactor">The factor by which the capacity is multiplied when required.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.Add(Bluebit.MatrixLibrary.CSparseMatrix,Bluebit.MatrixLibrary.Complex,Bluebit.MatrixLibrary.TransposeMode,Bluebit.MatrixLibrary.CSparseMatrix)">
      <summary> Adds two sparse matrices. The operation is defined as: C=A+beta*op(B)</summary>
      <param name="A">The first sparse matrix to add.</param>
      <param name="beta">A double scalar that multiplies the second matrix.</param>
      <param name="transB">A TransposeMode enumeration specifying whether the second matrix is transposed.</param>
      <param name="B">The second matrix to add.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.Clone">
      <summary>Creates a deep copy of the current sparse matrix.</summary>
      <returns>A new CSparseMatrix object that contains the same data as this.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.Dispose">
      <summary>Releases all the resources used by the ShortParentItemName object.</summary>
      <remarks>Calling Dispose allows the resources used by this object to be reallocated for other purposes.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.Equals">
      <summary>Returns a value indicating if this sparse matrix is equal to another sparse matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.Equals(Bluebit.MatrixLibrary.CSparseMatrix)">
      <summary>Returns a value indicating if this sparse matrix is equal to another sparse matrix.</summary>
      <returns>true if both matrices contain the same data, false otherwise.</returns>
      <param name="matrix">A sparse matrix matrix to compare with the current instance.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.Equals(Bluebit.MatrixLibrary.CSparseMatrix,System.Double)">
      <summary>Returns a value indicating if this sparse matrix is equal to another sparse matrix within the specified tolerance.</summary>
      <returns>true if both matrices contain the same data, false otherwise.</returns>
      <param name="matrix">A sparse matrix matrix to compare with the current instance.</param>
      <param name="tolerance">A double specifying the allowable tolerance of the comparison.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.FillRandom">
      <summary>Fills a sparse matrix with random values.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.FillRandom">
      <summary>Fills the CSparseMatrix object with random values ranging from 1 to 10 using a density of 1.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.FillRandom(System.Double)">
      <summary>Fills the CSparseMatrix object with random values ranging from 1 to 10 using the specified density.</summary>
      <param name="density">Specifies the fraction of matrix elements which will be set to non zero values.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.FillRandom(System.Double,System.Double,System.Double)">
      <summary>Fills the CSparseMatrix object with random values ranging from lower bound to upper bound using the specified density.</summary>
      <param name="density">Specifies the fraction of matrix elements which will be set to non zero values.</param>
      <param name="lowerBound">A double specifying the lower limit of the random values that will be used.</param>
      <param name="upperBound">A double specifying the upper limit of the random values that will be used.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.FillRandom(System.Double,System.Double,System.Double,System.Int32)">
      <summary>Fills the CSparseMatrix object with random values ranging from lower bound to upper bound, rounded to the specified number of decimal places, using the specified density.</summary>
      <param name="density">Specifies the fraction of matrix elements which will be set to non zero values.</param>
      <param name="lowerBound">A double specifying the lower limit of the random values that will be used.</param>
      <param name="upperBound">A double specifying the upper limit of the random values that will be used.</param>
      <param name="decimals">An integer specifying the number of decimal places to which random values will be rounded to.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.GetHashCode">
      <summary>Returns the hash code of the current ShortParentItemName.</summary>
      <returns>A 32-bit signed integer that represents the hash code.</returns>
      <remarks>This method overrides Object.GetHashCode and generates the same hash code for two objects that are equal according to the Equals method.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implements the ISerializable interface and returns the data needed to serialize the CSparseMatrix class.</summary>
      <param name="info">A SerializationInfo object.</param>
      <param name="context">A StreamingContext structure.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.Multiply">
      <summary>Multiplies sparse matrices.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.Multiply(Bluebit.MatrixLibrary.CSparseMatrix,Bluebit.MatrixLibrary.Complex)">
      <summary>Returns a scalar-matrix product.</summary>
      <param name="A">A CSparseMatrix Class object representing the sparse matrix to multiply.</param>
      <param name="scalar">A complex scalar value.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.Multiply(Bluebit.MatrixLibrary.CSparseMatrix,Bluebit.MatrixLibrary.CVector)">
      <summary>Multiplies a sparse matrix by a vector.</summary>
      <returns>A CVector object containing the result.</returns>
      <param name="A">A CSparseMatrix Class object representing the sparse matrix to multiply.</param>
      <param name="x">A CVector object representing the vector to multiply with.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.Multiply(Bluebit.MatrixLibrary.CVector,Bluebit.MatrixLibrary.CSparseMatrix)">
      <summary>Left multiplies a sparse matrix by a vector.</summary>
      <returns>A CVector object containing the result.</returns>
      <param name="x">A CVector object representing the vector to multiply with.</param>
      <param name="A">A CSparseMatrix Class object representing the sparse matrix to multiply.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.Multiply(Bluebit.MatrixLibrary.CSparseMatrix,Bluebit.MatrixLibrary.CMatrix)">
      <summary>Multiplies a sparse matrix by a dense matrix.</summary>
      <returns>A CMatrix object that contains the result.</returns>
      <param name="A">A CSparseMatrix Class object representing the sparse matrix.A CSparseMatrix Class object representing the sparse matrix.</param>
      <param name="B">A CMatrix object that representing the dense matrix.A CMatrix object that representing the dense matrix.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.Multiply(Bluebit.MatrixLibrary.CSparseMatrix,Bluebit.MatrixLibrary.CSparseMatrix)">
      <summary>Multiplies two sparse matrices and return the result into another sparse matrix.</summary>
      <returns>A CSparseMatrix object containing the result.</returns>
      <param name="A">A CSparseMatrix object representing the first sparse matrix.</param>
      <param name="B">A CSparseMatrix object representing the second sparse matrix.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.Multiply(Bluebit.MatrixLibrary.TransposeMode,Bluebit.MatrixLibrary.CSparseMatrix,Bluebit.MatrixLibrary.CSparseMatrix)">
      <summary>Multiplies two sparse matrices and return the result into another sparse matrix.</summary>
      <returns>A CSparseMatrix object containing the result.</returns>
      <param name="transA">A TransposeMode enumeration specifying whether the original matrix A or its transposed will be used.</param>
      <param name="A">A CSparseMatrix object representing the first sparse matrix.</param>
      <param name="B">A CSparseMatrix object representing the second sparse matrix.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.Multiply(Bluebit.MatrixLibrary.Complex,Bluebit.MatrixLibrary.TransposeMode,Bluebit.MatrixLibrary.CSparseMatrix,Bluebit.MatrixLibrary.CVector,Bluebit.MatrixLibrary.Complex,Bluebit.MatrixLibrary.CVector)">
      <summary> Computes a sparse matrix by a vector product and stores the result to another vector. The operation is defined as: y=alpha*op(A)*B+beta*y</summary>
      <param name="alpha">A complex scalar value.</param>
      <param name="transA">A TransposeMode enumeration specifying whether the original matrix A, the transpose of A or the conjugate transpose of A will be used.</param>
      <param name="A">A CSparseMatrix Class object representing the spare matrix to multiply.</param>
      <param name="x">A CVector object representing the vector to multiply with.</param>
      <param name="beta">A complex scalar value.</param>
      <param name="y">A CVector object which will contain the result.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.Multiply(Bluebit.MatrixLibrary.Complex,Bluebit.MatrixLibrary.TransposeMode,Bluebit.MatrixLibrary.CSparseMatrix,Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.Complex,Bluebit.MatrixLibrary.CMatrix)">
      <summary> Computes a sparse matrix by a dense matrix product and stores the result to another dense matrix. The operation is defined as: C=alpha*op(A)*B+beta*C</summary>
      <param name="alpha">A complex scalar value.</param>
      <param name="transA">A TransposeMode enumeration specifying whether the original matrix A, the transpose of A or the conjugate transpose of A will be used.</param>
      <param name="A">A CSparseMatrix Class object representing the spare matrix to multiply.</param>
      <param name="B">A CMatrix object specifying the dense matrix to multiply with.</param>
      <param name="beta">A complex scalar value.</param>
      <param name="C">A CMatrix object specifying the matrix which will contain the result.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.Negate(Bluebit.MatrixLibrary.CSparseMatrix)">
      <summary>Returns the negation of a sparse matrix.</summary>
      <returns>A CSparseMatrix Class object representing the negation of the sparse matrix.</returns>
      <param name="A">A CSparseMatrix Class object representing the sparse matrix to negate.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.RemoveZeros">
      <summary>Removes all elements which are close to zero from the internal storage.</summary>
      <remarks> Although the SparseMatrix Class class is designed to store only the non zero elements, it is possible to store zero elements elements either by direct assignment or as a result of a computation. The RemoveZeros method removes those elements thus making possible to release unused memory. The sparse solver routines require that symmetric matrices should contain the diagonal entries even if those entries are equal to zero. The incudeDiagonals parameter controls the behavior of the RemoveZeros method, whether it should remove the zero elements found on the main diagonal or not.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.RemoveZeros">
      <summary>Removes all elements which are close to zero from the internal storage.</summary>
      <remarks> Although the SparseMatrix Class class is designed to store only the non zero elements, it is possible to store zero elements either by direct assignment or as a result of a computation. The RemoveZeros method removes those elements thus making possible to release unused memory. This overload of the RemoveZeros method removes elements with absolute value less than 1.0E-15.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.RemoveZeros(System.Double)">
      <summary>Removes all elements with absolute value smaller than the specified tolerance.</summary>
      <remarks> Although the SparseMatrix Class class is designed to store only the non zero elements, it is possible to store zero elements either by direct assignment or as a result of a computation. The RemoveZeros method removes those elements thus making possible to release unused memory. The absolute value of each element is compared with of tolerance and if it is smaller it is regarded as zero.</remarks>
      <param name="tolerance">A double value. Elements with absolute value smaller than tolerance will be removed.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.RemoveZeros(System.Double,System.Boolean)">
      <summary>Removes all elements which are equal to zero within the specified tolerance, specifying whether to remove the diagonal zero entries.</summary>
      <remarks> Although the SparseMatrix Class class is designed to store only the non zero elements, it is possible to store zero elements either by direct assignment or as a result of a computation. The RemoveZeros method removes those elements thus making possible to release unused memory. The sparse solver routines require that symmetric matrices should contain the diagonal entries even if those entries are equal to zero. The incudeDiagonals parameter controls the behavior of the RemoveZeros method, whether it should remove the zero entries found on the main diagonal or not.</remarks>
      <param name="tolerance">A double value. Elements with absolute value smaller than tolerance will be removed.</param>
      <param name="excludeDiagonals">Specifies whether to exclude the diagonal entries from deletion or not.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.ToDense">
      <summary>Converts the current instance to a dense matrix.</summary>
      <returns>A CMatrix object that represents the sparse matrix in dense format.</returns>
      <remarks>A dense representation of a large sparse matrix requires a mutch larger amount of memory. An exception will be thrown if there is not sufficient memory.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.ToString">
      <summary>Converts this instance of CSparseMatrix to a formatted string.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.ToString">
      <summary>Converts this instance of CSparseMatrix to a formatted string using the default values for format string, separator, left and right borders, and end of line characters.</summary>
      <returns>A formatted string containing all matrix elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.ToString(System.String)">
      <summary>Converts this instance of CSparseMatrix to a formatted string specifying a format string, and using the the default values for separator, left and right borders, and end of line characters.</summary>
      <returns>A formatted string containing all matrix elements.</returns>
      <param name="format">A format string that will be used to convert all matrix elements.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.ToString(System.String,System.String)">
      <summary>Converts this instance of CSparseMatrix to a formatted string specifying a format string, and a separator and using the default values for left and right borders and end of line characters.</summary>
      <returns>A formatted string containing all matrix elements.</returns>
      <param name="format">A format string that will be used to convert all matrix elements.</param>
      <param name="separator">A string that will be used to separate matrix elements.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.ToString(System.String,System.String,System.String,System.String,System.String)">
      <summary>Converts this instance of CSparseMatrix to a formatted string specifying a format string, a separator, left and right borders and end of line characters.</summary>
      <returns>A formatted string containing all matrix elements.</returns>
      <param name="format">A format string that will be used to convert all matrix elements.</param>
      <param name="separator">A string that will be used to separate matrix elements.</param>
      <param name="leftBorder">A string that will be added at the beginning of each matrix row.</param>
      <param name="rightBorder">A string that will be added at the end of each matrix row.</param>
      <param name="endMatrix">A string that will be added at the end of the matrix.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.ToString(System.IFormatProvider,System.String)">
      <summary>Converts this instance of CSparseMatrix to a formatted string specifying culture-specific format information and a format string.</summary>
      <returns>A formatted string containing all matrix elements.</returns>
      <param name="provider"> An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="format">A format string that will be used to convert all matrix elements.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.ToString(System.IFormatProvider,System.String,System.String,System.String,System.String,System.String)">
      <summary>Converts this instance of CSparseMatrix to a formatted string specifying culture-specific format information, a format string, a separator, left and right borders and end of line characters.</summary>
      <returns>A formatted string containing all matrix elements.</returns>
      <param name="provider"> An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="format">A format string that will be used to convert all matrix elements.</param>
      <param name="separator">A string that will be used to separate matrix elements.</param>
      <param name="leftBorder">A string that will be added at the beginning of each matrix row.</param>
      <param name="rightBorder">A string that will be added at the end of each matrix row.</param>
      <param name="endMatrix">A string that will be added at the end of the matrix.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.Transpose">
      <summary>Returns the transpose of the sparse matrix.</summary>
      <returns>A CSparseMatrix instance that represents the transpose of the current sparse matrix.</returns>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseMatrix.op_Addition">
      <summary>Adds two sparse matrices.</summary>
      <returns>A CSparseMatrix object that represents the result of the addition.</returns>
      <param name="A">A CSparseMatrix instance on the left side of the addition operator.</param>
      <param name="B">A CSparseMatrix instance on the right side of the addition operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseMatrix.op_Equality">
      <summary>Tests whether two CSparseMatrix objects represent equal matrices.</summary>
      <returns>true if sparse matrices are equal; otherwise false.</returns>
      <param name="A">A CSparseMatrix instance on the left side of the equality operator.</param>
      <param name="B">A CSparseMatrix instance on the right side of the equality operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseMatrix.op_Inequality">
      <summary>Tests whether two CSparseMatrix objects represent non equal matrices.</summary>
      <returns>true if matrices are not equal; false otherwise.</returns>
      <param name="A">A CSparseMatrix instance on the left side of the inequality operator.</param>
      <param name="B">A CSparseMatrix instance on the right side of the inequality operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseMatrix.op_Multiply">
      <summary>Multiplies a sparse matrix.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseMatrix.op_Multiply">
      <summary>Multiplies a scalar by a sparse matrix.</summary>
      <returns>A CSparseMatrix Class object that represents the matrix-scalar product.</returns>
      <param name="scalar">A complex representing a scalar on the left side of the multiplication operator.</param>
      <param name="A">A CSparseMatrix Class instance on the right of the multiplication operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseMatrix.op_Multiply">
      <summary>Multiplies a sparse matrix by a dense matrix and returns the result into a dense matrix.</summary>
      <returns>A CMatrix object that contains the matrix-matrix product.</returns>
      <param name="A">A CSparseMatrix instance on the left of the multiplication operator.</param>
      <param name="B">A CMatrix object that representing the dense matrix to multiply with.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseMatrix.op_Multiply">
      <summary>Multiplies a sparse matrix by a scalar.</summary>
      <returns>A CSparseMatrix Class object that represents the matrix-scalar product.</returns>
      <param name="A">A CSparseMatrix Class instance on the left of the multiplication operator.</param>
      <param name="scalar">A complex representing a scalar on the lright side of the multiplication operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseMatrix.op_Multiply">
      <summary>Multiplies two sparse matrices and result the result into another sparse matrix.</summary>
      <returns>A CSparseMatrix object containing the matrix-matrix product.</returns>
      <param name="A">A CSparseMatrix instance on the left of the multiplication operator.</param>
      <param name="B">A CSparseMatrix instance on the right of the multiplication operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseMatrix.op_Multiply">
      <summary>Multiplies a sparse matrix by a vector.</summary>
      <returns>A CVector object containing the result of the matrix-vector product.</returns>
      <param name="A">A CSparseSolver Class instance on the left of the multiplication operator.</param>
      <param name="x">A CVector object representing the vector on the right side of the multiplication operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseMatrix.op_Multiply">
      <summary>Left multiplies a sparse matrix by a vector.</summary>
      <returns>A CVector object containing the result of the vector-matrix product.</returns>
      <param name="x">A CVector object representing the vector on the left side of the multiplication operator.</param>
      <param name="A">A CSparseMatrix instance on the rigth of the multiplication operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseMatrix.op_Subtraction">
      <summary>Subtracts a sparse matrix from another sparse matrix.</summary>
      <returns>A CSparseMatrix object containing the result of the subtraction.</returns>
      <param name="A">A CSparseMatrix instance representing the sparse matrix on the left of the subtraction operator.</param>
      <param name="B">A CSparseMatrix instance representing the sparse matrix on the right of the subtraction operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseMatrix.op_UnaryNegation">
      <summary>Negates a matrix.</summary>
      <returns>A CSparseMatrix representing the negation of the matrix.</returns>
      <param name="A">A CSparseMatrix representing the matrix to negate.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseMatrix.op_UnaryPlus">
      <summary>Returns a copy of the sparse matrix.</summary>
      <returns>A copy of the CSparseMatrix on the right side of the unary plus operator.</returns>
      <param name="A">A CSparseMatrix instance on the right side of the unary plus operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseMatrix.Capacity">
      <summary>Gets or sets the number of elements that the internal storage of the sparse matrix can hold without resizing. Gets or sets the number of elements that the internal storage of the sparse matrix can hold without resizing.</summary>
      <remarks> Capacity is automatically increased as needed while assigning elements of the sparse matrix. Each time the NumElements property is to exceed Capacity, Capacity is multiplied by the value specified by the GrowFactor property. The NumElements returns the actual number of explicitly assigned elements. If an attempt is made to set the Capacity to a value lower than NumElements then Capacity is set equal to NumElements.</remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseMatrix.Cols">
      <summary>Gets or sets the number of sparse matrix columns.</summary>
      <remarks>Setting the Cols property to a new value causes the sparse matrix to resize.</remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseMatrix.Data">
      <summary>This property is used while serializing and deserializing the CSparseMatrix and it is not intended to be used in user code.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseMatrix.GrowFactor">
      <summary>Gets or sets the number by which the Capacity is multiplied whenever a greater internal storage for the matrix is needed.</summary>
      <remarks> If GrowFactor property equals 2, then Capacity is doubled whenever a greater internal storage for the sparse matrix is needed. The default value is 1.2. Valid values are between 1 and 4.</remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseMatrix.Hermitian">
      <summary>Indicates whether this instance represents a hermitian sparse matrix.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseMatrix.Item(System.Int32,System.Int32)">
      <summary>Gets or sets a single element of the sparse matrix.</summary>
      <remarks> This is the default property of the CSparseMatrix object when using it in Visual Basic, or the indexer property when used in C#. Although the CSparseMatrix class is intended to store only the non-zero elements of a sparse matrix, it is possible to explicitly assign elements to zero. Assigning a non-zero element to a zero value does not automatically removes the element from the internal storage. To recover the storage used by zero elements use the RemoveZeros method.</remarks>
      <param name="row">Specifies the row of the matrix element to get or to set.</param>
      <param name="col">Specifies the column of the matrix element to get or to set.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseMatrix.NumElements">
      <summary>Gets the number of elements contained in the internal storage of the sparse matrix.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseMatrix.Rows">
      <summary>Gets or sets the number of sparse matrix rows.</summary>
      <remarks>Setting Rows property to a new value resizes the matrix.</remarks>
    </member>
    <member name="T:Bluebit.MatrixLibrary.CSparseSolver">
      <summary>Computes the factorization of a general or symmetric sparse complex matrix and uses the factorization to solve a system of linear equations.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseSolver.#ctor(Bluebit.MatrixLibrary.CSparseMatrix)">
      <summary>Creates an instance of the SparseSolver object for the specified sparse matrix.</summary>
      <param name="matrix">The sparse matrix for which to create the sparse solver.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseSolver.Dispose">
      <summary>Releases all the resources used by the ShortParentItemName object.</summary>
      <remarks>Calling Dispose allows the resources used by this object to be reallocated for other purposes.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseSolver.Solve">
      <summary>Solves a system of linear equations</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseSolver.Solve(Bluebit.MatrixLibrary.CMatrix)">
      <summary>Solves a system of linear equations for multiple right hands.</summary>
      <returns>A CMatrix object that contains the solution of the system of linear equations.</returns>
      <param name="rhnds">A CMatrix object that contains the multiple right hand vectors as columns.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseSolver.Solve(Bluebit.MatrixLibrary.CVector)">
      <summary>Solves a system of linear equations for a single right hand vector.</summary>
      <returns>A CVector object containing the solution of the system of linear equations.</returns>
      <param name="rhnds">A CVector object containing the right hand vector.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseSolver.FactorizationStrategy">
      <summary>Specifies the factorization strategy.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseSolver.FillInReducingMethod">
      <summary>Specifies the method to be used in order to reduce the fill in of the matrix factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseSolver.MatrixType">
      <summary>Specifies the matrix type.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseSolver.PivotEpsilon">
      <summary>Specifies a value to be used as a pivot when a tiny pivot is encountered.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseSolver.RefinementSteps">
      <summary>Specifies the maximum number of the refinement steps to be used.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseSolver.Status">
      <summary>Returns the status of the solver.</summary>
      <remarks>Any value for the Status property different than SolverStatus.Success indicates and error. Check this property after the Solve method has been used.</remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseSolver.StoppingTolerance">
      <summary>Specifies the allowable tolerance of the computed solution.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.CSVD">
      <summary>Represents the Singular Value Decomposition (SVD) of a general complex matrix.</summary>
      <remarks> The Singular Value Decomposition (SVD) of a mxn matrix A is written A = U*S*VH where S is an nxn (mxn if m&lt;n) matrix which is zero except for its min(m,n) diagonal elements, U is an mxn (mxm if m&lt;n) orthogonal/unitary matrix, and V is an nxn orthogonal/unitary matrix. The diagonal elements of S are the singular values of A; they are real and non-negative, and are returned in descending order. The first min(m,n) columns of U and V are the left and right singular vectors of A. </remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSVD.#ctor">
      <summary>Initializes a new instance of the CSVD class computing the Singular Value Decomposition (SVD) of a general complex matrix.</summary>
      <remarks>The CSVD constructor never fails. Succeeded property indicates whether the internal routines have managed to calculate all the singular values of the matrix.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSVD.#ctor(Bluebit.MatrixLibrary.CMatrix)">
      <summary>Initializes a new instance of the CSVD class computing the Singular Value Decomposition (SVD) of a general complex matrix.</summary>
      <remarks>The CSVD constructor never fails. Succeeded property indicates whether the internal routines have managed to calculate all the singular values of the matrix.</remarks>
      <param name="matrix">A CMatrix object containing the matrix whose Singular Value Decomposition will be computed.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSVD.#ctor(Bluebit.MatrixLibrary.CMatrix,System.Boolean)">
      <summary>Initializes a new instance of the CSVD class computing the Singular Value Decomposition of a general complex matrix, specifying whether the singular vectors (U and V matrices) will be computed.</summary>
      <remarks>The CSVD constructor never fails. Succeeded property indicates whether the internal routines have managed to calculate all the singular values of the matrix.</remarks>
      <param name="matrix">A CMatrix object containing the matrix whose Singular Value Decomposition will be computed.</param>
      <param name="singularValuesOnly">If true then only singular values are computed; if false then both singular values and singular vectors (U and V matrices) are calculated.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSVD.Dispose">
      <summary>Releases all the resources used by the ShortParentItemName object. Releases all the resources used by the ShortParentItemName object.Releases all the resources used by the ShortParentItemName object.</summary>
      <remarks>Calling Dispose allows the resources used by this object to be reallocated for other purposes.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSVD.PseudoInverse">
      <summary>Returns the Moore-Penrose inverse (pseudoinverse) of the matrix that is represented by this singular value decomposition.Returns the Moore-Penrose inverse (pseudoinverse) of the matrix that is represented by this singular value decomposition.</summary>
      <remarks> If A+ is the Moore-Penrose inverse (pseudoinverse) of matrix A then it satisfies the following four conditions: A*A+*A = A A+*A*A+ =A+ (A*A+)T = A*A+ (A+*A)T =A+*A </remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSVD.PseudoInverse">
      <summary>Returns the Moore-Penrose inverse (pseudoinverse) of the matrix that is represented by this singular value decomposition.</summary>
      <remarks> If A+ is the Moore-Penrose inverse (pseudoinverse) of matrix A then it satisfies the following four conditions: A*A+*A = A A+*A*A+ =A+ (A*A+)T = A*A+ (A+*A)T =A+*A </remarks>
      <returns>A CMatrix object representing the Moore-Penrose inverse of the factored matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSVD.PseudoInverse(System.Double)">
      <summary>Returns the Moore-Penrose inverse (pseudoinverse) of the matrix that is represented by this singular value decomposition.</summary>
      <remarks> If A+ is the Moore-Penrose inverse (pseudoinverse) of matrix A then it satisfies the following four conditions: A*A+*A = A A+*A*A+ =A+ (A*A+)T = A*A+ (A+*A)T =A+*A </remarks>
      <returns>A CMatrix object representing the Moore-Penrose inverse of the factored matrix.</returns>
      <param name="tolerance">A double specifying the value under which the singular values of the matrix are considered to be zero.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSVD.Rank">
      <summary>Returns the matrix rank.</summary>
      <remarks>The matrix rank is defined as the number nonzero singular values.The matrix rank is defined as the number nonzero singular values.</remarks>
      <returns>An integer value representing the matrix rank.An integer value representing the matrix rank.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSVD.Rank">
      <summary>Returns the matrix rank.</summary>
      <returns>An integer value representing the matrix rank.</returns>
      <remarks>The matrix rank is defined as the number of its nonzero singular values.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSVD.Rank(System.Double)">
      <summary>Returns the matrix rank.</summary>
      <remarks>The matrix rank is defined as the number of its nonzero singular values.</remarks>
      <returns>An integer value representing the matrix rank.</returns>
      <param name="tolerance">A double specifying the value under which the singular values of the matrix are considered to be zero.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSVD.S">
      <summary>Returns the S part of the singular value decomposition.</summary>
      <remarks> The Singular Value Decomposition (SVD) of a mxn matrix A is written A = U*S*VH where S is an nxn (mxn if m&lt;n) matrix which is zero except for its min(m,n) diagonal elements, U is an mxn (mxm if m&lt;n) orthogonal/unitary matrix, and V is an nxn orthogonal/unitary matrix. The diagonal elements of S are the singular values of A; they are real and non-negative, and are returned in descending order. The first min(m,n) columns of U and V are the left and right singular vectors of A. </remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSVD.SingularValue(System.Int32)">
      <summary>Gets the specified singular value.</summary>
      <param name="index">A zero-based index specifying the singular value to return.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSVD.SingularValues">
      <summary>Gets a vector containing all the computed singular values.</summary>
      <remarks>The singular values are ordered in descending order.</remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSVD.Succeeded">
      <summary>Indicates whether the all singular values were calculated successfully.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSVD.U">
      <summary>Returns the U part of the singular value decomposition.</summary>
      <remarks> The Singular Value Decomposition (SVD) of a mxn matrix A is written A = U*S*VH where S is an nxn (mxn if m&lt;n) matrix which is zero except for its min(m,n) diagonal elements, U is an mxn (mxm if m&lt;n) orthogonal/unitary matrix, and V is an nxn orthogonal/unitary matrix. The diagonal elements of S are the singular values of A; they are real and non-negative, and are returned in descending order. The first min(m,n) columns of U and V are the left and right singular vectors of A. </remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSVD.V">
      <summary>Returns the V part of the singular value decomposition.</summary>
      <remarks> The Singular Value Decomposition (SVD) of a mxn matrix A is written A = U*S*VH where S is an nxn (mxn if m&lt;n) matrix which is zero except for its min(m,n) diagonal elements, U is an mxn (mxm if m&lt;n) orthogonal/unitary matrix, and V is an nxn orthogonal/unitary matrix. The diagonal elements of S are the singular values of A; they are real and non-negative, and are returned in descending order. The first min(m,n) columns of U and V are the left and right singular vectors of A. </remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSVD.VH">
      <summary>Returns the Hermitian transpose (adjoin) of the V part of the singular value decomposition.</summary>
      <remarks> The Singular Value Decomposition (SVD) of a mxn matrix A is written A = U*S*VH where S is an nxn (mxn if m&lt;n) matrix which is zero except for its min(m,n) diagonal elements, U is an mxn (mxm if m&lt;n) orthogonal/unitary matrix, and V is an nxn orthogonal/unitary matrix. The diagonal elements of S are the singular values of A; they are real and non-negative, and are returned in descending order. The first min(m,n) columns of U and V are the left and right singular vectors of A. </remarks>
    </member>
    <member name="T:Bluebit.MatrixLibrary.CSymEigen">
      <summary>The CSymEigen class is used to compute the eigenvalues and optionally the eigenvectors of a complex Hermitian matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSymEigen.#ctor">
      <summary>Initializes a new instance of the CSymEigen class computing the eigen decomposition of a complex Hermitian matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSymEigen.#ctor(Bluebit.MatrixLibrary.CMatrix)">
      <summary>Initializes a new instance of the CSymEigen class computing the eigenvalues and the eigenvectors of a complex Hermitian matrix.</summary>
      <remarks>No check is made if matrix is actually Hermitian and only its lower triangular part is used in calculations.</remarks>
      <param name="matrix">A CMatrix object representing the complex Hermitian matrix whose eigenvalues and right eigenvectors are to be computed.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSymEigen.#ctor(Bluebit.MatrixLibrary.CMatrix,System.Boolean)">
      <summary>Initializes a new instance of the CSymEigen class computing the eigenvalues and optionally the eigenvectors of a complex Hermitian matrix.</summary>
      <param name="matrix">A CMatrix object representing the complex Hermitian matrix whose eigenvalues and right eigenvectors are to be computed.</param>
      <param name="eigenvectors">A boolean value specifying whether eigenvectors will be calculated.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSymEigen.Dispose">
      <summary>Releases all the resources used by the ShortParentItemName object. Releases all the resources used by the ShortParentItemName object.Releases all the resources used by the ShortParentItemName object.</summary>
      <remarks>Calling Dispose allows the resources used by this object to be reallocated for other purposes.</remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSymEigen.D">
      <summary>Gets a real diagonal matrix, containing all the computed eigenvalues in its main diagonal.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSymEigen.Eigenvalue(System.Int32)">
      <summary>Gets the specified eigenvalue.</summary>
      <param name="index">A zero-based index specifying the eigenvalue to return.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSymEigen.Eigenvalues">
      <summary>Returns a vector containing all the computed eigenvalues.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSymEigen.Eigenvector(System.Int32)">
      <summary>Gets the specified eigenvector.</summary>
      <remarks>If the eigenvectors parameter of the CSymEigen class constructor is set to false, the eigenvectors are not calculated and Eigenvector property returns a null reference (Nothing in Visual Basic).</remarks>
      <param name="index">An index specifying the eigenvector to return.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSymEigen.Eigenvectors">
      <summary>Gets the eigenvectors matrix.</summary>
      <remarks>If the eigenvectors parameter of the CSymEigen class constructor is set to false, the eigenvectors are not calculated and Eigenvectors property returns a null reference (Nothing in Visual Basic).</remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSymEigen.Size">
      <summary>Gets the size of matrix that is represented by this eigen decomposition.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSymEigen.Succeded">
      <summary>Indicates whether the eigenvalues-eigenvectors calculation succeeded to complete.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.CVector">
      <summary>Represents a vector having complex floating point numbers as elements.</summary>
      <remarks>CVector class is used as to represent a complex vector. Its methods can be used to perform vector operations and data manipulation.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.#ctor">
      <summary>Initializes a new instance of the CVector class.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.#ctor">
      <summary>Initializes a new instance of the CVector class creating a vector of length equal to 3.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.#ctor(Bluebit.MatrixLibrary.Complex[])">
      <summary>Initializes a new instance of the CVector class using the content of an array.</summary>
      <param name="array">The array of complex structures whose content will be used to initialize the elements of the newly created CVector object.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.#ctor(Bluebit.MatrixLibrary.CVector)">
      <summary>Creates a new instance of the CVector class, copying the content of an existing vector.</summary>
      <remarks>This is the copy constructor of the CVector class.</remarks>
      <param name="vector">The CVector object whose elements will by copied into the newly created vector.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.#ctor(System.Int32)">
      <summary>Creates a new instance of the CVector class specifying its length.</summary>
      <param name="size">The length of the newly created vector.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.#ctor(System.Int32,Bluebit.MatrixLibrary.Complex)">
      <summary>Creates a new instance of the CVector class specifying its length and a value to initialize its components.</summary>
      <param name="size">An integer value specifying the length of the newly created vector.</param>
      <param name="value">A complex that will be used to initialize vector elements.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.AbsSum">
      <summary>Returns the sum of magnitudes of the vector elements.</summary>
      <returns>A double value equal to the sum of magnitudes of the vector elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Add">
      <summary>Adds vectors.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Add(System.ValueType,Bluebit.MatrixLibrary.CVector,Bluebit.MatrixLibrary.CVector)">
      <summary> Computes a vector-scalar product and adds the result to a vector. It is defined as: y=A*x+y</summary>
      <param name="alpha">A complex representing the scalar value to multiply with the vector.</param>
      <param name="x">A CVector object representing the vector to multiply with the scalar.</param>
      <param name="y">A CVector object representing the vector to add with.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Add(Bluebit.MatrixLibrary.CVector,Bluebit.MatrixLibrary.Complex)">
      <summary>Adds a vector with a scalar.</summary>
      <returns>A CVector object representing the result of the addition.</returns>
      <param name="x">A CVector instance representing the vector to add with the scalar.</param>
      <param name="alpha">A Complex value representing the scalar to add with the vector.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Add(Bluebit.MatrixLibrary.CVector,Bluebit.MatrixLibrary.CVector)">
      <summary>Adds two vectors.</summary>
      <returns>A CVector object that represents the result of the addition.</returns>
      <param name="x">A CVector instance on the left side of the addition operator.</param>
      <param name="y">A CVector instance on the right side of the addition operator.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.ApplyFunction">
      <summary>Returns a new CVector object, whose elements are the result of applying the specified complex function to the elements of this vector.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.ApplyFunction(Bluebit.MatrixLibrary.ComplexFunction2Cmp2Int,Bluebit.MatrixLibrary.Complex,System.Int32)">
      <summary>Returns a new CVector object, whose elements are the result of applying the specified complex function to the elements of this vector.</summary>
      <returns>A new CVector object with the same length as this vector, whose elements are the results of applying the specified function to the elements of this vector.</returns>
      <remarks> The elements of this vector are passed one by one as parameters to the function that is represented by the delegate. The returned values from this function are used to initialize the elements of the newly created CVector object. The index of the vector element is passed as the forth parameter of the function represented by the delegate.</remarks>
      <param name="function">A delegate to a function that takes as its first and second parameter a complex, as its third and forth parameter an integer, and returns a complex.</param>
      <param name="value1">A Complex value that will be passed to the second parameter of the function represented by the delegate.</param>
      <param name="value2">An integer value that will be passed to the third parameter of the function represented by the delegate.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.ApplyFunction(Bluebit.MatrixLibrary.ComplexFunction1Cmp2Int,System.Int32)">
      <summary>Returns a new CVector object, whose elements are the result of applying the specified complex function to the elements of this vector.</summary>
      <returns> A new CVector object with the same length as this vector, whose elements are the results of applying the specified function to the elements of this vector.</returns>
      <remarks> The elements of this vector are passed one by one as parameters to the function that is represented by the delegate. The returned values from this function are used to initialize the elements of the newly created CVector object. The index of the vector element is passed as the third parameter of the function represented by the delegate.</remarks>
      <param name="function">A delegate to a function that takes as its first parameter a complex, as a second and third parameter an integer and returns a complex.</param>
      <param name="value">The integer value that will be passed to the second parameter of the function represented by the delegate.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.ApplyFunction(Bluebit.MatrixLibrary.ComplexFunction1Cmp1Int,System.Int32)">
      <summary>Returns a new CVector object, whose elements are the result of applying the specified complex function to the elements of this vector.</summary>
      <remarks> The elements of this vector are passed one by one as parameters to the function that is represented by the delegate. The returned values from this function are used to initialize the elements of the newly created CVector object.</remarks>
      <returns>A new CVector object with the same length as this vector, whose elements are the results of applying the specified function to the elements of this vector.</returns>
      <param name="function">A delegate to a function that takes as its first parameter a complex, as a second parameter an integer and returns a complex.</param>
      <param name="value">The integer value that will be passed to the second parameter of the function represented by the delegate.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.ApplyFunction(Bluebit.MatrixLibrary.ComplexFunction2Cmp,Bluebit.MatrixLibrary.Complex)">
      <summary>Returns a new CVector object, whose elements are the result of applying the specified complex function to the elements of this vector.</summary>
      <returns>A new CVector object with the same length as this vector, whose elements are the results of applying the specified function to the elements of this vector.</returns>
      <remarks> The elements of this vector are passed one by one as parameters to the function that is represented by the delegate. The returned values from this function are used to initialize the elements of the newly created CVector object.</remarks>
      <param name="function">A delegate to a function that takes as its first and second parameter a complex and returns a complex.</param>
      <param name="value">The complex value that will be passed to the second parameter of the function represented by the delegate.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.ApplyFunction(Bluebit.MatrixLibrary.ComplexFunction1Cmp)">
      <summary>Returns a new CVector object, whose elements are the result of applying the specified complex function to the elements of this vector.</summary>
      <returns>A new CVector object with the same length as this vector, whose elements are the results of applying the specified function to the elements of this vector.</returns>
      <remarks> The elements of this vector are passed one by one as parameters to the function that is represented by the delegate. The returned values from this function are used to initialize the elements of the newly created CVector object.</remarks>
      <param name="function">A delegate to a function that takes one complex parameter and returns a complex.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Clear">
      <summary>Sets the value of all the CVector elements to zero.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Clone">
      <summary>Creates a duplicate of this CVector object.</summary>
      <remarks>A deep copy is created. Each CVector object references different data.</remarks>
      <returns>A new CVector object that contains the same data as this.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Dispose">
      <summary>Releases all the resources used by the ShortParentItemName object. Releases all the resources used by the ShortParentItemName object.Releases all the resources used by the ShortParentItemName object.</summary>
      <remarks>Calling Dispose allows the resources used by this object to be reallocated for other purposes.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Divide">
      <summary>Divides complex vectors.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Divide(Bluebit.MatrixLibrary.Complex,Bluebit.MatrixLibrary.CVector)">
      <summary>Divides a scalar by a complex vector.</summary>
      <returns>A CVector object representing the result of the scalar-vector division.</returns>
      <param name="alpha">A complex representing the scalar on the left of the division operator.</param>
      <param name="x">A CVector object representing the vector on the right of the division operator.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Divide(Bluebit.MatrixLibrary.CVector,Bluebit.MatrixLibrary.Complex)">
      <summary>Divides a complex vector by a scalar.</summary>
      <returns>A CVector object representing the result of the vector-scalar division.</returns>
      <param name="x">A CVector object representing the vector on the left of the division operator.</param>
      <param name="alpha">A Complex representing the scalar on the right of the division operator.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Divide(Bluebit.MatrixLibrary.CVector,Bluebit.MatrixLibrary.CVector)">
      <summary>Divides two complex vectors.</summary>
      <returns>A CVector object representing the result of the vector-vector division.</returns>
      <param name="x">A CVector object representing the vector on the left of the division operator.</param>
      <param name="y">A CVector object representing the vector on the right of the division operator.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.DotProduct">
      <summary>Returns the dot product of vectors.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.DotProduct(Bluebit.MatrixLibrary.CVector)">
      <summary>Returns the dot product of this vector with another vector.</summary>
      <returns>A complex representing the dot product of this vector with the specified vector.</returns>
      <param name="vector">A CVector object.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.DotProduct(Bluebit.MatrixLibrary.CVector,Bluebit.MatrixLibrary.CVector)">
      <summary>Returns the dot product of two complex vectors.</summary>
      <returns>A complex representing the dot product of the two vectors.</returns>
      <param name="x">A CVector object representing the first complex vector.</param>
      <param name="y">A CVector object representing the second complex vector.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Equals(System.Object)">
      <summary>Returns a value indicating whether this CVector object is equal to another vector.</summary>
      <returns>true if obj is an instance of the CVector class and represents a vector that has the same length as this instance and also all the elements of obj are equal to the elements of this instance; false otherwise.</returns>
      <param name="obj">An object to compare with this instance of the CVector class.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.FillRandom">
      <summary>Fills the CVector object with random values.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.FillRandom">
      <summary>Fills the CVector object with random values ranging from 0 to 10, rounded to zero decimal places.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.FillRandom(System.Double,System.Double)">
      <summary>Fills the CVector object with random values ranging from lower to upper bound, rounded to 0 decimal places.</summary>
      <remarks>Use FillRandom method in order to quickly fill the vector with random values, while coding, testing and debugging your application.</remarks>
      <param name="lowerBound">A double specifying the lower limit of the random values that will be used.</param>
      <param name="upperBound">A double specifying the upper limit of the random values that will be used.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.FillRandom(System.Double,System.Double,System.Int32)">
      <summary>Fills the CVector object with random values ranging from lower bound to upper bound, rounded to the specified number of decimal places.</summary>
      <remarks>Use FillRandom method in order to quickly fill the vector with random values, while coding, testing and debugging your application.</remarks>
      <param name="lowerBound">A double specifying the lower limit of the random values that will be used.</param>
      <param name="upperBound">A double specifying the upper limit of the random values that will be used.</param>
      <param name="decimals">An integer specifying the number of decimal places to which random values will be rounded to.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.GetHashCode">
      <summary>Returns the hash code of the current ShortParentItemName.</summary>
      <returns>A 32-bit signed integer that represents the hash code.</returns>
      <remarks>This method overrides Object.GetHashCode and generates the same hash code for two objects that are equal according to the Equals method.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implements the ISerializable interface and returns the data needed to serialize the CVector class.</summary>
      <remarks>This method implements the ISerializable interface.</remarks>
      <param name="info">A SerializationInfo object.</param>
      <param name="context">A StreamingContext structure.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.HasINFs">
      <summary>Returns a value indicating whether the current vector contains any elements that evaluate to negative or positive infinity.</summary>
      <returns>true if any of the vector elements evaluates to negative or positive infinity; otherwise false.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.HasNaNs">
      <summary>Returns a value indicating whether the current vector contains any elements that evaluate to NaN values.</summary>
      <returns>true if any of the vector elements evaluates to a NaN value; otherwise false.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Imag">
      <summary>Returns a Vector object containing the imaginary parts of the CVector elements.</summary>
      <returns>A Vector object that contains just the imaginary parts of the CVector object's elements.</returns>
      <remarks>Use this method together with the Real method in order to split a complex matrix to its real and imaginary parts.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.IsFinite">
      <summary>Returns a value indicating whether the current vector contains any elements that evaluate either to NaN or to negative or positive infinity.</summary>
      <returns>true if all elements of the current vector have a value other NaN, negative infinity, positive infinity; otherwise false.</returns>
      <remarks> Most of the internal routines expect that input matrices or vectors do not contain any negative infinity, positive infinity, or NaN values in order to perform flawlessly. If you suspect that the current matrix or vector may contain any NaN or infinity values, use the IsFinite method before any further processing.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Multiply">
      <summary>Multiplies vectors.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Multiply(Bluebit.MatrixLibrary.CVector,Bluebit.MatrixLibrary.Complex)">
      <summary>Multiplies a vector by a scalar.</summary>
      <returns>A CVector object representing the result of the vector-scalar multiplication.</returns>
      <param name="x">A CVector instance representing the vector to multiply by the scalar.</param>
      <param name="alpha">A Complex value representing the scalar by which to multiply the vector.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Multiply(Bluebit.MatrixLibrary.CVector,Bluebit.MatrixLibrary.CVector)">
      <summary>Multiplies two vectors.</summary>
      <returns>A CVector object that represents the result of the multiplication.</returns>
      <param name="x">A CVector instance on the left side of the multiplication operator.</param>
      <param name="y">A CVector instance on the right side of the multiplication operator.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Norm">
      <summary>Returns the Euclidean norm of the vector.</summary>
      <returns>A double equal to the Euclidean norm of the vector.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Normalize(Bluebit.MatrixLibrary.NormalizeMode)">
      <summary> Normalizes the current vector according to the specified mode.</summary>
      <remarks> The following table lists the values of NormalizeMode enumeration and their effect on vector normalization. Member Description MaximumOne Normalizes vector elements so that the biggest element is 1. UnitLength Normalizes the vector so that it becomes a unit length vector(the sum of squares of vector elements is 1). ZScores Normalizes vector elements to zscores (values having zero mean and unit standard deviation). </remarks>
      <param name="mode">A NormalizeMode enumeration value indicating how this vector will be normalized.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Real">
      <summary>Returns a Vector object containing the real parts of the CVector elements.</summary>
      <returns>A Vector object that contains just the real parts of the CVector object's elements.</returns>
      <remarks>Use this method together with the Imag method in order to split a complex matrix to its real and imaginary parts.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Resize(System.Int32)">
      <summary>Resizes the vector preserving its content.</summary>
      <param name="size">An integer specifying the new length of the vector.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Subtract">
      <summary>Subtracts complex vectors.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Subtract(Bluebit.MatrixLibrary.Complex,Bluebit.MatrixLibrary.CVector)">
      <summary>Subtracts a complex vector from a scalar.</summary>
      <returns>A CVector object representing the result of the subtraction.</returns>
      <param name="alpha">A Complex representing the scalar from which to subtract the vector.</param>
      <param name="x">A CVector instance representing the vector to subtract from the scalar.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Subtract(Bluebit.MatrixLibrary.CVector,Bluebit.MatrixLibrary.Complex)">
      <summary>Subtracts a scalar from a complex vector.</summary>
      <returns>A CVector object representing the result of the subtraction.</returns>
      <param name="x">A CVector instance from which to subtract the scalar.</param>
      <param name="alpha">A Complex representing the scalar to subtract from the vector.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Subtract(Bluebit.MatrixLibrary.CVector,Bluebit.MatrixLibrary.CVector)">
      <summary>Subtracts a vector from another vector.</summary>
      <returns>A CVector object representing the result of the subtraction.</returns>
      <param name="x">A CVector instance on the left of the subtraction operator.</param>
      <param name="y">A CVector instance on the right of the subtraction operator.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Sum">
      <summary>Returns the sum of vector elements.</summary>
      <returns>A complex equal to the sum of vector elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.ToArray">
      <summary>Returns an array of type complex containing the same values as the current vector.</summary>
      <returns>An array of type complex containing the same values as the current vector.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.ToCMatrix">
      <summary>Converts current vector to a CMatrix object.</summary>
      <returns>A one-column CMatrix object containing the same values as this vector.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.ToString">
      <summary>Converts this instance of CVector to a formatted string.</summary>
      <returns>A formatted string containing all vector elements.</returns>
      <remarks>The "F3" format string is used to format each vector element. A space character is used as a separator of vector elements. The right and left borders are set to "| " and " |" strings respectively. The new line character "\n" is added at the end of the string.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.ToString">
      <summary>Converts this instance of CVector to a formatted string using the default values for format string, separator, left and right borders, and end of line characters.</summary>
      <returns>A formatted string containing all vector elements.</returns>
      <remarks>The "F3" format string is used to format each vector element. A space character is used as a separator of vector elements. The right and left borders are set to "| " and " |" strings respectively. The new line character "\n" is added at the end of the string.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.ToString(System.String)">
      <summary>Converts this instance of CVector to a formatted string specifying a format string, and using the the default values for separator, left and right borders, and end of line characters.</summary>
      <remarks>A space character is used as a separator of vector elements. The left and right borders are set to "| " and " |" strings respectively. The new line character "\n" is added at the end of the string.</remarks>
      <returns>A formatted string containing all vector elements.</returns>
      <param name="format">A format string that will be used to convert all vector elements.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.ToString(System.String,System.String)">
      <summary>Converts this instance of CVector to a formatted string specifying a format string, and a separator and using the default values for left and right borders and end of line characters.</summary>
      <returns>A formatted string containing all vector elements.</returns>
      <remarks>The left and right borders are set to "| " and " |" strings respectively. The new line character "\n" is added at the end of the string.</remarks>
      <param name="format">A format string that will be used to convert all vector elements.</param>
      <param name="separator">A string that will be used to separate vector elements.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.ToString(System.String,System.String,System.String,System.String,System.String)">
      <summary>Converts this instance of CVector to a formatted string specifying a format string, a separator, left and right borders and end of line characters.</summary>
      <returns>A formatted string containing all vector elements.</returns>
      <param name="format">A format string that will be used to convert all vector elements.</param>
      <param name="separator">A string that will be used to separate vector elements.</param>
      <param name="leftBorder">A string that will be added at the beginning of the string.</param>
      <param name="rightBorder">A string that will be added at the end of the string.</param>
      <param name="endVector">A string that will be added at the end of the string.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.ToString(System.IFormatProvider,System.String)">
      <summary>Converts this instance of the ShortParentItemName object to a formatted string specifying culture-specific format information and a format string.</summary>
      <param name="provider"> An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="format">A format string that will be used to convert all matrix elements.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.ToString(System.IFormatProvider,System.String,System.String,System.String,System.String,System.String)">
      <summary>Converts this instance of ShortParentItemName to a formatted string specifying culture-specific format information, a format string, a separator, left and right borders and end of line characters.</summary>
      <param name="provider"> An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="format">A string string that will be used to convert all matrix elements.</param>
      <param name="separator">A string that will be used to separate matrix elements.</param>
      <param name="leftBorder">A string that will be added at the beginning of each matrix row.</param>
      <param name="rightBorder">A string that will be added at the end of each matrix row.</param>
      <param name="endVector">A string that will be added at the end of each matrix row.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CVector.op_Addition">
      <summary>Adds complex vectors.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CVector.op_Addition">
      <summary>Adds a scalar and a vector.</summary>
      <returns>A CVector object representing the result of the addition.</returns>
      <param name="alpha">A Complex representing the scalar on the left side of the addition operator.</param>
      <param name="x">A CVector instance on the right side of the addition operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CVector.op_Addition">
      <summary>Adds a vector and a scalar.</summary>
      <returns>A CVector object representing the result of the addition.</returns>
      <param name="x">A CVector instance on the left side of the addition operator.</param>
      <param name="alpha">A Complex on the right side of the addition operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CVector.op_Addition">
      <summary>Adds two vectors.</summary>
      <returns>A CVector object representing the result of the addition.</returns>
      <param name="x">A CVector instance on the left side of the addition operator.</param>
      <param name="y">A CVector instance on the right side of the addition operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CVector.op_Division">
      <summary>Divides complex vectors.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CVector.op_Division">
      <summary>Divides a scalar by a complex vector.</summary>
      <returns>A CVector object representing the result of the scalar-vector division.</returns>
      <param name="alpha">A Complex representing the scalar on the left of the division operator.</param>
      <param name="x">A CVector object representing the vector on the right of the division operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CVector.op_Division">
      <summary>Divides a complex vector by a scalar.</summary>
      <returns>A CVector object representing the result of the vector-scalar division.</returns>
      <param name="x">A CVector object representing the vector on the left of the division operator.</param>
      <param name="alpha">A Complex representing the scalar on the right of the division operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CVector.op_Division">
      <summary>Divides two complex vectors.</summary>
      <returns>A CVector object representing the result of the vector-vector division.</returns>
      <param name="x">A CVector object representing the vector on the left of the division operator.</param>
      <param name="y">A CVector object representing the vector on the right of the division operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CVector.op_Equality">
      <summary>Tests whether two CVector objects represent equal vectors.</summary>
      <returns>true if vectors are equal; otherwise false.</returns>
      <remarks> The equality operator returns false if vectors are not of the same length. The elements of the compared vectors must be exactly equal in order to the equality operator return true.</remarks>
      <param name="x">A CVector instance on the left side of the equality operator.</param>
      <param name="y">A CVector instance on the right side of the equality operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CVector.op_Implicit">
      <summary>Converts a CVector object.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CVector.op_Implicit">
      <summary>Converts a CVector to a CMatrix.</summary>
      <returns>A CMatrix.</returns>
      <param name="vector">The CVector object to convert.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CVector.op_Implicit">
      <summary>Converts an array of complex type to a CVector object.</summary>
      <returns>A CVector object containing the same values as the complex array.</returns>
      <param name="array">The complex array to convert.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CVector.op_Inequality">
      <summary>Tests whether two CVector objects represent equal vectors.</summary>
      <returns>true if vectors are not equal; otherwise false.</returns>
      <param name="x">A CVector instance on the left side of the equality operator.</param>
      <param name="y">A CVector instance on the right side of the equality operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CVector.op_Multiply">
      <summary>Multiplies vectors.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CVector.op_Multiply">
      <summary>Multiplies a scalar by a complex vector.</summary>
      <returns>A CVector object representing the result of the multiplication.</returns>
      <param name="alpha">A Complex representing the scalar on the left of the multiplication operator.</param>
      <param name="x">A CVector instance on the right of the multiplication operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CVector.op_Multiply">
      <summary>Multiplies a complex vector by a scalar.</summary>
      <returns>A CVector object representing the result of the multiplication.</returns>
      <param name="x">A CVector instance on the left of the multiplication operator.</param>
      <param name="alpha">A Complex representing the scalar on the right of the multiplication operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CVector.op_Multiply">
      <summary>Multiplies two complex vectors.</summary>
      <returns>A CVector object representing the result of the multiplication.</returns>
      <param name="x">A CVector instance on the left of the multiplication operator.</param>
      <param name="y">A CVector instance on the right of the multiplication operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CVector.op_Subtraction">
      <summary>Subtracts complex vectors.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CVector.op_Subtraction">
      <summary>Subtracts a complex vector from a scalar.</summary>
      <returns>A CVector object representing the result of the subtraction.</returns>
      <param name="alpha">A Complex representing the scalar on the left of the subtraction operator.</param>
      <param name="x">A CVector instance on the right of the subtraction operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CVector.op_Subtraction">
      <summary>Subtracts a scalar from a complex vector.</summary>
      <returns>A CVector object representing the result of the subtraction.</returns>
      <param name="x">A CVector instance on the left of the subtraction operator.</param>
      <param name="alpha">A Complex representing the scalar on the right of the subtraction operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CVector.op_Subtraction">
      <summary>Subtracts a vector from another vector.</summary>
      <returns>A CVector instance on the left of the subtraction operator.</returns>
      <param name="x">A CVector instance on the left of the subtraction operator.</param>
      <param name="y">A CVector instance on the right of the subtraction operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CVector.Data">
      <summary>This property is used while serializing and deserializing the CVector object and is not intended to be used directly from your code.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CVector.DataPtr">
      <summary>Gets the address of the unmanaged (native) memory block containing the vector's elements.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CVector.Item(System.Int32)">
      <summary>Gets or sets a single vector element.</summary>
      <remarks>This is the default property of the CVector object when using it in Visual Basic. It is the indexer of the CVector object when used in C#.</remarks>
      <param name="index">A zero based index of the element to get or to set.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CVector.Length">
      <summary>Gets or sets the vector length.</summary>
      <remarks>Setting the vector length to new value is the same as using the Resize method.</remarks>
    </member>
    <member name="T:Bluebit.MatrixLibrary.Eigen">
      <summary>The Eigen class is used to compute the eigenvalues and the left and/or right eigenvectors of a general square real matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Eigen.#ctor">
      <summary>Initializes a new instance of the Eigen class computing the eigen decomposition of a general square real matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Eigen.#ctor(Bluebit.MatrixLibrary.Matrix)">
      <summary>Creates a new instance of the Eigen class, computing the eigenvalues and the right eigenvectors of a general square real matrix, with preliminary matrix balancing.</summary>
      <remarks>Only the right eigenvectors are computed if this constructor is used; the LeftEigenvector, LeftEigenvectors properties will return a null reference (Nothing in Visual Basic).</remarks>
      <param name="matrix">A Matrix object representing the square real matrix whose eigenvalues and right eigenvectors are to be computed.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Eigen.#ctor(Bluebit.MatrixLibrary.Matrix,System.Boolean)">
      <summary>Creates a new instance of the Eigen class computing the eigenvalues and optionally the right eigenvectors of a general real complex matrix, with preliminary matrix balancing.</summary>
      <remarks>Using a false value for the rightEigenvectors parameter allows you to calculate only the eigenvalues in cases where the eigenvectors are not needed.</remarks>
      <param name="matrix">A Matrix object representing the square real matrix whose eigenvalues and optionally its right eigenvectors are to be computed.</param>
      <param name="rightEigenvectors">A boolean value specifying whether the right eigenvectors will be computed.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Eigen.#ctor(Bluebit.MatrixLibrary.Matrix,System.Boolean,System.Boolean)">
      <summary>Creates a new instance of the Eigen class computing the eigenvalues and optionally the right and/or the left eigenvectors of a general square real matrix, with preliminary matrix balancing.</summary>
      <remarks>This constructor allows you to specify which of the right and/or left eigenvectors will be computed.</remarks>
      <param name="matrix">A Matrix object representing the square real matrix whose eigenvalues and optionally its right and/or left eigenvectors are to be computed.</param>
      <param name="rightEigenvectors">A boolean value specifying whether the right eigenvectors will be computed.</param>
      <param name="leftEigenvectors">A boolean value specifying whether the left eigenvectors will be computed.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Eigen.#ctor(Bluebit.MatrixLibrary.Matrix,System.Boolean,System.Boolean,Bluebit.MatrixLibrary.BalanceType)">
      <summary>Creates a new instance of the Eigen class computing the eigenvalues and optionally the right and/or the left eigenvectors of a general square real matrix, using the specified type of preliminary matrix balancing.</summary>
      <remarks> Balancing a matrix means permuting its rows and columns to make it more nearly upper triangular, and applying similarity transformations to make its rows and columns closer in norm. Generally balancing improves the accuracy of the computations. However, there are cases that a matrix contains near to zero elements that are due to roundoff errors. If balancing is used, those elements may become the same significant as others leading to incorrect eigenvectors. To avoid such a situation set the balance parameter to false.</remarks>
      <param name="matrix">A Matrix object representing the square real matrix whose eigenvalues and optionally its right and/or left eigenvectors are to be computed.</param>
      <param name="rightEigenvectors">A boolean value specifying whether the right eigenvectors will be computed.</param>
      <param name="leftEigenvectors">A boolean value specifying whether the left eigenvectors will be computed.</param>
      <param name="balance">A BalanceType enumeration specifying whether preliminary balancing will be used and the type of balancing.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Eigen.Dispose">
      <summary>Releases all the resources used by the ShortParentItemName object.</summary>
      <remarks>Calling Dispose allows the resources used by this object to be reallocated for other purposes.</remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Eigen.D">
      <summary>Gets a complex diagonal matrix, containing all the computed eigenvalues in its main diagonal.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Eigen.Eigenvalue(System.Int32)">
      <summary>Gets the specified eigenvalue.</summary>
      <param name="index">A zero-based index specifying the eigenvalue to return.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Eigen.Eigenvalues">
      <summary>Returns a vector containing all the computed eigenvalues.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Eigen.Eigenvector(System.Int32)">
      <summary>Gets the specified right eigenvector.</summary>
      <remarks>If the rightEigenvectors parameter of the Eigen class constructor is set to false, the right eigenvectors are not calculated and Eigenvector property returns a null reference (Nothing in Visual Basic).</remarks>
      <param name="index">An index specifying the eigenvector to return.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Eigen.Eigenvectors">
      <summary>Gets the right eigenvectors matrix.</summary>
      <remarks>If the rightEigenvectors parameter of the Eigen class constructor is set to false, the right eigenvectors are not calculated and the Eigenvectors property returns a null reference (Nothing in Visual Basic).</remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Eigen.LeftEigenvector(System.Int32)">
      <summary>Gets the specified left eigenvector.</summary>
      <remarks>If the leftEigenvectors parameter of the Eigen class constructor is set to false, the left eigenvectors are not calculated and the Eigenvector property returns a null reference (Nothing in Visual Basic).</remarks>
      <param name="index">An index specifying the eigenvector to return.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Eigen.LeftEigenvectors">
      <summary>Gets the left eigenvectors matrix.</summary>
      <remarks>If the leftEigenvectors parameter of the Eigen class constructor is set to false, the left eigenvectors are not calculated and the LeftEigenvectors property returns a null reference (Nothing in Visual Basic).</remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Eigen.Size">
      <summary>Gets the size of matrix that is represented by this eigen decomposition.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Eigen.Succeded">
      <summary>Indicates whether the eigenvalues-eigenvectors calculation succeeded to completion.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.IndexOutOfBoundsException">
      <summary>Thrown when an index used in a property or method points to an element not belonging to the matrix or to the vector.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.IndexOutOfBoundsException.#ctor">
      <summary>Creates an new instance of the IndexOutOfBoundsException class.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.IndexOutOfBoundsException.#ctor">
      <summary>Creates a new instance of the IndexOutOfBoundsException class with the default message.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.IndexOutOfBoundsException.#ctor(System.String)">
      <summary>Creates a new instance of the IndexOutOfBoundsException class with the specified message.</summary>
      <param name="message">A string containing the message describing the error.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.IndexOutOfBoundsException.#ctor(System.String,System.Exception)">
      <summary>Creates a new instance of the IndexOutOfBoundsException class with the specified message and inner exception.</summary>
      <param name="message">A string containing the message describing the error.</param>
      <param name="innerException">The inner Exception, if any, that threw the current exception.</param>
    </member>
    <member name="T:Bluebit.MatrixLibrary.InvalidSizeException">
      <summary>Thrown when a parameter specifying a dimension of a matrix or a vector is negative or greater than the maximum size defined by the effected license of the product.</summary>
      <remarks> This exception is thrown when trying to set a dimension of a matrix or of a vector to a non-positive number. Trial editions of the library limit the maximum matrix and vector sizes. Trying to declare bigger matrices or vector will also result to this exception.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.InvalidSizeException.#ctor">
      <summary>Creates a new instance of the InvalidSizeException class.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.InvalidSizeException.#ctor">
      <summary>Creates a new instance of the InvalidSizeException class with the default message.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.InvalidSizeException.#ctor(System.String)">
      <summary>Creates a new instance of the InvalidSizeException class with the specified message.</summary>
      <param name="message">A string containing the message describing the error.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.InvalidSizeException.#ctor(System.String,System.Exception)">
      <summary>Creates a new instance of the InvalidSizeException class with the specified message and inner exception.</summary>
      <param name="message">A string containing the message describing the error.</param>
      <param name="innerException">The inner Exception, if any, that threw the current exception.</param>
    </member>
    <member name="T:Bluebit.MatrixLibrary.LQ">
      <summary>Represents an LQ factorization of a general real matrix.</summary>
      <remarks>The LQ class can be used to find the minimum-norm solution of an underdetermined least-squares problem.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.LQ.#ctor(Bluebit.MatrixLibrary.Matrix)">
      <summary>Initializes a new instance of the LQ class computing the LQ factorization of a general real matrix.</summary>
      <param name="matrix">A Matrix object containing the matrix to factor.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.LQ.Dispose">
      <summary>Releases all the resources used by the ShortParentItemName object.</summary>
      <remarks>Calling Dispose allows the resources used by this object to be reallocated for other purposes.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.LQ.Solve(Bluebit.MatrixLibrary.Matrix)">
      <summary>Solves an underdetermined system of linear equations using the LQ factorization of a real matrix.</summary>
      <returns>A Matrix object that contains the solution of the system of linear equations.</returns>
      <remarks> The Solve method finds a solution to the system of linear equations A*X = B where: A denotes the real matrix that has been previously factored (represented now by its LQ factorization). B is the matrix whose columns contain the right hand terms. X is the solution matrix that is to be computed. The system can be solved with multiple right-hand sides stored in the columns of the matrix B. The columns of X are the minimum norm solution vectors. </remarks>
      <param name="rightHands">A Matrix object containing the right-hand sides for the system of linear equations.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.LQ.Cols">
      <summary>Gets the number of columns of the matrix that is represented by the factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.LQ.L">
      <summary>Gets the factor L, the lower triangular matrix of the LQ factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.LQ.Q">
      <summary>Gets the factor Q, the orthogonal matrix of the LQ factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.LQ.Rows">
      <summary>Gets the number of rows of the matrix that is represented by the factorization.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.LU">
      <summary>Represents an LU factorization of a general real matrix.</summary>
      <remarks> The LU factorization of a general m by n matrix is formed as A = P*L*U where P is a permutation matrix, L is lower triangular with unit diagonal elements (lower trapezoidal if m&gt;n) and U is upper triangular (upper trapezoidal if m&lt;n). The LU class can be used to solve systems of linear equations and to calculate the inverse of a matrix. </remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.LU.#ctor(Bluebit.MatrixLibrary.Matrix)">
      <summary>Initializes a new instance of the LU class computing the LU factorization of a general complex matrix.</summary>
      <remarks>LU constructor never fails. The IsSingular property indicates whether the matrix has been found to be singular.</remarks>
      <param name="matrix">A Matrix object containing the matrix to factor.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.LU.Determinant">
      <summary>Returns the determinant of a square real matrix using its LU factorization.</summary>
      <returns>A double that equals to the determinant of the matrix.</returns>
      <remarks>Determinant can be calculated only for a square matrix.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.LU.Dispose">
      <summary>Releases all the resources used by the ShortParentItemName object.</summary>
      <remarks>Calling Dispose allows the resources used by this object to be reallocated for other purposes.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.LU.GetPivots">
      <summary>Gets an array of integers containing the pivot indices.</summary>
      <remarks> If Pivots() is the array returned from GetPivots method, then Pivots(i) = k denotes that during factorization row k has moved to row i. The array that is returned from GetPivots property can be used as a parameter in ReorderRows method in order to reconstruct the original matrix. This has the same effect as multiplying by the P matrix but it executes faster.</remarks>
      <returns>An array of type integer.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.LU.Inverse">
      <summary>Returns the inverse of a square real matrix using its LU factorization.</summary>
      <returns>A Matrix object containing the inverse of the factored matrix.</returns>
      <remarks>Matrix inverse can be calculated only for a square non-singular matrix. The IsSinular property can be used to check if the factored matrix is singular before attempting to execute the Inverse method.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.LU.Solve(Bluebit.MatrixLibrary.Matrix)">
      <summary>Solves a system of linear equations with multiple right hands using the LU factorization of a general real matrix.</summary>
      <returns>A Matrix object that contains the solution of the system of linear equations.</returns>
      <remarks> The Solve method finds the solution to the system of linear equations A*X = B where: A denotes the real square matrix that has been previously factored (represented now by its LU factorization). B denotes the matrix whose columns contain the right hand terms. X denotes the solution matrix that is to be computed. The system can be solved with multiple right-hand sides stored in the columns of the matrix B.</remarks>
      <param name="rightHands">A Matrix object containing the right-hand sides for the system of linear equations.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.LU.Cols">
      <summary>Gets the number of columns of the matrix that is represented by the factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.LU.IsSingular">
      <summary>Gets a Boolean value indicating whether the LU factorization represents a singular matrix.</summary>
      <remarks>Use IsSingular property to check for matrix singularity, just before attempting to use the Inverse or Solve methods.</remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.LU.L">
      <summary>Gets the L factor, the lower triangular part of the LU factorization.</summary>
      <remarks>The LU factorization of a general m by n matrix is formed as A = P*L*U where P is a permutation matrix, L is lower triangular with unit diagonal elements (lower trapezoidal if m&gt;n) and U is upper triangular (upper trapezoidal if m&lt;n).</remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.LU.P">
      <summary>Gets the P factor, the permutation matrix of the LU factorization.</summary>
      <remarks>The LU factorization of a general m by n matrix is formed as A = P*L*U where P is a permutation matrix, L is lower triangular with unit diagonal elements (lower trapezoidal if m&gt;n) and U is upper triangular (upper trapezoidal if m&lt;n).</remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.LU.Rows">
      <summary>Gets the number of rows of the matrix that is represented by the factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.LU.U">
      <summary>Gets the U factor, the upper triangular part of the LU factorization.</summary>
      <remarks>The LU factorization of a general m by n matrix is formed as A = P*L*U where P is a permutation matrix, L is lower triangular with unit diagonal elements (lower trapezoidal if m&gt;n) and U is upper triangular (upper trapezoidal if m&lt;n).</remarks>
    </member>
    <member name="T:Bluebit.MatrixLibrary.Matrix">
      <summary>Represents a matrix having as elements double floating point numbers.</summary>
      <remarks>Matrix class is used as to represent a general matrix with real number elements. Its methods can be used to perform matrix operations and data manipulation.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.#ctor">
      <summary>Initializes a new instance of the Matrix class.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.#ctor">
      <summary>Initializes a new instance of the Matrix class creating a real 3x3 matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.#ctor(System.Double[],System.Int32,System.Int32,Bluebit.MatrixLibrary.StorageOrder)">
      <summary>Initializes a new instance of the Matrix class using the content of a one-dimensional array, specifying the size of the created matrix, and the storage order.</summary>
      <param name="array">The array of type double whose content will be used to initialize the elements of the newly created Matrix object.</param>
      <param name="rows">An integer specifying the number of rows of the new Matrix object.</param>
      <param name="cols">An integer specifying the number of columns of the new Matrix object.</param>
      <param name="order">A StorageOrder enumeration specifying the order in which the array values will be used to initialize the matrix elements.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of the Matrix class specifying the number of rows and columns of the newly created matrix.</summary>
      <param name="rows">The number of rows of the new Matrix object.</param>
      <param name="cols">The number of columns of the new Matrix object.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.#ctor(System.Double[,],System.Int32,System.Int32)">
      <summary> Initializes a new instance of the Matrix class using the content of a two-dimensional array, specifying the size of the created matrix.</summary>
      <remarks>If array is bigger than the specified matrix, the extra values are ignored; if it is smaller the rest of the matrix elements are filled with zero values.</remarks>
      <param name="array">The array of type double whose content will be used to initialize the elements of the newly created Matrix object.</param>
      <param name="rows">An integer specifying the number of rows of the new Matrix object.An integer specifying the number of rows of the new Matrix object.</param>
      <param name="cols">An integer specifying the number of columns of the new Matrix object.An integer specifying the number of columns of the new Matrix object.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.#ctor(System.Double[,]">
      <summary> Initializes a new instance of the Matrix class using the content of a two-dimensional array.</summary>
      <remarks>If array is bigger than the specified matrix, the extra values are ignored; if it is smaller the rest of the matrix elements are filled with zero values.</remarks>
      <param name="array">The array of type double whose content will be used to initialize the elements of the newly created Matrix object.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.#ctor(System.Int32,System.Int32,System.Double)">
      <summary>Initializes a new instance of the Matrix class specifying the number of rows and columns of the newly created matrix, initializing its diagonal elements to the specified double value.</summary>
      <param name="rows">The number of rows of the new Matrix object.</param>
      <param name="cols">The number of columns of the new Matrix object.</param>
      <param name="diagonal">The double value that will be used to initialize the diagonal elements of the matrix.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.#ctor(Bluebit.MatrixLibrary.Matrix)">
      <summary>Initializes a new instance of the Matrix class copying the content of an existing matrix.</summary>
      <remarks>This is the copy constructor of the Matrix class.</remarks>
      <param name="matrix">The Matrix object whose elements will by copied into the newly created matrix.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Add(Bluebit.MatrixLibrary.Matrix,Bluebit.MatrixLibrary.Matrix)">
      <summary>Adds two matrices.</summary>
      <returns>A Matrix object that represents the result of the addition.</returns>
      <remarks>The Add method is an alias for the Addition operator.</remarks>
      <param name="A">A Matrix instance on the left side of the addition operator.</param>
      <param name="B">A Matrix instance on the right side of the addition operator.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ApplyFunction">
      <summary>Returns a new Matrix object, whose elements are the result of applying the specified double function to the elements of this matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ApplyFunction(Bluebit.MatrixLibrary.DoubleFunction1Dbl)">
      <summary>Returns a new Matrix object, whose elements are the result of applying the specified function to the elements of this matrix.</summary>
      <remarks> The elements of this matrix are passed one by one as parameters to the function that is represented by the delegate. The returned values from this function are used to initialize the elements of the newly created Matrix object.</remarks>
      <returns>A new Matrix object with the same size as this matrix, whose elements are the results of applying the specified function to the elements of this matrix.</returns>
      <param name="function">A delegate to a function that takes one double parameter and returns a double.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ApplyFunction(Bluebit.MatrixLibrary.DoubleFunction2Dbl,System.Double)">
      <summary>Returns a new Matrix object, whose elements are the result of applying the specified function to the elements of this matrix.</summary>
      <returns>A new Matrix object with the same size as this matrix, whose elements are the results of applying the specified function to the elements of this matrix.</returns>
      <remarks> The elements of this matrix are passed one by one as the first parameter to the function that is represented by the delegate; the value2 is passed to the second parameter. The returned values from this function are used to initialize the elements of the newly created Matrix object.</remarks>
      <param name="function">A delegate to a function that takes as its first parameter a double, as a second parameter an integer and returns a double.</param>
      <param name="value2">The double value that will be passed to the second parameter of the function represented by the delegate.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ApplyFunction(Bluebit.MatrixLibrary.DoubleFunction1Dbl1Int,System.Int32)">
      <summary>Returns a new Matrix object, whose elements are the result of applying the specified function to the elements of this matrix.</summary>
      <remarks>The elements of this matrix are passed one by one as the first parameter to the function that is represented by the delegate; the value is passed to the second parameter. The returned values from this function are used to initialize the elements of the newly created Matrix object.</remarks>
      <returns>A new Matrix object with the same size as this matrix, whose elements are the results of applying the specified function to the elements of this matrix.</returns>
      <param name="function">A delegate to a function that takes as its first parameter a double, as a second parameter an integer and returns a double.</param>
      <param name="value">The integer value that will be passed to the second parameter of the function represented by the delegate.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ApplyFunction(Bluebit.MatrixLibrary.DoubleFunction1Dbl2Int)">
      <summary>Returns a new Matrix object, whose elements are the result of applying the specified function to the elements of this matrix.</summary>
      <returns>A new Matrix object with the same size as this matrix, whose elements are the results of applying the specified function to the elements of this matrix.</returns>
      <remarks> The elements of this matrix are passed one by one as the first parameter to the function that is represented by the delegate. The row and column number of each element are passed to the second and third parameter of the function respectively. The returned values from this function are used to initialize the elements of the newly created Matrix object.</remarks>
      <param name="function">A delegate to a function that takes as first parameter a double, as a second and third parameter an integer and returns a double.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ApplyFunction(Bluebit.MatrixLibrary.DoubleFunction2Dbl2Int,System.Double)">
      <summary>Returns a new Matrix object, whose elements are the result of applying the specified function to the elements of this matrix.</summary>
      <returns>A new Matrix object with the same size as this matrix, whose elements are the results of applying the specified function to the elements of this matrix.</returns>
      <remarks> The elements of this matrix are passed one by one as the first parameter to the function that is represented by the delegate; the value2 is passed to the second parameter. The returned values from this function are used to initialize the elements of the newly created Matrix object.</remarks>
      <param name="function">A delegate to a function that takes as its first and second parameter a double, as its third and fourth parameter an integer and returns a double.</param>
      <param name="value2">The double value that will be passed to the second parameter of the function represented by the delegate.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Clear">
      <summary>Sets the value of all the Matrix elements to zero.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Clone">
      <summary>Creates a duplicate of this Matrix object.</summary>
      <returns>A new Matrix object that contains the same data as this.</returns>
      <remarks>A deep copy is created. Each Matrix object references different data.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ColCorrelation(System.Int32,System.Int32)">
      <summary>Returns the correlation coefficient between two columns of the current matrix.</summary>
      <returns>A double that equals to the correlation coefficient between the two columns.</returns>
      <param name="col1">An integer specifying the first column.</param>
      <param name="col2">An integer specifying the second column.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ColCovariance(System.Int32,System.Int32)">
      <summary>Returns the covariance between two columns of the current matrix.</summary>
      <returns>A double that equals to the covariance between the two columns.</returns>
      <param name="col1">An integer specifying the first column.</param>
      <param name="col2">An integer specifying the second column.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ColsDotProduct(System.Int32,System.Int32)">
      <summary>Returns the dot product between two columns of the Matrix object.</summary>
      <returns>A double that equals to the dot product between two columns of the matrix.</returns>
      <remarks>If the same value is used for the col1, col2 parameters then the value returned is the sum of squares of the specified column's elements.</remarks>
      <param name="col1">An integer specifying the first column.</param>
      <param name="col2">An integer specifying the first column.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ColSum(System.Int32)">
      <summary>Returns the sum of the elements of the specified column.</summary>
      <returns>A double equal to the sum of the specified column.</returns>
      <param name="colIndex">An integer specifying the column to be summed.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ColVector(System.Int32)">
      <summary>Returns a new Vector object using the specified matrix column.</summary>
      <returns>A new Vector object containing the elements of the specified column.</returns>
      <remarks>A deep copy of the data is created. The Vector object references its own data.</remarks>
      <param name="col">An integer specifying the column to use.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Concatenate">
      <summary>Concatenates matrices.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Concatenate(Bluebit.MatrixLibrary.Matrix,Bluebit.MatrixLibrary.Matrix,Bluebit.MatrixLibrary.ConcatenateMode)">
      <summary>Concatenates two matrices horizontally or vertically.</summary>
      <returns>A Matrix object representing the concatenation of the two matrices.</returns>
      <param name="A">A Matrix instance representing the first matrix.</param>
      <param name="B">A Matrix instance representing the first matrix.</param>
      <param name="mode">A ConcatenateMode parameter indicating horizontal or vertical concatenation.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Concatenate(Bluebit.MatrixLibrary.Matrix,Bluebit.MatrixLibrary.Matrix)">
      <summary>Concatenates two matrices horizontally.</summary>
      <param name="A">A Matrix instance representing the first matrix.</param>
      <param name="B">A Matrix instance representing the first matrix.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.CorrelationMatrix">
      <summary>Returns a matrix containing the correlation coefficients between the columns of the current matrix.</summary>
      <returns>A Matrix object having as elements the correlation coefficients between the columns of the current matrix.</returns>
      <remarks>The element (i, j) of the correlation matrix is the correlation between column i and j. The correlation matrix is symmetric and its diagonal elements are equal to 1.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.CovarianceMatrix">
      <summary>Returns a matrix containing the covariances between the columns of the current matrix.</summary>
      <returns>A Matrix object having as elements the covariances between the columns of the current matrix.</returns>
      <remarks>The element (i, j) of the correlation matrix is the covariance between column i and j. The covariance matrix is symmetric.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.DeleteColumn(System.Int32)">
      <summary>Deletes a column of the current matrix.</summary>
      <param name="column">Specifies the column for deletion.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.DeleteRow(System.Int32)">
      <summary>Deletes a row of the current matrix.</summary>
      <param name="row">Specifies the row for deletion.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Determinant">
      <summary>Returns the value of the computed matrix determinant.</summary>
      <remarks>Determinant can be calculated only for a square matrix.</remarks>
      <returns>A double value that equals to the matrix determinant.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Diagonal">
      <summary>Returns a Vector object containing the main diagonal of the current matrix.</summary>
      <returns>A Vector object containing the elements of the main diagonal.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Dispose">
      <summary>Releases all the resources used by the ShortParentItemName object.</summary>
      <remarks>Calling Dispose allows the resources used by this object to be reallocated for other purposes.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Divide">
      <summary>Performs matrix right division.Performs matrix division.</summary>
      <returns>A CMatrix object that represents the result of the matrix right division.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Divide(System.Double,Bluebit.MatrixLibrary.Matrix)">
      <summary>Performs scalar-matrix division.</summary>
      <returns>A Matrix object that represents the result of the scalar-matrix division.</returns>
      <param name="alpha">A double on the left side of the division operator.</param>
      <param name="A">A Matrix instance on the right side of the division operator.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Divide(Bluebit.MatrixLibrary.Matrix,System.Double)">
      <summary>Performs matrix-scalar division.</summary>
      <returns>A Matrix object that represents the result of the matrix-scalar division.</returns>
      <param name="A">A Matrix instance on the left side of the division operator.</param>
      <param name="alpha">A double on the right side of the division operator.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Divide(Bluebit.MatrixLibrary.Matrix,Bluebit.MatrixLibrary.Matrix)">
      <summary>Performs matrix right division</summary>
      <remarks> The Divide method is an alias for the Division operator. X = B / A then X is the solution of the equation X*A = B.</remarks>
      <returns>A Matrix object that represents the result of the matrix division.</returns>
      <param name="A">A Matrix instance on the left side of the division operator.</param>
      <param name="B">A Matrix instance on the right side of the division operator.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Equals(System.Object)">
      <summary>Returns a value indicating whether this Matrix object is equal to another matrix.</summary>
      <returns>true if obj is an instance of the Matrix class and represents a matrix that has the same size as this instance and also all the elements of obj are equal to the elements of this instance; false otherwise.</returns>
      <remarks> The elements of this matrix and obj are compared with the == operator end they must be exactly equal in order for this method to return true. If you need to test if elements of two matrices are equal within a specified tolerance use the IsEqual method.</remarks>
      <param name="obj">An object to compare with this instance of the Matrix class.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.FillRandom">
      <summary>Fills Matrix object with random values.</summary>
      <remarks>Use FillRandom method in order to quickly fill matrix with random values, while coding, testing and debugging your application.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.FillRandom">
      <summary>Fills the Matrix object with random values ranging from 0 to 10, rounded to zero decimal places.</summary>
      <remarks>Use FillRandom method in order to quickly fill the matrix with random values, while coding, testing and debugging your application.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.FillRandom(System.Double,System.Double)">
      <summary>Fills the Matrix object with random values ranging from lower to upper bound, rounded to 0 decimal places.</summary>
      <remarks>Use FillRandom method in order to quickly fill the matrix with random values, while coding, testing and debugging your application.</remarks>
      <param name="lowerBound">A double specifying the lower limit of the random values that will be used.</param>
      <param name="upperBound">A double specifying the upper limit of the random values that will be used.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.FillRandom(System.Double,System.Double,System.Int32)">
      <summary>Fills the Matrix object with random values ranging from lower bound to upper bound, rounded to the specified number of decimal places.</summary>
      <remarks>Use FillRandom method in order to quickly fill the matrix with random values, while coding, testing and debugging your application.</remarks>
      <param name="lowerBound">A double specifying the lower limit of the random values that will be used.</param>
      <param name="upperBound">A double specifying the upper limit of the random values that will be used.</param>
      <param name="decimals">An integer specifying the number of decimal places to which random values will be rounded to.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.GetHashCode">
      <summary>Returns the hash code of the current ShortParentItemName.</summary>
      <returns>A 32-bit signed integer that represents the hash code.</returns>
      <remarks>This method overrides Object.GetHashCode and generates the same hash code for two objects that are equal according to the Equals method.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implements the ISerializable interface and returns the data needed to serialize the Matrix class.</summary>
      <remarks>This method implements the ISerializable interface.</remarks>
      <param name="info">A SerializationInfo object.</param>
      <param name="context">A StreamingContext structure.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.HadamardProduct(Bluebit.MatrixLibrary.Matrix,Bluebit.MatrixLibrary.Matrix)">
      <summary>Returns the Hadamard product of two matrices.</summary>
      <returns>A Matrix object representing the Hadamard product.</returns>
      <param name="A">A Matrix object representing the first matrix.</param>
      <param name="B">A Matrix object representing the second matrix.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.HasINFs">
      <summary>Returns a value indicating whether the current matrix contains any elements that evaluate to negative or positive infinity..</summary>
      <returns>true if any of the matrix elements evaluates to negative or positive infinity; otherwise false.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.HasNaNs">
      <summary>Returns a value indicating whether the current matrix contains any elements that evaluate to NaN values.</summary>
      <returns>true if any of the matrix elements evaluates to a NaN value; otherwise false.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.InsertColumn(System.Int32)">
      <summary>Inserts a column in the current matrix at the specified position.</summary>
      <param name="index">Specifies the position of the inserted column.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.InsertRow(System.Int32)">
      <summary>Inserts a row in the current matrix at the specified position.</summary>
      <param name="index">Specifies the position of the inserted row.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Inverse">
      <summary>Computes the inverse of the matrix and returns a reference to it.</summary>
      <returns>A Matrix object representing the inverse of the current matrix.</returns>
      <remarks> Use Inverse method with error handling to trap errors arising from the matrix being a singular matrix. An alternative method for computing the matrix inverse is to use the LU object. The LU object can then be reused for further computations as solving systems of linear equations.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.IsEqual">
      <summary>Returns a value indicating whether this Matrix is equal to another matrix within a tolerance.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.IsEqual(Bluebit.MatrixLibrary.Matrix)">
      <summary>Returns a value indicating whether this Matrix is equal to another matrix within a default tolerance.</summary>
      <returns>true if matrix has the same size as this instance and its elements are equal with the elements of this instance within the default tolerance; otherwise false.</returns>
      <remarks>The default tolerance equals to the maximum absolute value of matrix elements, multiplied by the double epsilon value (2.2204460492503131e-016).</remarks>
      <param name="A">A Matrix whose elements to compare with the elements of this Matrix.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.IsEqual(Bluebit.MatrixLibrary.Matrix,System.Double)">
      <summary>Returns a value indicating whether this Matrix is equal to another matrix within the specified tolerance.</summary>
      <returns>true if matrix has the same size as this instance and its elements are equal with the elements of this instance within the specified tolerance; otherwise false.</returns>
      <param name="A">A Matrix whose elements to compare with the elements of this Matrix.</param>
      <param name="tolerance">A double specifying the tolerance.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.IsFinite">
      <summary>Returns a value indicating whether the current matrix contains any elements that evaluate either to NaN value or to negative or positive infinity.</summary>
      <returns>true if all elements of the current matrix have a value other NaN, negative infinity, positive infinity; otherwise false.</returns>
      <remarks> Most of the internal routines expect that input matrices or vectors do not contain any negative infinity, positive infinity, or NaN values in order to perform flawlessly. If you suspect that the current matrix or vector may contain any NaN or infinity values, use the IsFinite method before any further processing.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.IsSymmetric">
      <summary>Returns a value indicating whether this matrix is symmetric.</summary>
      <returns>true if current matrix is found to be symmetric; otherwise false.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.IsSymmetric(System.Double)">
      <summary>Returns a value indicating whether this matrix is symmetric within the specified tolerance.</summary>
      <returns>true if current matrix is found to be symmetric; otherwise false.</returns>
      <param name="tolerance">To tolerance to be used when comparing matrix elements.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.IsSymmetric">
      <summary>Returns a value indicating whether this matrix is symmetric.</summary>
      <returns>true if current matrix is found to be symmetric; otherwise false.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.LDivide(Bluebit.MatrixLibrary.Matrix,Bluebit.MatrixLibrary.Matrix)">
      <summary>Performs matrix left division.</summary>
      <returns>A Matrix object that represents the result of the matrix left division.</returns>
      <remarks>Matrix.LDivide(A, B) is equivalent to A.Solve(B)</remarks>
      <param name="A">A Matrix instance on the left side of division operator.</param>
      <param name="B">A Matrix instance on the right side of division operator.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Multiply">
      <summary>Multiplies matrices.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Multiply(System.Double,Bluebit.MatrixLibrary.TransposeMode,Bluebit.MatrixLibrary.Matrix,Bluebit.MatrixLibrary.TransposeMode,Bluebit.MatrixLibrary.Matrix,System.Double,Bluebit.MatrixLibrary.Matrix)">
      <summary> Computes a scalar-matrix-matrix product and adds the result to a scalar-matrix product. The operation is defined as: C= alpha * op(A) * op(B) + beta *C</summary>
      <param name="alpha">A double scalar value.</param>
      <param name="transA">A TransposeMode enumeration specifying whether matrix A is transposed.</param>
      <param name="A">A Matrix object representing the first matrix.</param>
      <param name="transB">A TransposeMode enumeration specifying whether matrix B is transposed.</param>
      <param name="B">A Matrix object representing the second matrix.</param>
      <param name="beta">A double scalar value to multiply the matrix C with.</param>
      <param name="C">Matrix object which will contain the result.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Multiply(System.Double,Bluebit.MatrixLibrary.TransposeMode,Bluebit.MatrixLibrary.Matrix,Bluebit.MatrixLibrary.Vector,System.Double,Bluebit.MatrixLibrary.Vector)">
      <summary> Computes a scalar-matrix-vector product and adds the result to a scalar-vector product. The operation is defined as: y= alpha * op(A) * x + beta *y</summary>
      <param name="alpha">A double scalar value.</param>
      <param name="transA">A TransposeMode enumeration specifying whether matrix A is transposed.</param>
      <param name="A">A Matrix Class object representing the matrix to multiply.</param>
      <param name="x">A Vector Class object representing the vector x.</param>
      <param name="beta">A double scalar value to multiply the vector y with.</param>
      <param name="y">A Vector Class object which will contain the result.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Multiply(System.Double,Bluebit.MatrixLibrary.Matrix,Bluebit.MatrixLibrary.Matrix,System.Double,Bluebit.MatrixLibrary.Matrix)">
      <summary>Computes a scalar-matrix-matrix product and adds the result to a scalar-matrix product.</summary>
      <remarks> The operation performed by this method is defined as: D = alpha*A*B + beta*C </remarks>
      <param name="alpha">A double representing the scalar value of the scalar-matrix-matrix product.</param>
      <param name="A">A Matrix object representing the first matrix of the scalar-matrix-matrix product.</param>
      <param name="B">A Matrix object representing the second matrix of the scalar-matrix-matrix product.</param>
      <param name="beta">A double representing the scalar value of the scalar-matrix product.</param>
      <param name="C">A Matrix object representing the matrix of the scalar-matrix product.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Multiply(Bluebit.MatrixLibrary.Matrix,Bluebit.MatrixLibrary.Matrix)">
      <summary>Multiplies two matrices.</summary>
      <returns>A Matrix object that represents the result of the matrix multiplication.</returns>
      <remarks>The inner dimensions of the matrices being multiplied must agree; A must have as many columns as B has rows.</remarks>
      <param name="A">A Matrix instance on the left side of the multiplication operator.</param>
      <param name="B">A Matrix instance on the right side of the multiplication operator.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Multiply(Bluebit.MatrixLibrary.Vector,Bluebit.MatrixLibrary.Matrix)">
      <summary>Left multiplies a matrix with a vector.</summary>
      <returns>A Vector that represents the result of the vector-matrix multiplication.</returns>
      <param name="x">A Vector that represents the vector to multiply with.</param>
      <param name="A">A Matrix that represents the matrix to be multiplied.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Multiply(Bluebit.MatrixLibrary.Matrix,Bluebit.MatrixLibrary.Vector)">
      <summary>Multiplies a real matrix with a real vector.</summary>
      <returns>A CMatrix that represents the result of the matrix-vector multiplication.</returns>
      <remarks>The vector parameter is taken as a column vector.</remarks>
      <param name="A">A CMatrix object that represents the matrix to be multiplied.</param>
      <param name="x">A CVector object that represents the vector to multiply with.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Multiply(Bluebit.MatrixLibrary.Matrix,System.Double)">
      <summary>Returns the product of a scalar and a matrix.</summary>
      <returns>A Matrix object that represents the matrix - scalar product.</returns>
      <param name="A">A Matrix object that represents the matrix to be multiplied.</param>
      <param name="alpha">A double value that represents the scalar..</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Negate(Bluebit.MatrixLibrary.Matrix)">
      <summary>Returns the negation of the matrix.</summary>
      <returns>A Matrix object that represents the negate of the matrix.</returns>
      <remarks>This method is an alias for the unary negation operator.</remarks>
      <param name="matrix">The matrix to negate.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Norm(Bluebit.MatrixLibrary.NormType)">
      <summary>Returns the matrix norm.</summary>
      <returns>A double value representing the specified norm.</returns>
      <remarks> The following table lists all possible values for the type parameter and the types of norm that can be calculated. Member Description FrobeniusNorm Frobenius norm of the matrix (square root of sum of squares). InfinityNorm Infinity norm of the matrix (maximum row sum). OneNorm 1-norm of the matrix (maximum column sum). MaxAbsValue The element of largest absolute value of the matrix. </remarks>
      <param name="type">A NormType enumeration value that specifies the type of norm to be returned.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.NormalizeCols(Bluebit.MatrixLibrary.NormalizeMode)">
      <summary> Normalizes the columns of the current matrix according to the specified mode.</summary>
      <remarks> The following table lists the values of NormalizeMode enumeration and their effect on column normalization. Member Description MaximumOne Normalizes columns or rows so that their biggest element is 1. UnitLength Normalizes columns or rows so that they become unit length vectors (their sum of squares is 1). ZScores Normalizes columns or rows to zscores (values having zero mean and unit standard deviation). </remarks>
      <param name="mode">A NormalizeMode enumeration value indicating how the matrix columns will be normalized.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.NormalizeRows(Bluebit.MatrixLibrary.NormalizeMode)">
      <summary> Normalizes the rows of the current matrix according to the specified mode.</summary>
      <remarks> The following table lists the values of NormalizeMode enumeration and their effect on row normalization. Member Description MaximumOne Normalizes columns or rows so that their biggest element is 1. UnitLength Normalizes columns or rows so that they become unit length vectors (their sum of squares is 1). ZScores Normalizes columns or rows to zscores (values having zero mean and unit standard deviation). </remarks>
      <param name="mode">A NormalizeMode enumeration value indicating how the matrix rows will be normalized.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Plus(Bluebit.MatrixLibrary.Matrix)">
      <summary>Returns a copy of the matrix.</summary>
      <returns>A Matrix object which is the copy of matrix.</returns>
      <param name="matrix">A Matrix object.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.PseudoInverse">
      <summary>Returns the Moore-Penrose inverse (pseudoinverse) of the matrix.</summary>
      <returns>A Matrix object representing the Moore-Penrose inverse (pseudoinverse) of this matrix.A Matrix object representing the Moore-Penrose inverse (pseudoinverse) of this matrix.</returns>
      <remarks> If A+ is the Moore-Penrose inverse (pseudoinverse) of matrix A then it satisfies the following four conditions: A*A+*A = A A+*A*A+ =A+ (A*A+)T = A*A+ (A+*A)T =A+*A </remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.PseudoInverse">
      <summary>Returns the Moore-Penrose inverse (pseudoinverse) of the matrix.</summary>
      <returns>A Matrix object representing the Moore-Penrose inverse (pseudoinverse) of this matrix.</returns>
      <remarks> If A+ is the Moore-Penrose inverse (pseudoinverse) of matrix A then it satisfies the following four conditions: A*A+*A = A A+*A*A+ = A+ (A*A+)T = A*A+ (A+*A)T = A+*A </remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.PseudoInverse(System.Double)">
      <summary>Returns the Moore-Penrose inverse (pseudoinverse) of the matrix.</summary>
      <remarks> Singular value decomposition is used for the calculation of the pseudoinverse. Roundoff errors can lead to a singular value not being exactly zero even if it should be. tolerance parameter places a threshold when comparing singular values with zero and improves the numerical stability of the method with singular or near-singular matrices. If A+ is the Moore-Penrose inverse (pseudoinverse) of matrix A then it satisfies the following four conditions: A*A+*A = A A+*A*A+ = A+ (A*A+)T = A*A+ (A+*A)T = A+*A </remarks>
      <returns>A Matrix object representing the Moore-Penrose inverse (pseudoinverse) of this matrix.</returns>
      <param name="tolerance">A double specifying the value under which the singular values of the matrix are considered to be zero.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Rank">
      <summary>Returns the matrix rank.</summary>
      <remarks>The matrix rank is defined as the number of its nonzero singular values.</remarks>
      <returns>An integer value representing the matrix rank.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ReorderCols(System.Int32[])">
      <summary>Reorders matrix columns according to the specified order.</summary>
      <remarks> pivots[i] = k denotes that column i should be moved to position k.</remarks>
      <param name="pivots">An array of integers containing the column dispositions.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ReorderRows(System.Int32[])">
      <summary>Reorders matrix rows according to the specified order.</summary>
      <remarks> pivots[i] = k denotes that row i should be moved to position k.</remarks>
      <param name="pivots">An array of integers containing the row dispositions.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Resize(System.Int32,System.Int32)">
      <summary>Resizes matrix preserving its content.</summary>
      <remarks>If new dimensions are smaller the matrix is truncated; if bigger then zeros are added.</remarks>
      <param name="rows">An integer specifying the new number of rows.</param>
      <param name="cols">An integer specifying the new number of columns.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.RowsDotProduct(System.Int32,System.Int32)">
      <summary>Returns the dot product between two rows of the Matrix object.</summary>
      <returns>A double that equals to the dot product between two rows of the matrix.</returns>
      <remarks>If the same value is used for the row1, row2 parameters then the value returned is the sum of squares of the specified rows's elements.</remarks>
      <param name="row1">An integer specifying the first row.</param>
      <param name="row2">An integer specifying the second row.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.RowSum(System.Int32)">
      <summary>Returns the sum of the elements of the specified row.</summary>
      <returns>A double equal to the sum of the specified row.</returns>
      <param name="rowIndex">An integer specifying the row to be summed.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.RowVector(System.Int32)">
      <summary>Returns a new Vector object using the specified matrix row.</summary>
      <returns>A new Vector object containing the elements of the specified row.</returns>
      <remarks>A deep copy of the data is created. The Vector object references its own data.</remarks>
      <param name="row">An integer specifying the column to return as a Vector object.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SetColumn">
      <summary>Sets the elements of a matrix column to specified value(s).</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SetColumn(System.Int32,Bluebit.MatrixLibrary.Vector)">
      <summary>Sets all elements of a matrix column using the contents on a vector.</summary>
      <param name="col">An integer specifying the column.</param>
      <param name="x">A Vector whose content will be used to set the elements of the specified column.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SetColumn(System.Int32,System.Double[])">
      <summary>Sets all elements of a matrix column using the content on an array.</summary>
      <param name="col">An integer specifying the column.</param>
      <param name="values">An array of type double whose content will be used to set the elements of the specified column.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SetColumn(System.Int32,System.Double,System.Double)">
      <summary>Sets all elements of a matrix column to incremental values.</summary>
      <param name="col">An integer specifying the column.</param>
      <param name="start">A double specifying a value for the first element of the column.</param>
      <param name="step">A double to be added to each successive element of the column.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SetColumn(System.Int32,System.Double)">
      <summary>Sets all elements of a matrix column to the specified value.</summary>
      <param name="col">An integer specifying the column.</param>
      <param name="value">A complex that will be used to set all elements of the specified column.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SetRow">
      <summary>Sets the elements of a matrix column to specified value(s).</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SetRow(System.Int32,Bluebit.MatrixLibrary.Vector)">
      <summary>Sets all elements of a matrix row using the contents on a vector.</summary>
      <param name="row">An integer specifying the row.</param>
      <param name="x">A Vector whose content will be used to set the elements of the specified row.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SetRow(System.Int32,System.Double[])">
      <summary>Sets all elements of a matrix row using the content on an array.</summary>
      <param name="row">An integer specifying the row.</param>
      <param name="values">An array of type double whose content will be used to set the elements of the specified row.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SetRow(System.Int32,System.Double,System.Double)">
      <summary>Sets all elements of a matrix row to incremental values.</summary>
      <param name="row">An integer specifying the row.</param>
      <param name="start">A double specifying a value for the first element of the row.</param>
      <param name="step">A double to be added to each successive element of the row.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SetRow(System.Int32,System.Double)">
      <summary>Sets all elements of a matrix row to the specified value.</summary>
      <param name="row">An integer specifying the row.</param>
      <param name="value">A complex that will be used to set all elements of the specified row.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Solve(Bluebit.MatrixLibrary.Matrix)">
      <summary>Solves a system of linear equations.</summary>
      <returns>A Matrix object that contains the solution of the system of linear equations.</returns>
      <remarks> The Solve method finds the solution to the system of linear equations A*X = B where: A denotes the current matrix. B denotes the matrix whose columns contain the right hand terms (rightHands parameter). X denotes the solution matrix that is to be computed and will be returned be the method. The system can be solved with multiple right-hand sides stored in the columns of the matrix B. rightHands matrix must have the same number of rows as current matrix. If current matrix is a mxn matrix then the following operations are used: If m=n then LU factorization is used to solve the system. If matrix is found to be singular then LQ factorization is used to solve it as an underdetermined system. If m&lt;n then LQ factorization is used to compute the minimum norm solution for the underdetermined system. If m&gt;n then QR factorization is used to compute a least squares solution for the overdetermined system. </remarks>
      <param name="rightHands">A Matrix object containing the right-hand sides for the system of linear equations.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SortCols">
      <summary>Sorts the columns of the current matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SortCols">
      <summary>Sorts the columns of the current matrix by the elements of its first row in ascending order.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SortCols(System.Int32)">
      <summary>Sorts the columns of the current matrix by the elements of the specified row in ascending order.</summary>
      <param name="row">An integer specifying the row by which to sort the matrix columns.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SortCols(System.Int32,Bluebit.MatrixLibrary.SortOrder)">
      <summary>Sorts the columns of the current matrix by the elements of the specified row in ascending or descending order.</summary>
      <param name="row">An integer specifying the row by which to sort the matrix columns.</param>
      <param name="order">A SortOrder enumeration value specifying ascending or descending order.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SortCols(System.Int32,Bluebit.MatrixLibrary.SortOrder,System.Int32[]@)">
      <summary>Sorts the columns of the current matrix by the elements of the specified row in ascending or descending order and returns the columns' dispositions.</summary>
      <remarks>pivots parameter can be used with ReorderCols or RecorderRows methods in order to synchronize other matrices with this matrix after sorting.</remarks>
      <param name="row">An integer specifying the row by which to sort the matrix columns.</param>
      <param name="order">A SortOrder enumeration value specifying ascending or descending order.</param>
      <param name="pivots">An array of integer values that records the columns' dispositions.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SortRows">
      <summary>Sorts the rows of the current matrix by the elements of its first column in ascending order.Sorts the rows of the current matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SortRows">
      <summary>Sorts the rows of the current matrix by the elements of its first column in ascending order.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SortRows(System.Int32)">
      <summary>Sorts the rows of the current matrix by the elements of the specified column in ascending order.</summary>
      <param name="col">An integer specifying the column by which to sort the matrix row.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SortRows(System.Int32,Bluebit.MatrixLibrary.SortOrder)">
      <summary>Sorts the rows of the current matrix by the elements of the specified column in ascending or descending order.</summary>
      <param name="col">An integer specifying the column by which to sort the matrix row.</param>
      <param name="order">A SortOrder enumeration value specifying ascending or descending order.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SortRows(System.Int32,Bluebit.MatrixLibrary.SortOrder,System.Int32[]@)">
      <summary>Sorts the rows of the current matrix by the elements of the specified column in ascending or descending order and returns the rows' dispositions</summary>
      <remarks>The following example uses the SortRows method to sort a matrix and then synchronizes a second matrix using the ReorderRows method.</remarks>
      <param name="col">An integer specifying the column by which to sort the matrix row.</param>
      <param name="order">A SortOrder enumeration value specifying ascending or descending order.</param>
      <param name="pivots">An array of integer values that records the rows' dispositions.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SubMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Returns a subset of the current matrix.</summary>
      <returns>A Matrix instance that contains the subset of current matrix.</returns>
      <remarks>If endRow is greater than startRow then the returned matrix is flipped horizontally. The same way if endCol is greater than startCol, then it is flipped vertically.</remarks>
      <param name="startRow">An integer specifying the first row to include.</param>
      <param name="endRow">An integer specifying the last row to include.</param>
      <param name="startCol">An integer specifying the first column to include.</param>
      <param name="endCol">An integer specifying the last column to include.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Subtract(Bluebit.MatrixLibrary.Matrix,Bluebit.MatrixLibrary.Matrix)">
      <summary>Subtracts a matrix from another matrix.</summary>
      <returns>A Matrix object that represents the result of the subtraction.</returns>
      <remarks>The Subtract method is an alias for the subtraction operator.</remarks>
      <param name="A">A Matrix instance on the left side of the subtraction operator.</param>
      <param name="B">A Matrix instance on the right side of the subtraction operator.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SwapCols(System.Int32,System.Int32)">
      <summary>Swaps two matrix columns.</summary>
      <param name="col1">An integer specifying the first column to swap.</param>
      <param name="col2">An integer specifying the second column to swap.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SwapRows(System.Int32,System.Int32)">
      <summary>Swaps two matrix rows.</summary>
      <param name="row1">An integer specifying the first row to swap.</param>
      <param name="row2">An integer specifying the second row to swap.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Times">
      <summary>Multiplies the current matrix and returns the result.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Times(Bluebit.MatrixLibrary.Matrix)">
      <summary> Multiplies the current matrix by another matrix and returns the result.</summary>
      <returns>A Matrix object that represents the result of the multiplication.</returns>
      <remarks>The inner dimensions of the matrices being multiplied must agree; matrix must have as rows as current matrix has columns.</remarks>
      <param name="A">A Matrix object by which to multiply the current matrix.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Times(Bluebit.MatrixLibrary.Vector)">
      <summary>Multiplies the current matrix by a vector and returns the result.</summary>
      <returns>A Matrix that represents the result of the matrix-vector multiplication.</returns>
      <remarks>The vector parameter is taken as a column vector.</remarks>
      <param name="x">A Vector object that represents the vector to multiply the current matrix with.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Times(System.Double)">
      <summary>Multiplies the current matrix by a scalar value and returns the result.</summary>
      <returns>A Matrix object that represents the result of the matrix-scalar multiplication.</returns>
      <param name="alpha">A double by which to multiply the current matrix.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ToArray">
      <summary>Converts current matrix to an array.</summary>
      <returns>An two-dimensional array of type double containing the elements of the current matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ToCMatrix">
      <summary>Converts the current Matrix to a CMatrix object.</summary>
      <returns>A CMatrix object that contains the same values as the current Matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ToString">
      <summary>Converts this instance of Matrix to a formatted string.</summary>
      <returns>A formatted string containing all matrix elements.</returns>
      <remarks>The "F3" format string is used to format each matrix element. A space character is used as a separator of matrix elements. The right and left borders are set to "| " and " |" strings respectively. The new line character "\n" is added after each matrix row.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ToString">
      <summary>Converts this instance of Matrix to a formatted string using the default values for format string, separator, left and right borders, and end of line characters.</summary>
      <returns>A formatted string containing all matrix elements.</returns>
      <remarks>The "F3" format string is used to format each matrix element. A space character is used as a separator of matrix elements. The right and left borders are set to "| " and " |" strings respectively. The new line character "\n" is added after each matrix row.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ToString(System.String)">
      <summary>Converts this instance of Matrix to a formatted string specifying a format string, and using the the default values for separator, left and right borders, and end of line characters.</summary>
      <remarks>A space character is used as a separator of matrix elements. The left and right borders are set to "| " and " |" strings respectively. The new line character "\n" is added after each matrix row.</remarks>
      <returns>A formatted string containing all matrix elements.</returns>
      <param name="format">A format string that will be used to convert all matrix elements.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ToString(System.String,System.String)">
      <summary>Converts this instance of Matrix to a formatted string specifying a format string, and a separator and using the default values for left and right borders and end of line characters.</summary>
      <returns>A formatted string containing all matrix elements.</returns>
      <remarks>The left and right borders are set to "| " and " |" strings respectively. The new line character "\n" is added after each matrix row.</remarks>
      <param name="format">A format string that will be used to convert all matrix elements.</param>
      <param name="separator">A string that will be used to separate matrix elements.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ToString(System.String,System.String,System.String,System.String,System.String)">
      <summary>Converts this instance of Matrix to a formatted string specifying a format string, a separator, left and right borders and end of line characters.</summary>
      <returns>A formatted string containing all matrix elements.</returns>
      <param name="format">A format string that will be used to convert all matrix elements.</param>
      <param name="separator">A string that will be used to separate matrix elements.</param>
      <param name="leftBorder">A string that will be added at the beginning of each matrix row.</param>
      <param name="rightBorder">A string that will be added at the end of each matrix row.</param>
      <param name="endMatrix">A string that will be added at the end of the matrix.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ToString(System.IFormatProvider,System.String)">
      <summary>Converts this instance of Matrix to a formatted string specifying culture-specific format information and a format string.</summary>
      <returns>A formatted string containing all matrix elements.</returns>
      <param name="provider"> An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="format">A format string that will be used to convert all matrix elements.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ToString(System.IFormatProvider,System.String,System.String,System.String,System.String,System.String)">
      <summary>Converts this instance of Matrix to a formatted string specifying culture-specific format information, a format string, a separator, left and right borders and end of line characters.</summary>
      <returns>A formatted string containing all matrix elements.</returns>
      <param name="provider"> An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="format">A format string that will be used to convert all matrix elements.</param>
      <param name="separator">A string that will be used to separate matrix elements.</param>
      <param name="leftBorder">A string that will be added at the beginning of each matrix row.</param>
      <param name="rightBorder">A string that will be added at the end of each matrix row.</param>
      <param name="endMatrix">A string that will be added at the end of the matrix.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Trace">
      <summary>Returns the sum of the elements of the main diagonal.</summary>
      <returns>A double value equal to matrix trace.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Transpose">
      <summary>Returns the transpose of the matrix.</summary>
      <returns>A Matrix instance that represents the transpose of the current matrix.</returns>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Matrix.op_Addition">
      <summary>Adds two matrices.</summary>
      <returns>A Matrix object that represents the result of the addition.</returns>
      <remarks>The Add method performs the same function as the addition operator and can be used in languages that do not support overloaded operators as Visual Basic.</remarks>
      <param name="A">A Matrix instance on the left side of the addition operator.</param>
      <param name="B">A Matrix instance on the right side of the addition operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Matrix.op_Division">
      <summary>Performs matrix right division.Performs matrix division.</summary>
      <returns>A CMatrix object that represents the result of the matrix right division.</returns>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Matrix.op_Division">
      <summary>Performs scalar-matrix division.</summary>
      <returns>A Matrix object that represents the result of the scalar-matrix division.</returns>
      <param name="alpha">A double on the left side of the division operator.</param>
      <param name="A">A Matrix instance on the right side of the division operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Matrix.op_Division">
      <summary>Performs matrix-scalar division.</summary>
      <returns>A Matrix object that represents the result of the matrix-scalar division.</returns>
      <param name="A">A Matrix instance on the left side of the division operator.</param>
      <param name="alpha">A double on the right side of the division operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Matrix.op_Division">
      <summary>Performs matrix right division</summary>
      <remarks> X = B / A then X is the solution of the equation X*A = B.</remarks>
      <returns>A Matrix object that represents the result of the matrix division.</returns>
      <param name="A">A Matrix instance on the left side of the division operator.</param>
      <param name="B">A Matrix instance on the right side of the division operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Matrix.op_Equality">
      <summary>Tests whether two Matrix objects represent equal matrices.</summary>
      <returns>true if matrices are equal; otherwise false.</returns>
      <remarks> The equality operator returns false if matrices are not of the same size. The elements of the compared matrices must be exactly equal in order to the equality operator return true. If you need to test if elements of two matrices are equal within a specified tolerance use the IsEqual method.</remarks>
      <param name="A">A Matrix instance on the left side of the equality operator.</param>
      <param name="B">A Matrix instance on the right side of the equality operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Matrix.op_Implicit">
      <summary>Defines conversions between Matrix objects and arrays of type double.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Matrix.op_Inequality">
      <summary>Tests whether two Matrix objects represent non equal matrices.</summary>
      <returns>true if matrices are not equal; otherwise false.</returns>
      <param name="A">A Matrix instance on the left side of the equality operator.</param>
      <param name="B">A Matrix instance on the right side of the equality operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Matrix.op_Multiply">
      <summary>Multiplies matrices.Multiplies matrices.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Matrix.op_Multiply">
      <summary>Multiplies a scalar by a matrix.</summary>
      <returns>A Matrix object that represents the matrix-scalar product.</returns>
      <remarks>The matrix-scalar multiplication is a commutative operation.</remarks>
      <param name="alpha">A double representing a scalar on the left side of the multiplication operator.</param>
      <param name="A">A Matrix instance on the right side of the multiplication operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Matrix.op_Multiply">
      <summary>Multiplies a matrix by a scalar.</summary>
      <returns>A Matrix object that represents the product.</returns>
      <remarks>The matrix-scalar multiplication is a commutative operation.</remarks>
      <param name="A">A Matrix instance on the left side of the multiplication operator.</param>
      <param name="alpha">A double representing a scalar on the right side of the multiplication operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Matrix.op_Multiply">
      <summary>Multiplies two matrices.</summary>
      <returns>A Matrix object that represents the product.</returns>
      <remarks> The inner dimensions of the matrices being multiplied must agree. That is, the number of columns in the first matrix must be equal to the number of rows in the second matrix. Matrix multiplication is not commutative, A" B is not the same as B" A.</remarks>
      <param name="A">A Matrix instance on the left side of the multiplication operator.</param>
      <param name="B">A Matrix instance on the right side of the multiplication operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Matrix.op_Multiply">
      <summary>Multiplies a matrix by a vector.</summary>
      <returns>A CMatrix object that represents the product.</returns>
      <remarks> The CVector is considered to be a column vector; a one-column matrix. The vector size must be equal to the number of columns of the matrix.</remarks>
      <param name="A">A Matrix instance on the left side of the multiplication operator.</param>
      <param name="x">A Vector instance on the right side of the multiplication operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Matrix.op_Multiply">
      <summary>Left multiplies a matrix with a vector.</summary>
      <param name="x">A Vector instance on the left side of the multiplication operator.</param>
      <param name="A">A Matrix instance on the right side of the multiplication operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Matrix.op_Subtraction">
      <summary>Subtracts two matrices.</summary>
      <returns>A Matrix object that represents the result of the subtraction.</returns>
      <remarks>The Subtract method performs the same function as the addition operator and can be used in languages that do not support overloaded operators as Visual Basic.</remarks>
      <param name="A">A Matrix instance on the left side of the addition operator.</param>
      <param name="B">A Matrix instance on the right side of the addition operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Matrix.op_UnaryNegation">
      <summary>Negates the matrix.</summary>
      <returns>A Matrix object representing the negation of the matrix.</returns>
      <remarks>The Negate method performs the same function as the unary negation operator and can be used in languages that do not support overloaded operators as Visual Basic.</remarks>
      <param name="A">A Matrix object representing the matrix to negate.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Matrix.op_UnaryPlus">
      <summary>Returns a copy of the matrix.</summary>
      <returns>A copy of the Matrix on the right of the unary plus operator.</returns>
      <param name="A">A Matrix instance on the right side of the unary plus operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Matrix.Cols">
      <summary>Gets or sets the number of columns of the current matrix.</summary>
      <remarks>Setting the Cols property to a new value causes the Matrix to resize. This has the same effect as calling the Resize method.</remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Matrix.Data">
      <summary>This property is used while serializing and deserializing the Matrix object and is not intended to be used directly from your code.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Matrix.DataPtr">
      <summary>Gets the address of the unmanaged (native) memory block containing the matrix's elements.</summary>
      <remarks>Matrix elements are stored in column major order. For a 3x2 matrix its items will be stored in the following order: [0,0], [1,0], [2,0], [0,1], [1,1], [2,1] .</remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Matrix.IsSquare">
      <summary>Indicates whether this instance represents a square matrix.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Matrix.Item(System.Int32,System.Int32)">
      <summary>Gets or sets a single matrix element.</summary>
      <remarks>This is the default property of the Matrix object when using it in Visual Basic. It is the indexer of the Matrix object when used in C#.</remarks>
      <param name="row">Specifies the row of the matrix element to get or to set.</param>
      <param name="col">Specifies the column of the matrix element to get or to set.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Matrix.Rows">
      <summary>Gets or sets the number of rows of the current matrix.</summary>
      <remarks>Setting the Rows property to a new value causes the Matrix to resize. This has the same effect as calling the Resize method.</remarks>
    </member>
    <member name="T:Bluebit.MatrixLibrary.MatrixException">
      <summary>This is the base class for all exceptions defined in the Bluebit.MatrixLibrary namespace.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.MatrixException.#ctor">
      <summary>Creates a new instance of the MatrixException class.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.MatrixException.#ctor">
      <summary>Creates a new instance of the MatrixException class with the default message.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.MatrixException.#ctor(System.String)">
      <summary>Creates a new instance of the MatrixException class with the specified error message.</summary>
      <param name="message">A string containing the message describing the error.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.MatrixException.#ctor(System.String,System.Exception)">
      <summary>Creates a new instance of the MatrixException class with the specified error message and the underlying (inner) exception.</summary>
      <param name="message">A string containing the message describing the error.</param>
      <param name="innerException">The inner Exception object.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.MatrixException.Dispose">
      <summary>Releases all the resources used by the ShortParentItemName object.</summary>
      <remarks>Calling Dispose allows the resources used by this object to be reallocated for other purposes.</remarks>
    </member>
    <member name="T:Bluebit.MatrixLibrary.NmlConfiguration">
      <summary>Provides static methods and properties for memory and threading control at runtime.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.NmlConfiguration.Dispose">
      <summary>Releases all the resources used by the ShortParentItemName object.</summary>
      <remarks>Calling Dispose allows the resources used by this object to be reallocated for other purposes.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.NmlConfiguration.FreeBuffers">
      <summary>Forces immediate release of temporary memory buffers which would normally be freed on application exit.</summary>
      <remarks>Temporary memory buffers are created and used as a work area at runtime. This memory is freed just before the application exits. Normally this method should not be called from within user code.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.NmlConfiguration.GetMaxThreads">
      <summary>Returns the number of threads that NML is going to use.</summary>
      <remarks>The value return from GetMaxThreads is an indication only, the actual number of threads used may change at execution.</remarks>
      <returns>An integer value specifying the number of threads.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.NmlConfiguration.SetNumThreads(System.Int32)">
      <summary>Suggests the number of threads that should be used.</summary>
      <remarks>Although NML will attempt to use the number of threads specified, the actual number of threads used may vary at execution.</remarks>
      <param name="threads">The number of threads that should be used.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.NmlConfiguration.DynamicThreads">
      <summary>Defines whether NML is allowed to dynamically change the number of threads used at runtime.</summary>
      <remarks> The default value is true. If DynamiceThreads is true, NML is called from a non parallel region and the matrix size is large enough, NML will attempt to use all available physical cores. Nested parallelism can lead to performance degradation. If DynamicThreads is set to true and NML detects that is called from a parallel region, then it will attempt to run on a single thread. In this case, setting DynamicThreads to false and using SetNumThreads to specify the desired number of threads will allow nested threading.</remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.NmlConfiguration.TotalMemory">
      <summary>Returns the total amount of unmanaged memory that is used by all objects of .NET Matrix Library.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.NotEnoughMemoryException">
      <summary>Thrown when there is not enough memory to complete an operation.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.NotEnoughMemoryException.#ctor">
      <summary>Creates a new instance of the NotEnoughMemoryException class.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.NotEnoughMemoryException.#ctor">
      <summary>Creates a new instance of the NotEnoughMemoryException Class class with the default message.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.NotEnoughMemoryException.#ctor(System.String)">
      <summary>Creates a new instance of the NotEnoughMemoryException class with the specified error message.</summary>
      <param name="message">A string containing the message describing the error.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.NotEnoughMemoryException.#ctor(System.String,System.Exception)">
      <summary>Creates a new instance of the NotEnoughMemoryException class with the specified error message and the underlying (inner) exception.</summary>
      <param name="message">A string containing the message describing the error.</param>
      <param name="innerException">The inner Exception object.</param>
    </member>
    <member name="T:Bluebit.MatrixLibrary.NotSquareMatrixException">
      <summary>Thrown when a non-square matrix is passed as a parameter to a method that expects a square matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.NotSquareMatrixException.#ctor">
      <summary>Creates a new instance of the NotSquareMatrixException class.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.NotSquareMatrixException.#ctor">
      <summary>Creates a new instance of the NotSquareMatrixException class with the default message.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.NotSquareMatrixException.#ctor(System.String)">
      <summary>Creates a new instance of the NotSquareMatrixException class with the specified message.</summary>
      <param name="message">A string containing the message describing the error.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.NotSquareMatrixException.#ctor(System.String,System.Exception)">
      <summary>Creates a new instance of the NotSquareMatrixException class with the specified message and the underlying (inner) exception.</summary>
      <param name="message">A string containing the message describing the error.</param>
      <param name="innerException">The inner Exception object.</param>
    </member>
    <member name="T:Bluebit.MatrixLibrary.OperationFailedException">
      <summary>Thrown when a method fails to complete.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.OperationFailedException.#ctor">
      <summary>Creates a new instance of the OperationFailedException class.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.OperationFailedException.#ctor">
      <summary>Creates a new instance of the OperationFailedException class with the default message.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.OperationFailedException.#ctor(System.String)">
      <summary>Creates a new instance of the OperationFailedException class with the specified error message.</summary>
      <param name="message">A string containing the message describing the error.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.OperationFailedException.#ctor(System.String,System.Exception)">
      <summary>Creates a new instance of the OperationFailedException class with the specified error message and the underlying (inner) exception.</summary>
      <param name="message">A string containing the message describing the error.</param>
      <param name="innerException">The inner Exception object.</param>
    </member>
    <member name="T:Bluebit.MatrixLibrary.QR">
      <summary>Represents a QR factorization of a general real matrix.</summary>
      <remarks> The QR factorization of a general m by n matrix A is formed as A*P = Q*R where P is a permutation matrix, Q is a mxn (mxm if m&lt;n) orthogonal matrix and R is a nxn (mxn if m&lt;n) upper triangular (upper trapezoidal if m&lt;n) matrix. The QR class can be used for solving least-square problems.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.QR.#ctor">
      <summary>Initializes a new instance of the QR class computing the QR factorization of a general real matrix.</summary>
      <remarks>The QR class constructor never fails.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.QR.#ctor(Bluebit.MatrixLibrary.Matrix)">
      <summary>Initializes a new instance of the QR class computing the QR factorization of a real complex matrix using column pivoting.</summary>
      <remarks>The QR class constructor never fails.</remarks>
      <param name="matrix">A Matrix object containing the matrix to factor.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.QR.#ctor(Bluebit.MatrixLibrary.Matrix,System.Boolean)">
      <summary>Initializes a new instance of the QR class computing the QR factorization of a general real matrix, specifying whether column pivoting will be used.</summary>
      <remarks>The QR class constructor never fails.</remarks>
      <param name="matrix">A Matrix object containing the matrix to factor.</param>
      <param name="pivoting">A boolean value specifying whether column pivoting will be used.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.QR.Dispose">
      <summary>Releases all the resources used by the ShortParentItemName object.</summary>
      <remarks>Calling Dispose allows the resources used by this object to be reallocated for other purposes.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.QR.GetPivots">
      <summary>Gets an array of integers containing the pivot indices.</summary>
      <remarks> Pivots(i) = k denotes that during factorization column k has moved to column i. The array that is returned from Pivots property can be used as a parameter in ReorderCols method in order to reconstruct the original matrix. This has the same effect as multiplying by the P matrix but it executes faster.</remarks>
      <returns>An array of type integer.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.QR.Solve(Bluebit.MatrixLibrary.Matrix)">
      <summary>Solves a set of least-squares problems (with multiple right hands) using the QR factorization of a general real matrix.</summary>
      <returns>A Matrix object that contains the solution of the least-squares problems.</returns>
      <remarks> The Solve method finds a least-squares solution to the system of linear equations A*X = B where: A denotes the complex matrix that has been previously factored (represented now by its QR factorization). B is the matrix whose columns contain the right hand terms. X is the solution matrix that is to be computed and minimizes ||A*X -B||2 The system can be solved with multiple right-hand sides stored in the columns of the matrix B. The columns of X are the minimum norm solution vectors.</remarks>
      <param name="rightHands">A Matrix object containing the right-hand sides for the set of least-squares problems.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.QR.Cols">
      <summary>Gets the number of columns of the matrix that is represented by the factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.QR.P">
      <summary>Gets the P factor, the permutation matrix of the QR factorization.</summary>
      <remarks>The QR factorization of a general m by n matrix A is formed as A*P = Q*R where P is a permutation matrix, Q is a mxn (mxm if m&lt;n) orthogonal matrix and R is a nxn (mxn if m&lt;n) upper triangular (upper trapezoidal if m&lt;n) matrix.</remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.QR.Q">
      <summary>Gets the Q factor, the orthogonal part of the QR factorization.</summary>
      <remarks>The QR factorization of a general m by n matrix A is formed as A*P = Q*R where P is a permutation matrix, Q is a mxn (mxm if m&lt;n) orthogonal matrix and R is a nxn (mxn if m&lt;n) upper triangular (upper trapezoidal if m&lt;n) matrix.</remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.QR.R">
      <summary>Gets the R factor, the upper triangular part of the QR factorization.</summary>
      <remarks>The QR factorization of a general m by n matrix A is formed as A*P = Q*R where P is a permutation matrix, Q is a mxn (mxm if m&lt;n) orthogonal matrix and R is a nxn (mxn if m&lt;n) upper triangular (upper trapezoidal if m&lt;n) matrix.</remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.QR.Rows">
      <summary>Gets the number of rows of the matrix that is represented by the factorization.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.SingularMatrixException">
      <summary>Thrown when a matrix has found to be singular not allowing the successful completion of a method.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SingularMatrixException.#ctor">
      <summary>Creates a new instance of the SingularMatrixException class.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SingularMatrixException.#ctor">
      <summary>Creates a new instance of the SingularMatrixException class with the default message.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SingularMatrixException.#ctor(System.String)">
      <summary>Creates a new instance of the SingularMatrixException class with the specified message.</summary>
      <param name="message">A string containing the message describing the error.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SingularMatrixException.#ctor(System.String,System.Exception)">
      <summary>Constructs a new instance of the SingularMatrixException class with the specified error message and the underlying (inner) exception.</summary>
      <param name="message">A string containing the message describing the error.</param>
      <param name="innerException">The inner Exception object.</param>
    </member>
    <member name="T:Bluebit.MatrixLibrary.SizeMismatchException">
      <summary>Thrown when a method expects a matrix or vector of different size.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SizeMismatchException.#ctor">
      <summary>Creates a new instance of the SizeMismatchException class.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SizeMismatchException.#ctor">
      <summary>Creates a new instance of the SizeMismatchException class with the default message.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SizeMismatchException.#ctor(System.String)">
      <summary>Creates a new instance of the SizeMismatchException class with the specified message.</summary>
      <param name="message">A string containing the message describing the error.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SizeMismatchException.#ctor(System.String,System.Exception)">
      <summary>Constructs a new instance of the SizeMismatchException class with the specified error message and the underlying (inner) exception.</summary>
      <param name="message">A string containing the message describing the error.</param>
      <param name="innerException">The inner Exception object.</param>
    </member>
    <member name="T:Bluebit.MatrixLibrary.SparseMatrix">
      <summary>Represents a general sparse matrix with real elements.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.#ctor">
      <summary>Creates a new instance of the SparseMatrix class.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.#ctor">
      <summary>Creates a new instance of an empty SparseMatrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.#ctor(System.Double[],System.Int32[],System.Int32[])">
      <summary>Creates a new instance of a SparseMatrix from data in compressed sparse row (CSR) format.</summary>
      <param name="A">Array of type double containing the values of the explicitly defined non-zero elements of the matrix.</param>
      <param name="IA">Array of type integer containing the indices of the first non zero element in each row of the matrix.</param>
      <param name="JA">Array of type integer containing the column indices of each matrix element stored in array A.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.#ctor(System.Int32,System.Boolean)">
      <summary>Creates a new instance of SparseMatrix representing a square matrix of the specified size, and specifies whether the matrix is symmetric.</summary>
      <remarks> When a matrix is defined as a symmetric matric, only the upper diagonal elements of the matrix are stored in the internal storage. This saves memory and also speeds up some computations. </remarks>
      <param name="size">The number of rows and columns of the matrix.</param>
      <param name="symmetric">true if the matrix is symmetric; false otherwise.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.#ctor(System.Int32,System.Boolean,System.Int32,System.Single)">
      <summary>Creates a new instance of SparseMatrix representing a square matrix of the specified size, specifies whether the matrix is symmetric and sets initial values for the capacity and the grow factor.</summary>
      <param name="size">An integer specifying the number of rows and columns of the matrix.</param>
      <param name="symmetric">true if the matrix is symmetric; false otherwise.</param>
      <param name="capacity">Specifies the maximum number of elements that the internal storage can hold without resizing.</param>
      <param name="growFactor">The factor by which the capacity is multiplied when required.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.#ctor(System.Int32,System.Int32)">
      <summary>Creates a new instance of a SparseMatrix with the specified number of rows and columns.</summary>
      <param name="rows">The number of rows of the sparse matrix.</param>
      <param name="cols">The number of columns of the sparse matrix.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>Creates a new instance od a SparseMatrix with the specified number or rows and columns and initial capacity.</summary>
      <remarks>The internal storage of the SparseMatrix is dynamically increased when required but it is preferable to allocate the required space from the beginning, if the number of elements is known.</remarks>
      <param name="rows">The number of rows of the sparse matrix.</param>
      <param name="cols">The number of columns of the sparse matrix.</param>
      <param name="capacity">Specifies the maximum number of elements that the internal storage can hold without resizing.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.#ctor(System.Int32,System.Int32,System.Int32,System.Single)">
      <summary>Creates a new instance of a SparseMatrix with the specified number or rows and columns, initial capacity and grow factor.</summary>
      <remarks> The internal storage of the SparseMatrix is dynamically increased when required but it is preferable to allocate the required space from the beginning if the number of elements is known. The grow factor is the number by which the capacity is multiplied when additional storage is required. A grow factor that equals 2 doubles the capacity.</remarks>
      <param name="rows">The number of rows of the sparse matrix.</param>
      <param name="cols">The number of columns of the sparse matrix.</param>
      <param name="capacity">Specifies the maximum number of elements that the internal storage can hold without resizing.</param>
      <param name="growFactor">The factor by which the capacity is multiplied when required.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.#ctor(Bluebit.MatrixLibrary.Matrix)">
      <summary>Creates a new instance of a SparseMatrix using the contents of a dense Matrix object.</summary>
      <param name="matrix">A Matrix object that contains the dense matrix data.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.#ctor(Bluebit.MatrixLibrary.SparseMatrix)">
      <summary>Creates a new instance of a SparseMatrix copying the contents of another SparseMatrix.</summary>
      <param name="matrix">The SparseMatrix whose content is to be copied into the newly created matrix.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.Add(Bluebit.MatrixLibrary.SparseMatrix,System.Double,Bluebit.MatrixLibrary.TransposeMode,Bluebit.MatrixLibrary.SparseMatrix)">
      <summary> Adds two sparse matrices. The operation is defined as: C=A+beta*op(B)</summary>
      <param name="A">The first sparse matrix to add.</param>
      <param name="beta">A double scalar that multiplies the second matrix.</param>
      <param name="transB">A TransposeMode enumeration specifying whether the second matrix is transposed.</param>
      <param name="B">The second matrix to add.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.Clone">
      <summary>Creates a deep copy of the current sparse matrix.</summary>
      <returns>A new SparseMatrix object that contains the same data as this.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.Dispose">
      <summary>Releases all the resources used by the ShortParentItemName object.</summary>
      <remarks>Calling Dispose allows the resources used by this object to be reallocated for other purposes.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.Equals">
      <summary>Returns a value indicating if this sparse matrix is equal to another sparse matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.Equals(Bluebit.MatrixLibrary.SparseMatrix)">
      <summary>Returns a value indicating if this sparse matrix is equal to another sparse matrix.</summary>
      <returns>true if both matrices contain the same data, false otherwise.</returns>
      <param name="matrix">A sparse matrix matrix to compare with the current instance.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.Equals(Bluebit.MatrixLibrary.SparseMatrix,System.Double)">
      <summary>Returns a value indicating if this sparse matrix is equal to another sparse matrix within the specified tolerance.</summary>
      <returns>true if both matrices contain the same data, false otherwise.</returns>
      <param name="matrix">A sparse matrix matrix to compare with the current instance.</param>
      <param name="tolerance">A double specifying the allowable tolerance of the comparison.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.FillRandom">
      <summary>Fills a sparse matrix with random values.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.FillRandom">
      <summary>Fills the SparseMatrix object with random values ranging from 1 to 10 using a density of 1.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.FillRandom(System.Double)">
      <summary>Fills the SparseMatrix object with random values ranging from 1 to 10 using the specified density.</summary>
      <param name="density">Specifies the fraction of matrix elements which will be set to non zero values.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.FillRandom(System.Double,System.Double,System.Double)">
      <summary>Fills the SparseMatrix object with random values ranging from lower bound to upper bound using the specified density.</summary>
      <param name="density">Specifies the fraction of matrix elements which will be set to non zero values.</param>
      <param name="lowerBound">A double specifying the lower limit of the random values that will be used.</param>
      <param name="upperBound">A double specifying the upper limit of the random values that will be used.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.FillRandom(System.Double,System.Double,System.Double,System.Int32)">
      <summary>Fills the SparseMatrix object with random values ranging from lower bound to upper bound, rounded to the specified number of decimal places, using the specified density.</summary>
      <param name="density">Specifies the fraction of matrix elements which will be set to non zero values.</param>
      <param name="lowerBound">A double specifying the lower limit of the random values that will be used.</param>
      <param name="upperBound">A double specifying the upper limit of the random values that will be used.</param>
      <param name="decimals">An integer specifying the number of decimal places to which random values will be rounded to.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.GetHashCode">
      <summary>Returns the hash code of the current ShortParentItemName.</summary>
      <returns>A 32-bit signed integer that represents the hash code.</returns>
      <remarks>This method overrides Object.GetHashCode and generates the same hash code for two objects that are equal according to the Equals method.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implements the ISerializable interface and returns the data needed to serialize the SparseMatrix class.</summary>
      <param name="info">A SerializationInfo object.</param>
      <param name="context">A StreamingContext structure.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.Multiply">
      <summary>Multiplies sparse matrices.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.Multiply(Bluebit.MatrixLibrary.SparseMatrix,System.Double)">
      <summary>Returns a scalar-matrix product.</summary>
      <returns>A SparseMatrix Class object containing the result.</returns>
      <param name="A">A SparseMatrix object representing the sparse matrix to multiply.</param>
      <param name="scalar">A double scalar.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.Multiply(Bluebit.MatrixLibrary.SparseMatrix,Bluebit.MatrixLibrary.Vector)">
      <summary>Multiplies a sparse matrix by a vector.</summary>
      <returns>A Vector object containing the result.</returns>
      <param name="A">A SparseMatrix Class object representing the sparse matrix to multiply.</param>
      <param name="x">A Vector object representing the vector to multiply with.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.Multiply(Bluebit.MatrixLibrary.Vector,Bluebit.MatrixLibrary.SparseMatrix)">
      <summary>Left multiplies a sparse matrix by a vector.</summary>
      <returns>A Vector object containing the result.</returns>
      <param name="x">A Vector object representing the vector to multiply with.</param>
      <param name="A">A SparseMatrix Class object representing the sparse matrix to multiply.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.Multiply(Bluebit.MatrixLibrary.SparseMatrix,Bluebit.MatrixLibrary.Matrix)">
      <summary>Multiplies a sparse matrix by a dense matrix.</summary>
      <returns>A Matrix object that contains the result.</returns>
      <param name="A">A SparseMatrix Class object representing the sparse matrix.</param>
      <param name="B">A Matrix object that representing the dense matrix.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.Multiply(Bluebit.MatrixLibrary.SparseMatrix,Bluebit.MatrixLibrary.SparseMatrix)">
      <summary>Multiplies two sparse matrices and return the result into another sparse matrix.</summary>
      <returns>A SparseMatrix object containing the result.</returns>
      <param name="A">A SparseMatrix object representing the first sparse matrix.</param>
      <param name="B">A SparseMatrix object representing the second sparse matrix.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.Multiply(Bluebit.MatrixLibrary.TransposeMode,Bluebit.MatrixLibrary.SparseMatrix,Bluebit.MatrixLibrary.SparseMatrix)">
      <summary>Multiplies two sparse matrices and return the result into another sparse matrix.</summary>
      <returns>A SparseMatrix object containing the result.</returns>
      <param name="transA">A TransposeMode enumeration specifying whether the original matrix A or its transposed will be used.</param>
      <param name="A">A SparseMatrix object representing the first sparse matrix.</param>
      <param name="B">A SparseMatrix object representing the second sparse matrix.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.Multiply(System.Double,Bluebit.MatrixLibrary.TransposeMode,Bluebit.MatrixLibrary.SparseMatrix,Bluebit.MatrixLibrary.Vector,System.Double,Bluebit.MatrixLibrary.Vector)">
      <summary> Computes a sparse matrix by a vector product and stores the result to another vector. The operation is defined as: y=alpha*op(A)*B+beta*y</summary>
      <param name="alpha">A double scalar values.</param>
      <param name="transA">A TransposeMode enumeration specifying whether the original matrix A or its transposed will be used.</param>
      <param name="A">A SparseMatrix object representing the sparse matrix to multiply.</param>
      <param name="x">A Vector object representing the vector to multiply with.</param>
      <param name="beta">A double scalar values.</param>
      <param name="y">A Vector object which will contain the result.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.Multiply(System.Double,Bluebit.MatrixLibrary.TransposeMode,Bluebit.MatrixLibrary.SparseMatrix,Bluebit.MatrixLibrary.Matrix,System.Double,Bluebit.MatrixLibrary.Matrix)">
      <summary> Computes a sparse matrix by a dense matrix product and stores the result to another dense matrix. The operation is defined as: C=alpha*op(A)*B+beta*C</summary>
      <param name="alpha">A double scalar value.</param>
      <param name="transA">A TransposeMode enumeration specifying whether the original matrix A or its transposed will be used.</param>
      <param name="A">A SparseMatrix Class object representing the spare matrix to multiply.</param>
      <param name="B">A Matrix object specifying the dense matrix to multiply with.</param>
      <param name="beta">A double scalar value.</param>
      <param name="C">A Matrix object specifying the matrix which will contain the result.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.Negate(Bluebit.MatrixLibrary.SparseMatrix)">
      <summary>Returns the negation of a sparse matrix.</summary>
      <returns>A SparseMatrix Class object representing the negation of the sparse matrix.</returns>
      <param name="A">A SparseMatrix Class object representing the sparse matrix to negate.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.RemoveZeros">
      <summary>Removes all elements which are close to zero from the internal storage.</summary>
      <remarks> Although the SparseMatrix Class class is designed to store only the non zero elements, it is possible to store zero elements by direct assignment or as a result of a computation. The RemoveZeros method removes those elements thus making possible to release unused memory. The sparse solver routines require that symmetric matrices should contain the diagonal entries even if those entries are equal to zero. The incudeDiagonals parameter controls the behavior of the RemoveZeros method, whether it should remove the zero elements found on the main diagonal or not.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.RemoveZeros">
      <summary>Removes all elements which are close to zero from the internal storage.</summary>
      <remarks> Although the SparseMatrix Class class is designed to store only the non zero elements, it is possible to store zero elements either by direct assignment or as a result of a computation. The RemoveZeros method removes those elements thus making possible to release unused memory. This overload of the RemoveZeros method removes elements with absolute value less than 1.0E-15.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.RemoveZeros(System.Double)">
      <summary>Removes all elements with absolute value smaller than the specified tolerance.</summary>
      <remarks> Although the SparseMatrix Class class is designed to store only the non zero elements, it is possible to store zero elements either by direct assignment or as a result of a computation. The RemoveZeros method removes those elements thus making possible to release unused memory. The absolute value of each element is compared with of tolerance and if it is smaller it is removed.</remarks>
      <param name="tolerance">A double value. Elements with absolute value smaller than tolerance will be removed.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.RemoveZeros(System.Double,System.Boolean)">
      <summary>Removes all elements which are equal to zero within the specified tolerance, specifying whether to remove the diagonal zero entries.</summary>
      <remarks> Although the SparseMatrix Class class is designed to store only the non zero elements, it is possible to store zero elements either by direct assignment or as a result of a computation. The RemoveZeros method removes those elements thus making possible to release unused memory. The sparse solver routines require that symmetric matrices should contain the diagonal entries even if those entries are equal to zero. The incudeDiagonals parameter controls the behavior of the RemoveZeros method, whether it should remove the zero entries found on the main diagonal or not.</remarks>
      <param name="tolerance">A double value. Elements with absolute value smaller than tolerance will be removed.</param>
      <param name="excludeDiagonals">Specifies whether to exclude the diagonal entries from deletion or not.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.ToDense">
      <summary>Converts the current instance to a dense matrix.</summary>
      <returns>A Matrix object that represents the sparse matrix in dense format.</returns>
      <remarks>A dense representation of a large sparse matrix requires a mutch larger amount of memory. An exception will be thrown if there is not sufficient memory.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.ToString">
      <summary>Converts this instance of SparseMatrix to a formatted string.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.ToString">
      <summary>Converts this instance of SparseMatrix to a formatted string using the default values for format string, separator, left and right borders, and end of line characters.</summary>
      <returns>A formatted string containing all matrix elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.ToString(System.String)">
      <summary>Converts this instance of SparseMatrix to a formatted string specifying a format string, and using the the default values for separator, left and right borders, and end of line characters.</summary>
      <returns>A formatted string containing all matrix elements.</returns>
      <param name="format">A format string that will be used to convert all matrix elements.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.ToString(System.String,System.String)">
      <summary>Converts this instance of SparseMatrix to a formatted string specifying a format string, and a separator and using the default values for left and right borders and end of line characters.</summary>
      <returns>A formatted string containing all matrix elements.</returns>
      <param name="format">A format string that will be used to convert all matrix elements.</param>
      <param name="separator">A string that will be used to separate matrix elements.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.ToString(System.String,System.String,System.String,System.String,System.String)">
      <summary>Converts this instance of SparseMatrix to a formatted string specifying a format string, a separator, left and right borders and end of line characters.</summary>
      <returns>A formatted string containing all matrix elements.</returns>
      <param name="format">A format string that will be used to convert all matrix elements.</param>
      <param name="separator">A string that will be used to separate matrix elements.</param>
      <param name="leftBorder">A string that will be added at the beginning of each matrix row.</param>
      <param name="rightBorder">A string that will be added at the end of each matrix row.</param>
      <param name="endMatrix">A string that will be added at the end of the matrix.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.ToString(System.IFormatProvider,System.String)">
      <summary>Converts this instance of SparseMatrix to a formatted string specifying culture-specific format information and a format string.</summary>
      <returns>A formatted string containing all matrix elements.</returns>
      <param name="provider"> An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="format">A format string that will be used to convert all matrix elements.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.ToString(System.IFormatProvider,System.String,System.String,System.String,System.String,System.String)">
      <summary>Converts this instance of SparseMatrix to a formatted string specifying culture-specific format information, a format string, a separator, left and right borders and end of line characters.</summary>
      <returns>A formatted string containing all matrix elements.</returns>
      <param name="provider"> An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="format">A format string that will be used to convert all matrix elements.</param>
      <param name="separator">A string that will be used to separate matrix elements.</param>
      <param name="leftBorder">A string that will be added at the beginning of each matrix row.</param>
      <param name="rightBorder">A string that will be added at the end of each matrix row.</param>
      <param name="endMatrix">A string that will be added at the end of the matrix.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.Transpose">
      <summary>Returns the transpose of the sparse matrix.</summary>
      <returns>A SparseMatrix instance that represents the transpose of the current sparse matrix.</returns>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseMatrix.op_Addition">
      <summary>Adds two sparse matrices.</summary>
      <returns>A SparseMatrix object that represents the result of the addition.</returns>
      <param name="A">A SparseMatrix instance on the left side of the addition operator.</param>
      <param name="B">A SparseMatrix instance on the right side of the addition operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseMatrix.op_Equality">
      <summary>Tests whether two SparseMatrix objects represent equal matrices.</summary>
      <returns>true if sparse matrices are equal; otherwise false.</returns>
      <param name="A">A SparseMatrix instance on the left side of the equality operator.</param>
      <param name="B">A SparseMatrix instance on the right side of the equality operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseMatrix.op_Inequality">
      <summary>Tests whether two SparseMatrix objects represent non equal matrices.</summary>
      <returns>true if matrices are not equal; false otherwise.</returns>
      <param name="A">A SparseMatrix instance on the left side of the inequality operator.</param>
      <param name="B">A SparseMatrix instance on the right side of the inequality operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseMatrix.op_Multiply">
      <summary>Multiplies a sparse matrix.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseMatrix.op_Multiply">
      <summary>Multiplies a scalar by a sparse matrix.</summary>
      <returns>A SparseMatrix Class object that represents the matrix-scalar product.</returns>
      <param name="scalar">A double representing a scalar on the left side of the multiplication operator.</param>
      <param name="A">A SparseMatrix Class instance on the right of the multiplication operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseMatrix.op_Multiply">
      <summary>Multiplies a sparse matrix by a scalar.</summary>
      <returns>A SparseMatrix Class object that represents the matrix-scalar product.</returns>
      <param name="A">A SparseMatrix Class instance on the left of the multiplication operator.</param>
      <param name="scalar">A double representing a scalar on the right side of the multiplication operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseMatrix.op_Multiply">
      <summary>Multiplies a sparse matrix by a dense matrix and returns the result into a dense matrix.</summary>
      <returns>A Matrix object that contains the matrix-matrix product.</returns>
      <param name="A">A SparseMatrix instance on the left of the multiplication operator.</param>
      <param name="B">A Matrix object that representing the dense matrix to multiply with.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseMatrix.op_Multiply">
      <summary>Multiplies two sparse matrices and result the result into another sparse matrix.</summary>
      <returns>A SparseMatrix object containing the matrix-matrix product.</returns>
      <param name="A">A SparseMatrix instance on the left of the multiplication operator.</param>
      <param name="B">A SparseMatrix instance on the right of the multiplication operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseMatrix.op_Multiply">
      <summary>Multiplies a sparse matrix by a vector.</summary>
      <returns>A Vector object containing the result of the matrix-vector product.</returns>
      <param name="A">A SparseMatrix instance on the left of the multiplication operator.</param>
      <param name="x">A Vector object representing the vector on the right side of the multiplication operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseMatrix.op_Multiply">
      <summary>Left multiplies a sparse matrix by a vector.</summary>
      <returns>A Vector object containing the result of the vector-matrix product.</returns>
      <param name="x">A Vector object representing the vector on the left side of the multiplication operator.</param>
      <param name="A">A SparseMatrix instance on the rigth of the multiplication operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseMatrix.op_Subtraction">
      <summary>Subtracts a sparse matrix from another sparse matrix.</summary>
      <returns>A SparseMatrix object containing the result of the subtraction.</returns>
      <param name="A">A SparseMatrix instance representing the sparse matrix on the left of the subtraction operator.</param>
      <param name="B">A SparseMatrix instance representing the sparse matrix on the right of the subtraction operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseMatrix.op_UnaryNegation">
      <summary>Negates a matrix.</summary>
      <returns>A SparseMatrix representing the negation of the matrix.</returns>
      <param name="A">A SparseMatrix representing the matrix to negate.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseMatrix.op_UnaryPlus">
      <summary>Returns a copy of the sparse matrix.</summary>
      <returns>A copy of the SparseMatrix on the right side of the unary plus operator.</returns>
      <param name="A">A SparseMatrix instance on the right side of the unary plus operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseMatrix.Capacity">
      <summary>Gets or sets the number of elements that the internal storage of the sparse matrix can hold without resizing.</summary>
      <remarks> Capacity is automatically increased as needed while assigning elements of the sparse matrix. Each time the NumElements property is to exceed Capacity, Capacity is multiplied by the value specified by the GrowFactor property. The NumElements returns the actual number of explicitly assigned elements. If an attempt is made to set the Capacity to a value lower than NumElements then Capacity is set equal to NumElements.</remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseMatrix.Cols">
      <summary>Gets or sets the number of sparse matrix columns.</summary>
      <remarks>Setting the Cols property to a new value causes the sparse matrix to resize.</remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseMatrix.Data">
      <summary>This property is used while serializing and deserializing the SparseMatrix and it is not intended to be used in user code.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseMatrix.GrowFactor">
      <summary>Gets or sets the number by which the Capacity is multiplied whenever a greater internal storage for the matrix is needed.</summary>
      <remarks> If GrowFactor property equals 2, then Capacity is doubled whenever a greater internal storage for the sparse matrix is needed. The default value is 1.2. Valid values are between 1 and 4.</remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseMatrix.Item(System.Int32,System.Int32)">
      <summary>Gets or sets a single element of the sparse matrix.</summary>
      <remarks> This is the default property of the SparseMatrix object when using it in Visual Basic, or the indexer property when used in C#. Although the SparseMatrix class is intended to store only the non-zero elements of a sparse matrix, it is possible to explicitly assign elements to zero. Assigning a non-zero element to a zero value does not automatically removes the element from the internal storage. To recover the storage used by zero elements use the RemoveZeros method.</remarks>
      <param name="row">Specifies the row of the matrix element to get or to set.</param>
      <param name="col">Specifies the column of the matrix element to get or to set.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseMatrix.NumElements">
      <summary>Gets the number of elements contained in the internal storage of the sparse matrix.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseMatrix.Rows">
      <summary>Gets or sets the number of sparse matrix rows.</summary>
      <remarks>Setting Rows property to a new value resizes the matrix.</remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseMatrix.Symmetric">
      <summary>Indicates whether this instance represents a symmetric sparse matrix.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.SparseSolver">
      <summary>Computes the factorization of a general or symmetric sparse real matrix and uses the factorization to solve a system of linear equations.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseSolver.#ctor(Bluebit.MatrixLibrary.SparseMatrix)">
      <summary>Creates an instance of the SparseSolver object for the specified sparse matrix.</summary>
      <param name="matrix">The sparse matrix for which to create the sparse solver.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseSolver.Dispose">
      <summary>Releases all the resources used by the ShortParentItemName object.</summary>
      <remarks>Calling Dispose allows the resources used by this object to be reallocated for other purposes.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseSolver.Solve">
      <summary>Solves a system of linear equations</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseSolver.Solve(Bluebit.MatrixLibrary.Matrix)">
      <summary>Solves a system of linear equations for multiple right hands.</summary>
      <returns>A Matrix object that contains the solution of the system of linear equations.</returns>
      <param name="rhnds">A Matrix object that contains the multiple right hand vectors as columns.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseSolver.Solve(Bluebit.MatrixLibrary.Vector)">
      <summary>Solves a system of linear equations for a single right hand vector.</summary>
      <returns>A Vector object containing the solution of the system of linear equations.</returns>
      <param name="rhnds">A Vector object containing the right hand vector.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseSolver.FactorizationStrategy">
      <summary>Specifies the factorization strategy.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseSolver.FillInReducingMethod">
      <summary>Specifies the method to be used in order to reduce the fill in of the matrix factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseSolver.MatrixType">
      <summary>Specifies the matrix type.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseSolver.PivotEpsilon">
      <summary>Specifies a value to be used as a pivot when a tiny pivot is encountered.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseSolver.RefinementSteps">
      <summary>Specifies the maximum number of the refinement steps to be used.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseSolver.Status">
      <summary>Returns the status of the solver.</summary>
      <remarks>Any value for the Status property different than SolverStatus.Success indicates and error. Check this property after the Solve method has been used.</remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseSolver.StoppingTolerance">
      <summary>Specifies the allowable tolerance of the computed solution.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.SVD">
      <summary>Represents the Singular Value Decomposition (SVD) of a general complex matrix.</summary>
      <remarks> The Singular Value Decomposition (SVD) of a mxn matrix A is written A = U*S*VH where S is an nxn (mxn if m&lt;n) matrix which is zero except for its min(m,n) diagonal elements, U is an mxn (mxm if m&lt;n) orthogonal/unitary matrix, and V is an nxn orthogonal/unitary matrix. The diagonal elements of S are the singular values of A; they are real and non-negative, and are returned in descending order. The first min(m,n) columns of U and V are the left and right singular vectors of A. </remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SVD.#ctor">
      <summary>Initializes a new instance of the SVD class.</summary>
      <remarks>The SVD constructor never fails. Succeeded property indicates whether the internal routines have managed to calculate all the singular values of the matrix.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SVD.#ctor(Bluebit.MatrixLibrary.Matrix)">
      <summary>Initializes a new instance of the SVD class computing the Singular Value Decomposition (SVD) of a general complex matrix.</summary>
      <remarks>The SVD constructor never fails. Succeeded property indicates whether the internal routines have managed to calculate all the singular values of the matrix.</remarks>
      <param name="matrix">A Matrix object containing the matrix whose Singular Value Decomposition will be computed.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SVD.#ctor(Bluebit.MatrixLibrary.Matrix,System.Boolean)">
      <summary>Initializes a new instance of the SVD class computing the Singular Value Decomposition of a general complex matrix, specifying whether the singular vectors (U and V matrices) will be computed.</summary>
      <remarks>The SVD constructor never fails. Succeeded property indicates whether the internal routines have managed to calculate all the singular values of the matrix.</remarks>
      <param name="matrix">A Matrix object containing the matrix whose Singular Value Decomposition will be computed.</param>
      <param name="singularValuesOnly">If true then only singular values are computed; if false then both singular values and singular vectors (U and V matrices) are calculated.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SVD.Dispose">
      <summary>Releases all the resources used by the ShortParentItemName object.</summary>
      <remarks>Calling Dispose allows the resources used by this object to be reallocated for other purposes.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SVD.PseudoInverse">
      <summary>Returns the Moore-Penrose inverse (pseudoinverse) of the matrix that is represented by this singular value decomposition.</summary>
      <remarks> If A+ is the Moore-Penrose inverse (pseudoinverse) of matrix A then it satisfies the following four conditions: A*A+*A = A A+*A*A+ =A+ (A*A+)T = A*A+ (A+*A)T =A+*A </remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SVD.PseudoInverse">
      <summary>Returns the Moore-Penrose inverse (pseudoinverse) of the matrix that is represented by this singular value decomposition.</summary>
      <remarks> If A+ is the Moore-Penrose inverse (pseudoinverse) of matrix A then it satisfies the following four conditions: A*A+*A = A A+*A*A+ =A+ (A*A+)T = A*A+ (A+*A)T =A+*A </remarks>
      <returns>A Matrix object representing the Moore-Penrose inverse of the factored matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SVD.PseudoInverse(System.Double)">
      <summary>Returns the Moore-Penrose inverse (pseudoinverse) of the matrix that is represented by this singular value decomposition.</summary>
      <remarks> Roundoff errors can lead to a singular value not being exactly zero even if it should be. tolerance parameter places a threshold when comparing singular values with zero and improves the numerical stability of the method with singular or near-singular matrices. If A+ is the Moore-Penrose inverse (pseudoinverse) of matrix A then it satisfies the following four conditions: A*A+*A = A A+*A*A+ =A+ (A*A+)T = A*A+ (A+*A)T =A+*A </remarks>
      <returns>A Matrix object representing the Moore-Penrose inverse of the factored matrix.</returns>
      <param name="tolerance">A double specifying the value under which the singular values of the matrix are considered to be zero.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SVD.Rank">
      <summary>Returns the matrix rank. Returns the matrix rank.</summary>
      <remarks>The matrix rank is defined as the number nonzero singular values.The matrix rank is defined as the number nonzero singular values.</remarks>
      <returns>An integer value representing the matrix rank.An integer value representing the matrix rank.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SVD.Rank">
      <summary>Returns the matrix rank.</summary>
      <returns>An integer value representing the matrix rank.</returns>
      <remarks>The matrix rank is defined as the number of its nonzero singular values.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SVD.Rank(System.Double)">
      <summary>Returns the matrix rank.</summary>
      <remarks>The matrix rank is defined as the number of its nonzero singular values.</remarks>
      <returns>An integer value representing the matrix rank.</returns>
      <param name="tolerance">A double specifying the value under which the singular values of the matrix are considered to be zero.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SVD.S">
      <summary>Returns the Σ part of the singular value decomposition.</summary>
      <remarks> The Singular Value Decomposition (SVD) of a mxn matrix A is written A = U*S*VH where S is an nxn (mxn if m&lt;n) matrix which is zero except for its min(m,n) diagonal elements, U is an mxn (mxm if m&lt;n) orthogonal/unitary matrix, and V is an nxn orthogonal/unitary matrix. The diagonal elements of S are the singular values of A; they are real and non-negative, and are returned in descending order. The first min(m,n) columns of U and V are the left and right singular vectors of A. </remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SVD.SingularValue(System.Int32)">
      <summary>Gets the specified singular value.</summary>
      <param name="index">A zero-based index specifying the singular value to return.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SVD.SingularValues">
      <summary>Gets a vector containing all the computed singular values.</summary>
      <remarks>The singular values are ordered in descending order.</remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SVD.Succeeded">
      <summary>Indicates whether the all singular values were calculated successfully.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SVD.U">
      <summary>Returns the U part of the singular value decomposition.</summary>
      <remarks> The Singular Value Decomposition (SVD) of a mxn matrix A is written A = U*S*VH where S is an nxn (mxn if m&lt;n) matrix which is zero except for its min(m,n) diagonal elements, U is an mxn (mxm if m&lt;n) orthogonal/unitary matrix, and V is an nxn orthogonal/unitary matrix. The diagonal elements of S are the singular values of A; they are real and non-negative, and are returned in descending order. The first min(m,n) columns of U and V are the left and right singular vectors of A. " --> </remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SVD.V">
      <summary>Returns the V part of the singular value decomposition.</summary>
      <remarks> The Singular Value Decomposition (SVD) of a mxn matrix A is written A = U*S*VH where S is an nxn (mxn if m&lt;n) matrix which is zero except for its min(m,n) diagonal elements, U is an mxn (mxm if m&lt;n) orthogonal/unitary matrix, and V is an nxn orthogonal/unitary matrix. The diagonal elements of S are the singular values of A; they are real and non-negative, and are returned in descending order. The first min(m,n) columns of U and V are the left and right singular vectors of A. </remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SVD.VH">
      <summary>Returns the transpose of the V part of the singular value decomposition.</summary>
      <remarks> The Singular Value Decomposition (SVD) of a mxn matrix A is written A = U*S*VH where S is an nxn (mxn if m&lt;n) matrix which is zero except for its min(m,n) diagonal elements, U is an mxn (mxm if m&lt;n) orthogonal/unitary matrix, and V is an nxn orthogonal/unitary matrix. The diagonal elements of S are the singular values of A; they are real and non-negative, and are returned in descending order. The first min(m,n) columns of U and V are the left and right singular vectors of A. </remarks>
    </member>
    <member name="T:Bluebit.MatrixLibrary.SymEigen">
      <summary>The SymEigen class is used to compute the eigenvalues and optionally the eigenvectors of a real symmetric matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SymEigen.#ctor">
      <summary>Initializes a new instance of the SymEigen class computing the eigen decomposition of a real symmetric matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SymEigen.#ctor(Bluebit.MatrixLibrary.Matrix)">
      <summary>Initializes a new instance of the SymEigen class computing the eigenvalues and the eigenvectors of a real symmetric matrix.</summary>
      <remarks>No check is made if matrix is actually symmetric and only its lower triangular part is used in calculations.</remarks>
      <param name="matrix">A Matrix object representing the real symmetric matrix whose eigenvalues and right eigenvectors are to be computed.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SymEigen.#ctor(Bluebit.MatrixLibrary.Matrix,System.Boolean)">
      <summary>Initializes a new instance of the SymEigen class computing the eigenvalues and optionally the eigenvectors of a real symmetric matrix.</summary>
      <remarks>No check is made if matrix is actually symmetric and only its lower triangular part is used in calculations.</remarks>
      <param name="matrix">A Matrix object representing the real symmetric matrix whose eigenvalues and right eigenvectors are to be computed. computed.</param>
      <param name="eigenvectors">A boolean value specifying whether eigenvectors will be calculated.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SymEigen.Dispose">
      <summary>Releases all the resources used by the ShortParentItemName object.</summary>
      <remarks>Calling Dispose allows the resources used by this object to be reallocated for other purposes.</remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SymEigen.D">
      <summary>Gets a real diagonal matrix, containing all the computed eigenvalues in its main diagonal.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SymEigen.Eigenvalue(System.Int32)">
      <summary>Gets the specified eigenvalue.</summary>
      <param name="index">A zero-based index specifying the eigenvalue to return.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SymEigen.Eigenvalues">
      <summary>Returns a vector containing all the computed eigenvalues.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SymEigen.Eigenvector(System.Int32)">
      <summary>Gets the specified eigenvector.</summary>
      <remarks>If the eigenvectors parameter of the SymEigen class constructor is set to false, the eigenvectors are not calculated and Eigenvector property returns a null reference (Nothing in Visual Basic).</remarks>
      <param name="index">An index specifying the eigenvector to return.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SymEigen.Eigenvectors">
      <summary>Gets the eigenvectors matrix.</summary>
      <remarks>If the eigenvectors parameter of the SymEigen class constructor is set to false, the eigenvectors are not calculated and Eigenvectors property returns a null reference (Nothing in Visual Basic).</remarks>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SymEigen.Size">
      <summary>Gets the size of matrix that is represented by this eigen decomposition.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SymEigen.Succeded">
      <summary>Indicates whether the eigenvalues-eigenvectors calculation succeeded to complete.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.Vector">
      <summary>Represents a vector having as elements double floating point numbers.</summary>
      <remarks>Vector class is used as to represent a real vector. Its methods can be used to perform vector operations and data manipulation.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.#ctor">
      <summary>Initializes a new instance of the Vector class.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.#ctor">
      <summary>Initializes a new instance of the Vector class creating a vector of length equal to 3.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.#ctor(System.Double[])">
      <summary>Initializes a new instance of the Vector class using the content of an array.</summary>
      <param name="array">The array of complex structures whose content will be used to initialize the elements of the newly created Vector object.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.#ctor(System.Int32)">
      <summary>Creates a new instance of the Vector class specifying its length.</summary>
      <param name="size">The length of the newly created vector.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.#ctor(System.Int32,System.Double)">
      <summary>Creates a new instance of the Vector class specifying its length and a value to initialize its components.</summary>
      <param name="size">An integer value specifying the length of the newly created vector.</param>
      <param name="value">A double that will be used to initialize vector elements.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.#ctor(Bluebit.MatrixLibrary.Vector)">
      <summary>Creates a new instance of the Vector class, copying the content of an existing vector.</summary>
      <remarks>This is the copy constructor of the Vector class.</remarks>
      <param name="vector">The Vector object whose elements will by copied into the newly created vector.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.AbsSum">
      <summary>Returns the sum of magnitudes of the vector elements.</summary>
      <returns>A double value equal to the sum of magnitudes of the vector elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Add">
      <summary>Adds vectors.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Add(System.Double,Bluebit.MatrixLibrary.Vector,Bluebit.MatrixLibrary.Vector)">
      <summary> Computes a vector-scalar product and adds the result to a vector. It is defined as: y=A*x+y</summary>
      <param name="alpha">A double representing the scalar value to multiply with the vector.</param>
      <param name="x">A Vector object representing the vector to multiply with the scalar.</param>
      <param name="y">A Vector object representing the vector to add with.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Add(Bluebit.MatrixLibrary.Vector,System.Double)">
      <summary>Adds a vector with a scalar.</summary>
      <returns>A Vector object representing the result of the addition.</returns>
      <param name="x">A Vector instance representing the vector to add with the scalar.</param>
      <param name="alpha">A double value representing the scalar to add with the vector.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Add(Bluebit.MatrixLibrary.Vector,Bluebit.MatrixLibrary.Vector)">
      <summary>Adds two vectors.</summary>
      <returns>A Vector object that represents the result of the addition.</returns>
      <param name="x">A Vector instance on the left side of the addition operator.</param>
      <param name="y">A Vector instance on the right side of the addition operator.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.ApplyFunction">
      <summary>Returns a new Vector object, whose elements are the result of applying the specified double function to the elements of this vector.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.ApplyFunction(Bluebit.MatrixLibrary.DoubleFunction2Dbl2Int,System.Double,System.Int32)">
      <summary>Returns a new Vector object, whose elements are the result of applying the specified double function to the element of this vector.</summary>
      <returns>A new Vector object with the same length as this vector, whose elements are the results of applying the specified function to the elements of this vector.</returns>
      <remarks> The elements of this vector are passed one by one as parameters to the function that is represented by the delegate. The returned values from this function are used to initialize the elements of the newly created Vector object. The index of the vector element is passed as the forth parameter of the function represented by the delegate. </remarks>
      <param name="function">A delegate to a function that takes as its first and second parameter a double, as its third and forth parameter an integer, and returns a double.</param>
      <param name="value1">A double value that will be passed to the second parameter of the function represented by the delegate.</param>
      <param name="value2">An integer value that will be passed to the third parameter of the function represented by the delegate.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.ApplyFunction(Bluebit.MatrixLibrary.DoubleFunction1Dbl2Int,System.Int32)">
      <summary>Returns a new Vector object, whose elements are the result of applying the specified double function to the element of this vector.</summary>
      <returns> A new Vector object with the same length as this vector, whose elements are the results of applying the specified function to the elements of this vector.</returns>
      <remarks> The elements of this vector are passed one by one as parameters to the function that is represented by the delegate. The returned values from this function are used to initialize the elements of the newly created Vector object. The index of the vector element is passed as the third parameter of the function represented by the delegate. </remarks>
      <param name="function">A delegate to a function that takes as its first parameter a double, as a second and third parameter an integer and returns a double.</param>
      <param name="value">The integer value that will be passed to the second parameter of the function represented by the delegate.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.ApplyFunction(Bluebit.MatrixLibrary.DoubleFunction1Dbl1Int,System.Int32)">
      <summary>Returns a new Vector object, whose elements are the result of applying the specified double function to the element of this vector.</summary>
      <remarks> The elements of this vector are passed one by one as parameters to the function that is represented by the delegate. The returned values from this function are used to initialize the elements of the newly created Vector object.</remarks>
      <returns>A new Vector object with the same length as this vector, whose elements are the results of applying the specified function to the elements of this vector.</returns>
      <param name="function">A delegate to a function that takes as its first parameter a double, as a second parameter an integer and returns a double.</param>
      <param name="value">The integer value that will be passed to the second parameter of the function represented by the delegate.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.ApplyFunction(Bluebit.MatrixLibrary.DoubleFunction2Dbl,System.Double)">
      <summary>Returns a new Vector object, whose elements are the result of applying the specified double function to the element of this vector.</summary>
      <returns>A new Vector object with the same length as this vector, whose elements are the results of applying the specified function to the elements of this vector.</returns>
      <remarks> The elements of this vector are passed one by one as parameters to the function that is represented by the delegate. The returned values from this function are used to initialize the elements of the newly created Vector object.</remarks>
      <param name="function">A delegate to a function that takes as its first and second parameter a double and returns a double.</param>
      <param name="value">The double value that will be passed to the second parameter of the function represented by the delegate.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.ApplyFunction(Bluebit.MatrixLibrary.DoubleFunction1Dbl)">
      <summary>Returns a new Vector object, whose elements are the result of applying the specified double function to the element of this vector.</summary>
      <returns>A new Vector object with the same length as this vector, whose elements are the results of applying the specified function to the elements of this vector.</returns>
      <remarks>The elements of this vector are passed one by one as parameters to the function that is represented by the delegate. The returned values from this function are used to initialize the elements of the newly created Vector object.</remarks>
      <param name="function">A delegate to a function that takes one double parameter and returns a double.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Clear">
      <summary>Sets the value of all the CVector elements to zero.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Clone">
      <summary>Creates a duplicate of this Vector object.</summary>
      <remarks>A deep copy is created. Each Vector object references different data.</remarks>
      <returns>A new Vector object that contains the same data as this.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Dispose">
      <summary>Releases all the resources used by the ShortParentItemName object.</summary>
      <remarks>Calling Dispose allows the resources used by this object to be reallocated for other purposes.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Divide">
      <summary>Divides real vectors.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Divide(System.Double,Bluebit.MatrixLibrary.Vector)">
      <summary>Divides a scalar by a real vector.</summary>
      <returns>A Vector object representing the result of the scalar-vector division.</returns>
      <param name="alpha">A double representing the scalar on the left of the division operator.</param>
      <param name="x">A Vector object representing the vector on the right of the division operator.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Divide(Bluebit.MatrixLibrary.Vector,System.Double)">
      <summary>Divides a real vector by a scalar.</summary>
      <returns>A Vector object representing the result of the vector-scalar division.</returns>
      <param name="x">A Vector object representing the vector on the left of the division operator.</param>
      <param name="alpha">A double representing the scalar on the right of the division operator.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Divide(Bluebit.MatrixLibrary.Vector,Bluebit.MatrixLibrary.Vector)">
      <summary>Divides two real vectors.</summary>
      <returns>A Vector object representing the result of the vector-vector division.</returns>
      <param name="x">A Vector object representing the vector on the left of the division operator.</param>
      <param name="y">A Vector object representing the vector on the right of the division operator.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.DotProduct">
      <summary>Returns the dot product of vectors.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.DotProduct(Bluebit.MatrixLibrary.Vector)">
      <summary>Returns the dot product of this vector with another vector.</summary>
      <returns>A double representing the dot product of this vector with the specified vector.</returns>
      <param name="vector">A Vector object.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.DotProduct(Bluebit.MatrixLibrary.Vector,Bluebit.MatrixLibrary.Vector)">
      <summary>Returns the dot product of two complex vectors.</summary>
      <returns>A double representing the dot product of the two vectors.</returns>
      <param name="x">A Vector object representing the first complex vector.</param>
      <param name="y">A Vector object representing the second complex vector.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Equals(System.Object)">
      <summary>Returns a value indicating whether this Vector object is equal to another vector.</summary>
      <returns>true if obj is an instance of the Vector class and represents a vector that has the same length as this instance and also all the elements of obj are equal to the elements of this instance; false otherwise.</returns>
      <param name="obj">An object to compare with this instance of the Vector class.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.FillRandom">
      <summary>Fills the Vector object with random values ranging from 0 to 10, rounded to zero decimal places.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.FillRandom">
      <summary>Fills the Vector object with random values ranging from 0 to 10, rounded to zero decimal places.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.FillRandom(System.Double,System.Double)">
      <summary>Fills the Vector object with random values ranging from lower to upper bound, rounded to 0 decimal places.</summary>
      <remarks>Use FillRandom method in order to quickly fill the vector with random values, while coding, testing and debugging your application.</remarks>
      <param name="lowerBound">A double specifying the lower limit of the random values that will be used.</param>
      <param name="upperBound">A double specifying the upper limit of the random values that will be used.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.FillRandom(System.Double,System.Double,System.Int32)">
      <summary>Fills the Vector object with random values ranging from lower bound to upper bound, rounded to the specified number of decimal places.</summary>
      <remarks>Use FillRandom method in order to quickly fill the vector with random values, while coding, testing and debugging your application.</remarks>
      <param name="lowerBound">A double specifying the lower limit of the random values that will be used.</param>
      <param name="upperBound">A double specifying the upper limit of the random values that will be used.</param>
      <param name="decimals">An integer specifying the number of decimal places to which random values will be rounded to.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.GetHashCode">
      <summary>Returns the hash code of the current ShortParentItemName.</summary>
      <returns>A 32-bit signed integer that represents the hash code.</returns>
      <remarks>This method overrides Object.GetHashCode and generates the same hash code for two objects that are equal according to the Equals method.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implements the ISerializable interface and returns the data needed to serialize the Vector class.</summary>
      <remarks>This method implements the ISerializable interface.</remarks>
      <param name="info">A SerializationInfo object.</param>
      <param name="context">A StreamingContext structure.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.HasINFs">
      <summary>Returns a value indicating whether the current vector contains any elements that evaluate to negative or positive infinity.</summary>
      <returns>true if any of the vector elements evaluates to negative or positive infinity; otherwise false.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.HasNaNs">
      <summary>Returns a value indicating whether the current vector contains any elements that evaluate to NaN values.</summary>
      <returns>true if any of the vector elements evaluates to a NaN value; otherwise false.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.IsFinite">
      <summary>Returns a value indicating whether the current vector contains any elements that evaluate either to NaN or to negative or positive infinity.</summary>
      <returns>true if all elements of the current vector have a value other NaN, negative infinity, positive infinity; otherwise false.</returns>
      <remarks> Most of the internal routines expect that input matrices or vectors do not contain any negative infinity, positive infinity, or NaN values in order to perform flawlessly. If you suspect that the current matrix or vector may contain any NaN or infinity values, use the IsFinite method before any further processing.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Multiply">
      <summary>Multiplies vectors.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Multiply(Bluebit.MatrixLibrary.Vector,System.Double)">
      <summary>Multiplies a vector by a scalar.</summary>
      <returns>A Vector object representing the result of the vector-scalar multiplication.</returns>
      <param name="x">A Vector instance representing the vector to multiply by the scalar.</param>
      <param name="alpha">A double value representing the scalar by which to multiply the vector.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Multiply(Bluebit.MatrixLibrary.Vector,Bluebit.MatrixLibrary.Vector)">
      <summary>Multiplies two vectors.</summary>
      <returns>A Vector object that represents the result of the multiplication.</returns>
      <param name="x">A Vector instance on the left side of the multiplication operator.</param>
      <param name="y">A Vector instance on the right side of the multiplication operator.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Norm">
      <summary>Returns the Euclidean norm of the vector.</summary>
      <returns>A double equal to the Euclidean norm of the vector.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Normalize(Bluebit.MatrixLibrary.NormalizeMode)">
      <summary>Normalizes the current vector according to the specified mode.</summary>
      <remarks> The following table lists the values of NormalizeMode enumeration and their effect on vector normalization. Member Description MaximumOne Normalizes vector elements so that the biggest element is 1. UnitLength Normalizes the vector so that it becomes a unit length vector(the sum of squares of vector elements is 1). ZScores Normalizes vector elements to zscores (values having zero mean and unit standard deviation). </remarks>
      <param name="mode">A NormalizeMode enumeration value indicating how this vector will be normalized.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Resize(System.Int32)">
      <summary>Resizes the vector preserving its content.</summary>
      <param name="size">An integer specifying the new length of the vector.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Subtract">
      <summary>Subtracts real vectors.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Subtract(System.Double,Bluebit.MatrixLibrary.Vector)">
      <summary>Subtracts a real vector from a scalar.</summary>
      <returns>A Vector object representing the result of the subtraction.</returns>
      <param name="alpha">A double representing the scalar from which to subtract the vector.</param>
      <param name="x">A Vector instance representing the vector to subtract from the scalar.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Subtract(Bluebit.MatrixLibrary.Vector,System.Double)">
      <summary>Subtracts a scalar from a vector.</summary>
      <returns>A Vector object representing the result of the subtraction.</returns>
      <param name="x">A Vector instance from which to subtract the scalar.</param>
      <param name="alpha">A double representing the scalar to subtract from the vector.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Subtract(Bluebit.MatrixLibrary.Vector,Bluebit.MatrixLibrary.Vector)">
      <summary>Subtracts a vector from another vector.</summary>
      <returns>A Vector object representing the result of the subtraction.</returns>
      <param name="x">A Vector instance on the left of the subtraction operator.</param>
      <param name="y">A Vector instance on the right of the subtraction operator.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Sum">
      <summary>Returns the sum of vector elements.</summary>
      <returns>A double equal to the sum of vector elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.ToArray">
      <summary>Returns an array of type double containing the same values as the current vector.</summary>
      <returns>An array of type double containing the same values as the current vector.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.ToMatrix">
      <summary>Converts current vector to a Matrix object.</summary>
      <returns>A one-column Matrix object containing the same values as this vector.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.ToString">
      <summary>Converts this instance of Vector to a formatted string.</summary>
      <returns>A formatted string containing all vector elements.</returns>
      <remarks>The "F3" format string is used to format each vector element. A space character is used as a separator of vector elements. The right and left borders are set to "| " and " |" strings respectively. The new line character "\n" is added at the end of the string.</remarks>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.ToString">
      <summary>Converts this instance of Vector to a formatted string using the default values for format string, separator, left and right borders, and end of line characters.</summary>
      <remarks>The "F3" format string is used to format each vector element. A space character is used as a separator of vector elements. The right and left borders are set to "| " and " |" strings respectively. The new line character "\n" is added at the end of the string.</remarks>
      <returns>A formatted string containing all vector elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.ToString(System.String)">
      <summary>Converts this instance of Vector to a formatted string specifying a format string, and using the the default values for separator, left and right borders, and end of line characters.</summary>
      <remarks>A space character is used as a separator of vector elements. The left and right borders are set to "| " and " |" strings respectively. The new line character "\n" is added at the end of the string.</remarks>
      <returns>A formatted string containing all vector elements.</returns>
      <param name="format">A format string that will be used to convert all vector elements.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.ToString(System.String,System.String)">
      <summary>Converts this instance of Vector to a formatted string specifying a format string, and a separator and using the default values for left and right borders and end of line characters.</summary>
      <returns>A formatted string containing all vector elements.</returns>
      <remarks>The left and right borders are set to "| " and " |" strings respectively. The new line character "\n" is added at the end of the string.</remarks>
      <param name="format">A format string that will be used to convert all vector elements.</param>
      <param name="separator">A string that will be used to separate vector elements.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.ToString(System.String,System.String,System.String,System.String,System.String)">
      <summary>Converts this instance of Vector to a formatted string specifying a format string, a separator, left and right borders and end of line characters.</summary>
      <returns>A formatted string containing all vector elements.</returns>
      <param name="format">A format string that will be used to convert all vector elements.</param>
      <param name="separator">A string that will be used to separate vector elements.</param>
      <param name="leftBorder">A string that will be added at the beginning of the string.</param>
      <param name="rightBorder">A string that will be added at the end of the string.</param>
      <param name="endVector">A string that will be added at the end of the string.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.ToString(System.IFormatProvider,System.String)">
      <summary>Converts this instance of ShortParentItemName to a formatted string specifying culture-specific format information and a format string.</summary>
      <param name="provider"> An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="format">A format string that will be used to convert all matrix elements.</param>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.ToString(System.IFormatProvider,System.String,System.String,System.String,System.String,System.String)">
      <summary>Converts this instance of ShortParentItemName to a formatted string specifying culture-specific format information, a format string, a separator, left and right borders and end of line characters.</summary>
      <param name="provider"> An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="format">A format string that will be used to convert all matrix elements.</param>
      <param name="separator">A string that will be used to separate matrix elements.</param>
      <param name="leftBorder">A string that will be added at the beginning of each matrix row.</param>
      <param name="rightBorder">A string that will be added at the end of each matrix row.</param>
      <param name="endVector">A string that will be added at the end of each matrix row.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Vector.op_Addition">
      <summary>Adds real vectors.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Vector.op_Addition">
      <summary>Adds a scalar and a real vector.</summary>
      <returns>A Vector object representing the result of the addition.</returns>
      <param name="alpha">A double representing the scalar on the left side of the addition operator.</param>
      <param name="vector">A Vector instance on the right side of the addition operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Vector.op_Addition">
      <summary>Adds a real vector and a scalar.</summary>
      <returns>A Vector object representing the result of the addition.</returns>
      <param name="y">A Vector instance on the left side of the addition operator.</param>
      <param name="alpha">A double representing the scalar on the right side of the addition operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Vector.op_Addition">
      <summary>Adds two real vectors.</summary>
      <returns>A Vector object representing the result of the addition.</returns>
      <param name="x">A Vector instance on the left side of the addition operator.</param>
      <param name="y">A Vector instance on the left side of the addition operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Vector.op_Division">
      <summary>Divides real vectors.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Vector.op_Division">
      <summary>Divides a scalar by a real vector.</summary>
      <returns>A Vector object representing the result of the scalar-vector division.</returns>
      <param name="alpha">A double representing the scalar on the left of the division operator.</param>
      <param name="x">A Vector object representing the vector on the right of the division operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Vector.op_Division">
      <summary>Divides a real vector by a scalar.</summary>
      <returns>A CVector object representing the result of the vector-scalar division.</returns>
      <param name="x">A CVector object representing the vector on the left of the division operator.</param>
      <param name="alpha">A double representing the scalar on the right of the division operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Vector.op_Division">
      <summary>Divides two real vectors.</summary>
      <returns>A CVector object representing the result of the vector-vector division.</returns>
      <param name="x">A CVector object representing the vector on the left of the division operator.</param>
      <param name="y">A CVector object representing the vector on the right of the division operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Vector.op_Equality">
      <summary>Tests whether two Vector objects represent equal vectors.</summary>
      <returns>true if vectors are equal; otherwise false.</returns>
      <remarks> The equality operator returns false if vectors are not of the same length. The elements of the compared vectors must be exactly equal in order to the equality operator return true.</remarks>
      <param name="x">A Vector instance on the left side of the equality operator.</param>
      <param name="y">A Vector instance on the right side of the equality operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Vector.op_Implicit">
      <summary>Converts a Vector object.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Vector.op_Implicit">
      <summary>Convers a Vector object to a Matrix Class object.</summary>
      <returns>A Matrix object.</returns>
      <param name="vector">The Vector to convert.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Vector.op_Implicit">
      <summary>Converts an array of type double to a Vector object.</summary>
      <returns>A Vector object.</returns>
      <param name="array">The array of type double to convert.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Vector.op_Inequality">
      <summary>Tests whether two Vector objects represent non equal vectors.</summary>
      <returns>true if vectors are not equal; otherwise false.</returns>
      <param name="x">A Vector instance on the left side of the equality operator.</param>
      <param name="y">A Vector instance on the right side of the equality operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Vector.op_Multiply">
      <summary>Multiplies real vectors.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Vector.op_Multiply">
      <summary>Multiplies a scalar by a real vector.</summary>
      <returns>A Vector object representing the result of the multiplication.</returns>
      <param name="alpha">A double representing the scalar on the left of the multiplication operator.</param>
      <param name="x">A Vector instance on the right of the multiplication operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Vector.op_Multiply">
      <summary>Multiplies a real vector by a scalar.</summary>
      <returns>A Vector object representing the result of the multiplication.</returns>
      <param name="x">A Vector instance on the left of the multiplication operator.</param>
      <param name="alpha">A double representing the scalar on the right of the multiplication operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Vector.op_Multiply">
      <summary>Multiplies two real vectors.</summary>
      <returns>A Vector object representing the result of the multiplication.</returns>
      <param name="x">A Vector instance on the left of the multiplication operator.</param>
      <param name="y">A Vector instance on the right of the multiplication operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Vector.op_Subtraction">
      <summary>Subtracts real vectors.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Vector.op_Subtraction">
      <summary>Subtracts a real vector from a scalar.</summary>
      <returns>A Vector object representing the result of the subtraction.</returns>
      <param name="alpha">A double representing the scalar on the left of the subtraction operator.</param>
      <param name="x">A Vector instance on the right of the subtraction operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Vector.op_Subtraction">
      <summary>Subtracts a scalar from a real vector.</summary>
      <returns>A Vector object representing the result of the subtraction.</returns>
      <param name="x">A Vector instance on the left of the subtraction operator.</param>
      <param name="alpha">A double representing the scalar on the right of the subtraction operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Vector.op_Subtraction">
      <summary>Subtracts a vector from another vector.</summary>
      <returns>A Vector instance on the left of the subtraction operator.</returns>
      <param name="x">A Vector instance on the left of the subtraction operator.</param>
      <param name="y">A Vector instance on the right of the subtraction operator.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Vector.Data">
      <summary>This property is used while serializing and deserializing the Vector object and is not intended to be used directly from your code.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Vector.DataPtr">
      <summary>Gets the address of the unmanaged (native) memory block containing the vector's elements.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Vector.Item(System.Int32)">
      <summary>Gets or sets a single vector element.</summary>
      <remarks>This is the default property of the Vector object when using it in Visual Basic. It is the indexer of the Vector object when used in C#.</remarks>
      <param name="index">A zero based index of the element to get or to set.</param>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Vector.Length">
      <summary>Gets or sets the vector length.</summary>
      <remarks>Setting the vector length to new value is the same as using the Resize method.</remarks>
    </member>
    <member name="T:Bluebit.MatrixLibrary.ComplexFunction1Cmp">
      <summary>A delegate to a method that takes one complex as a parameter and returns a complex.</summary>
      <param name="value">A complex.</param>
    </member>
    <member name="T:Bluebit.MatrixLibrary.ComplexFunction1Cmp1Int">
      <summary>A delegate to a method that takes one complex and one integer parameter and returns a complex.</summary>
      <param name="value">A complex.</param>
      <param name="index">An integer.</param>
    </member>
    <member name="T:Bluebit.MatrixLibrary.ComplexFunction1Cmp2Int">
      <summary>A delegate to a method that takes one complex and two integer parameters and returns a complex.</summary>
      <param name="value">A complex.</param>
      <param name="index1">An integer.</param>
      <param name="index2">An integer.</param>
    </member>
    <member name="T:Bluebit.MatrixLibrary.ComplexFunction2Cmp">
      <summary>A delegate to a method that takes two complex parameters and returns a complex.</summary>
      <param name="value1">A complex.</param>
      <param name="value2">A complex.</param>
    </member>
    <member name="T:Bluebit.MatrixLibrary.ComplexFunction2Cmp2Int">
      <summary>A delegate to a method that takes two complex and two integer parameters and returns a complex.</summary>
      <param name="value1">A complex.</param>
      <param name="value2">A complex.</param>
      <param name="index1">An integer.</param>
      <param name="index2">An integer.</param>
    </member>
    <member name="T:Bluebit.MatrixLibrary.DoubleFunction1Dbl">
      <summary>A delegate to a method that takes one double parameter and returns a double.</summary>
      <param name="value">A double.</param>
    </member>
    <member name="T:Bluebit.MatrixLibrary.DoubleFunction1Dbl1Int">
      <summary>A delegate to a method that takes one double and one integer parameter and returns a double.</summary>
      <param name="value">A double.</param>
      <param name="index">An integer.</param>
    </member>
    <member name="T:Bluebit.MatrixLibrary.DoubleFunction1Dbl2Int">
      <summary>A delegate to a method that takes one double and two integer parameters and returns a double.</summary>
      <param name="value">A double.</param>
      <param name="index1">An integer.</param>
      <param name="index2">An integer.</param>
    </member>
    <member name="T:Bluebit.MatrixLibrary.DoubleFunction2Dbl">
      <summary>A delegate to a method that takes two double parameters and returns a double.</summary>
      <param name="value1">A double.</param>
      <param name="value2">A double.</param>
    </member>
    <member name="T:Bluebit.MatrixLibrary.DoubleFunction2Dbl2Int">
      <summary>A delegate to a method that takes two double and two integer parameters and returns a double.</summary>
      <param name="value1">A double.</param>
      <param name="value2">A double.</param>
      <param name="index1">An integer.</param>
      <param name="index2">An integer.</param>
    </member>
  </members>
</doc>
